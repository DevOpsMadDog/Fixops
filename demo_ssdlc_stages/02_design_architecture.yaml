
stage: design
timestamp: "2025-10-17T11:30:00Z"
architect: "David Kim"
security_architect: "Elena Popov"

architecture:
  pattern: "Microservices with API Gateway"
  deployment_model: "Cloud-native (AWS)"
  
  components:
    - name: api-gateway
      type: service
      criticality: critical
      exposure: internet
      data_classification: pii
      environment: production
      technology: "Kong API Gateway"
      
    - name: payment-service
      type: service
      criticality: critical
      exposure: internal
      data_classification: payment_card_data
      environment: production
      technology: "Java Spring Boot 3.2"
      dependencies:
        - stripe-java-sdk: "24.1.0"
        - postgresql: "42.7.1"
        
    - name: user-service
      type: service
      criticality: high
      exposure: internal
      data_classification: pii
      environment: production
      technology: "Python FastAPI 0.110"
      dependencies:
        - bcrypt: "4.1.2"
        - pyjwt: "2.8.0"
        
    - name: audit-service
      type: service
      criticality: high
      exposure: internal
      data_classification: audit_logs
      environment: production
      technology: "Go 1.21"

security_architecture:
  network_zones:
    - zone: dmz
      components: [api-gateway]
      ingress: internet
      egress: internal
      
    - zone: application
      components: [payment-service, user-service]
      ingress: dmz
      egress: database
      
    - zone: data
      components: [postgresql, redis]
      ingress: application
      egress: none
      
  encryption:
    at_rest:
      method: "AWS KMS"
      algorithm: "AES-256-GCM"
      key_rotation: "90 days"
      
    in_transit:
      method: "TLS 1.3"
      cipher_suites:
        - TLS_AES_256_GCM_SHA384
        - TLS_CHACHA20_POLY1305_SHA256
        
  authentication:
    internal: "mTLS certificates"
    external: "OAuth 2.0 + JWT"
    session_management: "Redis with 15min TTL"
    
  secrets_management:
    provider: "AWS Secrets Manager"
    rotation: "automatic every 30 days"
    access_control: "IAM roles with least privilege"

data_flows:
  - flow_id: DF-001
    source: "Customer Browser"
    destination: "API Gateway"
    protocol: "HTTPS"
    data_classification: pii
    encryption: "TLS 1.3"
    
  - flow_id: DF-002
    source: "API Gateway"
    destination: "Payment Service"
    protocol: "gRPC over mTLS"
    data_classification: payment_card_data
    encryption: "mTLS + payload encryption"
    
  - flow_id: DF-003
    source: "Payment Service"
    destination: "Stripe API"
    protocol: "HTTPS"
    data_classification: tokenized_payment_data
    encryption: "TLS 1.3"

design_decisions:
  - decision_id: DD-001
    title: "Use Stripe for PCI compliance"
    rationale: "Avoid storing card data, reduce PCI scope"
    alternatives_considered:
      - "Build in-house payment processing"
      - "Use PayPal"
    selected: "Stripe"
    security_impact: "Significantly reduced attack surface"
    
  - decision_id: DD-002
    title: "Microservices vs Monolith"
    rationale: "Fault isolation, independent scaling"
    selected: "Microservices"
    security_impact: "Smaller blast radius per service"
    
  - decision_id: DD-003
    title: "Secrets management strategy"
    rationale: "Centralized rotation, audit trail"
    selected: "AWS Secrets Manager"
    security_impact: "No secrets in code or env vars"

{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SonarQube",
          "version": "9.6.1",
          "informationUri": "https://www.sonarqube.org/"
        }
      },
      "results": [
        {
          "ruleId": "java:S3649",
          "level": "error",
          "message": {
            "text": "SQL injection vulnerability detected in policy search endpoint. User input is directly concatenated into SQL query without parameterization."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/api/PolicySearchController.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 20,
                  "snippet": {
                    "text": "String query = \"SELECT * FROM policies WHERE policy_number = '\" + policyNumber + \"'\";"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "9.8",
            "tags": ["security", "sql-injection", "cwe-89"]
          }
        },
        {
          "ruleId": "java:S2068",
          "level": "error",
          "message": {
            "text": "Hardcoded credentials detected. API key is stored directly in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/config/AppConfig.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "snippet": {
                    "text": "private static final String API_KEY = \"REDACTED_API_KEY_EXAMPLE_DO_NOT_USE\";"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "7.5",
            "tags": ["security", "credentials", "cwe-798"]
          }
        },
        {
          "ruleId": "java:S4502",
          "level": "warning",
          "message": {
            "text": "Weak password validation allows passwords shorter than 8 characters."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/auth/PasswordValidator.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 15,
                  "snippet": {
                    "text": "if (password.length() >= 6) { return true; }"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "5.3",
            "tags": ["security", "authentication", "cwe-521"]
          }
        },
        {
          "ruleId": "java:S5131",
          "level": "error",
          "message": {
            "text": "Cross-Site Scripting (XSS) vulnerability. User input is rendered without sanitization."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/web/ClaimsController.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 25,
                  "snippet": {
                    "text": "model.addAttribute(\"claimDescription\", request.getParameter(\"description\"));"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "6.1",
            "tags": ["security", "xss", "cwe-79"]
          }
        },
        {
          "ruleId": "java:S4830",
          "level": "error",
          "message": {
            "text": "Server certificate validation is disabled, allowing man-in-the-middle attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/client/PaymentGatewayClient.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "snippet": {
                    "text": "sslContext.init(null, trustAllCerts, new SecureRandom());"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "7.4",
            "tags": ["security", "tls", "cwe-295"]
          }
        },
        {
          "ruleId": "java:S2076",
          "level": "warning",
          "message": {
            "text": "OS command injection vulnerability. User input is passed to Runtime.exec() without validation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/insureco/reports/ReportGenerator.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 20,
                  "snippet": {
                    "text": "Runtime.getRuntime().exec(\"convert \" + userFilePath + \" output.pdf\");"
                  }
                }
              }
            }
          ],
          "properties": {
            "security-severity": "8.1",
            "tags": ["security", "command-injection", "cwe-78"]
          }
        }
      ]
    }
  ]
}

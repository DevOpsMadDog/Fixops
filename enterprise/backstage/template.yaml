apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: fixops-deployment-template
  title: Deploy FixOps Decision Engine
  description: |
    Deploy FixOps Decision Engine to bank Kubernetes cluster via Terraform.
    Creates complete infrastructure including namespaces, RBAC, storage, and monitoring.
  annotations:
    backstage.io/managed-by-location: url:https://git.bank.internal/platform/backstage-templates
  tags:
    - security
    - devsecops
    - kubernetes
    - terraform
    - banking
spec:
  owner: platform-engineering
  type: service
  
  parameters:
    - title: FixOps Deployment Configuration
      required:
        - name
        - environment
        - cluster
      properties:
        name:
          title: Deployment Name
          type: string
          description: Name for this FixOps deployment
          default: fixops-decision-engine
          pattern: '^[a-z0-9-]+$'
        environment:
          title: Environment
          type: string
          description: Target environment for deployment
          enum:
            - development
            - staging  
            - production
          enumNames:
            - Development
            - Staging
            - Production
        cluster:
          title: Kubernetes Cluster
          type: string
          description: Target bank Kubernetes cluster
          enum:
            - bank-dev-cluster
            - bank-staging-cluster
            - bank-prod-cluster
          enumNames:
            - Bank Development Cluster
            - Bank Staging Cluster  
            - Bank Production Cluster
        
    - title: Configuration
      required:
        - llm_integration
        - demo_mode
      properties:
        llm_integration:
          title: LLM Integration
          type: boolean
          description: Enable real LLM processing with Emergent key
          default: true
        demo_mode:
          title: Demo Mode
          type: boolean
          description: Use simulated data (demo) or real integrations (production)
          default: false
        storage_size:
          title: Evidence Lake Storage Size
          type: string
          description: Persistent storage size for Evidence Lake
          default: 10Gi
          enum: [10Gi, 50Gi, 100Gi, 500Gi]
        replicas:
          title: Backend Replicas
          type: integer
          description: Number of backend replicas for HA
          default: 3
          minimum: 1
          maximum: 10
        
    - title: Bank Integration
      properties:
        enable_jira:
          title: Enable Jira Integration
          type: boolean
          description: Connect to bank's Jira for business context
          default: false
        enable_confluence:
          title: Enable Confluence Integration
          type: boolean
          description: Connect to bank's Confluence for threat models
          default: false
        compliance_frameworks:
          title: Compliance Frameworks
          type: array
          description: Required compliance frameworks for this deployment
          items:
            type: string
            enum: [pci_dss, sox, ffiec, gdpr, nist_ssdf, soc2]
          uniqueItems: true
          ui:multiSelect: true
          default: [pci_dss, sox, ffiec]

  steps:
    - id: fetch-base
      name: Fetch FixOps Repository
      action: fetch:template
      input:
        url: https://git.bank.internal/platform/fixops-decision-engine
        targetPath: ./fixops
        values:
          name: ${{ parameters.name }}
          environment: ${{ parameters.environment }}
          cluster: ${{ parameters.cluster }}
          llm_integration: ${{ parameters.llm_integration }}
          demo_mode: ${{ parameters.demo_mode }}
          storage_size: ${{ parameters.storage_size }}
          replicas: ${{ parameters.replicas }}
          enable_jira: ${{ parameters.enable_jira }}
          enable_confluence: ${{ parameters.enable_confluence }}
          compliance_frameworks: ${{ parameters.compliance_frameworks }}

    - id: create-terraform
      name: Generate Terraform Configuration
      action: roadiehq:utils:fs:write
      input:
        path: ./terraform/main.tf
        content: |
          # FixOps Terraform Configuration Generated by Backstage
          # Deployment: ${{ parameters.name }}
          # Environment: ${{ parameters.environment }}
          # Cluster: ${{ parameters.cluster }}
          
          terraform {
            required_version = ">= 1.5"
            required_providers {
              kubernetes = {
                source  = "hashicorp/kubernetes"
                version = "~> 2.23"
              }
              helm = {
                source  = "hashicorp/helm" 
                version = "~> 2.11"
              }
            }
            
            backend "s3" {
              bucket = "bank-terraform-state"
              key    = "core/${{ parameters.environment }}/${{ parameters.name }}/terraform.tfstate"
              region = "us-east-1"
            }
          }
          
          # Variables from Backstage template
          locals {
            deployment_name = "${{ parameters.name }}"
            environment     = "${{ parameters.environment }}"
            cluster_name    = "${{ parameters.cluster }}"
            namespace       = "fixops-${{ parameters.environment }}"
            
            labels = {
              "app.kubernetes.io/name"       = "fixops"
              "app.kubernetes.io/instance"   = local.deployment_name
              "app.kubernetes.io/version"    = "1.0.0"
              "app.kubernetes.io/component"  = "decision-engine"
              "app.kubernetes.io/part-of"    = "security-platform"
              "app.kubernetes.io/managed-by" = "terraform"
              "environment"                  = local.environment
              "security.bank/classification" = "confidential"
              "compliance.bank/frameworks"   = join(",", ${{ parameters.compliance_frameworks | dump }})
            }
          }
          
          # Kubernetes provider
          provider "kubernetes" {
            config_path = "~/.kube/config"
            config_context = "bank-${local.cluster_name}"
          }
          
          provider "helm" {
            kubernetes {
              config_path = "~/.kube/config"
              config_context = "bank-${local.cluster_name}"
            }
          }

    - id: create-terraform-modules
      name: Create Terraform Modules
      action: roadiehq:utils:fs:write
      input:
        path: ./terraform/modules.tf
        content: |
          # FixOps Terraform Modules
          
          # Namespace with security policies
          module "fixops_namespace" {
            source = "./modules/namespace"
            
            name        = local.namespace
            labels      = local.labels
            environment = local.environment
            
            # Bank security policies
            network_policies_enabled = true
            pod_security_standards   = "restricted"
            resource_quotas_enabled  = true
          }
          
          # RBAC configuration
          module "fixops_rbac" {
            source = "./modules/rbac"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Service account permissions
            service_accounts = {
              fixops-backend = {
                permissions = ["get", "list"]
                resources   = ["configmaps", "secrets", "pods"]
              }
            }
          }
          
          # Storage for Evidence Lake
          module "fixops_storage" {
            source = "./modules/storage"
            
            namespace    = module.fixops_namespace.name
            labels       = local.labels
            storage_size = "${{ parameters.storage_size }}"
            
            # Bank storage requirements
            storage_class     = "bank-encrypted-ssd"
            encryption_enabled = true
            backup_enabled     = true
            retention_years    = 7  # Bank compliance requirement
          }
          
          # FixOps Backend Deployment
          module "fixops_backend" {
            source = "./modules/backend"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Deployment configuration
            replicas = ${{ parameters.replicas }}
            image    = "core/decision-engine:latest"
            
            # Resource limits for bank environment
            resources = {
              requests = {
                memory = "512Mi"
                cpu    = "250m"
              }
              limits = {
                memory = "1Gi"
                cpu    = "500m" 
              }
            }
            
            # Configuration
            config = {
              FIXOPS_ENVIRONMENT = local.environment
              FIXOPS_DEMO_MODE   = tostring(${{ parameters.demo_mode }})
              FIXOPS_AUTH_DISABLED = "true"
              MONGO_URL          = "mongodb://mongodb.${local.namespace}:27017/fixops_${local.environment}"
              REDIS_URL          = "redis://redis.${local.namespace}:6379/0"
            }
            
            # Secrets (banks configure these)
            secrets = {
              EMERGENT_LLM_KEY = var.emergent_llm_key
              {% if parameters.enable_jira %}
              JIRA_API_TOKEN   = var.jira_api_token
              {% endif %}
              {% if parameters.enable_confluence %}
              CONFLUENCE_API_TOKEN = var.confluence_api_token
              {% endif %}
            }
            
            # Health checks for K8s
            health_checks = {
              liveness = {
                path = "/health"
                port = 8001
              }
              readiness = {
                path = "/ready"
                port = 8001
              }
            }
            
            depends_on = [
              module.fixops_storage,
              module.fixops_rbac
            ]
          }
          
          # Frontend Deployment (Optional)
          module "fixops_frontend" {
            source = "./modules/frontend"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            replicas = 2
            image    = "core/frontend:latest"
            
            backend_url = "http://fixops-backend-service.${local.namespace}:8001"
            
            depends_on = [module.fixops_backend]
          }
          
          # MongoDB for Evidence Lake
          module "fixops_mongodb" {
            source = "./modules/mongodb"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Bank-grade MongoDB configuration
            replicas        = 3  # Replica set for HA
            storage_size    = "${{ parameters.storage_size }}"
            storage_class   = "bank-encrypted-ssd"
            backup_enabled  = true
            monitoring_enabled = true
            
            # Security
            auth_enabled = true
            tls_enabled  = true
          }
          
          # Redis for Caching
          module "fixops_redis" {
            source = "./modules/redis"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Redis configuration
            replicas = 3  # Redis cluster
            memory   = "256Mi"
            
            # Security
            auth_enabled = true
            tls_enabled  = false  # Internal cluster communication
          }
          
          # Monitoring & Observability
          module "fixops_monitoring" {
            source = "./modules/monitoring"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Prometheus monitoring
            prometheus_enabled = true
            grafana_enabled    = true
            alerting_enabled   = true
            
            # Bank-specific monitoring
            sla_target_seconds = 2.0
            hot_path_target_us = 299
            
            alert_channels = [
              "bank-security-team",
              "platform-engineering",
              "compliance-team"
            ]
          }
          
          # Ingress for bank access
          module "fixops_ingress" {
            source = "./modules/ingress"
            
            namespace = module.fixops_namespace.name
            labels    = local.labels
            
            # Bank-specific ingress
            hosts = {
              api = "fixops-api.bank.internal"
              ui  = "fixops.bank.internal"
            }
            
            # TLS configuration
            tls_enabled = true
            cert_issuer = "bank-ca-issuer"
            
            # Security headers
            security_headers_enabled = true
            
            depends_on = [
              module.fixops_backend,
              module.fixops_frontend
            ]
          }

    - id: create-terraform-variables
      name: Create Terraform Variables
      action: roadiehq:utils:fs:write
      input:
        path: ./terraform/variables.tf
        content: |
          # FixOps Terraform Variables
          
          variable "emergent_llm_key" {
            description = "Emergent LLM API key for real intelligence processing"
            type        = string
            sensitive   = true
          }
          
          {% if parameters.enable_jira %}
          variable "jira_api_token" {
            description = "Bank Jira API token for business context"
            type        = string
            sensitive   = true
          }
          
          variable "jira_url" {
            description = "Bank Jira instance URL"
            type        = string
            default     = "https://jira.bank.internal"
          }
          {% endif %}
          
          {% if parameters.enable_confluence %}
          variable "confluence_api_token" {
            description = "Bank Confluence API token for threat models"
            type        = string
            sensitive   = true
          }
          
          variable "confluence_url" {
            description = "Bank Confluence instance URL"  
            type        = string
            default     = "https://confluence.bank.internal"
          }
          {% endif %}
          
          variable "mongodb_root_password" {
            description = "MongoDB root password for Evidence Lake"
            type        = string
            sensitive   = true
          }
          
          variable "redis_password" {
            description = "Redis password for caching"
            type        = string
            sensitive   = true
          }

    - id: create-terraform-outputs
      name: Create Terraform Outputs
      action: roadiehq:utils:fs:write  
      input:
        path: ./terraform/outputs.tf
        content: |
          # FixOps Terraform Outputs
          
          output "fixops_api_url" {
            description = "FixOps API endpoint for CI/CD integration"
            value       = "https://${module.fixops_ingress.api_host}"
          }
          
          output "fixops_ui_url" {
            description = "FixOps UI for security team access"
            value       = "https://${module.fixops_ingress.ui_host}"
          }
          
          output "namespace" {
            description = "Kubernetes namespace where FixOps is deployed"
            value       = module.fixops_namespace.name
          }
          
          output "service_endpoints" {
            description = "Internal service endpoints for monitoring"
            value = {
              backend_service = "fixops-backend-service.${module.fixops_namespace.name}.svc.cluster.local:8001"
              mongodb_service = "mongodb.${module.fixops_namespace.name}.svc.cluster.local:27017"
              redis_service   = "redis.${module.fixops_namespace.name}.svc.cluster.local:6379"
            }
          }
          
          output "monitoring_urls" {
            description = "Monitoring and observability endpoints"
            value = {
              prometheus_metrics = "https://${module.fixops_ingress.api_host}/metrics"
              health_check      = "https://${module.fixops_ingress.api_host}/health"
              readiness_check   = "https://${module.fixops_ingress.api_host}/ready"
            }
          }
          
          output "cicd_integration" {
            description = "CI/CD integration endpoint and examples"
            value = {
              decision_endpoint = "https://${module.fixops_ingress.api_host}/api/v1/cicd/decision"
              upload_endpoint   = "https://${module.fixops_ingress.api_host}/api/v1/scans/upload"
              curl_example      = "curl -X POST https://${module.fixops_ingress.api_host}/api/v1/cicd/decision -H 'Content-Type: application/json' --data '{\"service_name\": \"your-service\", \"environment\": \"production\"}'"
            }
          }

    - id: trigger-terraform
      name: Deploy via Terraform
      action: roadiehq:utils:fs:write
      input:
        path: ./deploy.sh
        content: |
          #!/bin/bash
          # Backstage-generated deployment script
          
          set -e
          
          echo "🏦 Deploying FixOps via Terraform (triggered by Backstage)"
          echo "========================================================"
          echo "Deployment: ${{ parameters.name }}"
          echo "Environment: ${{ parameters.environment }}"  
          echo "Cluster: ${{ parameters.cluster }}"
          echo ""
          
          cd terraform/
          
          # Initialize Terraform
          echo "🔧 Initializing Terraform..."
          terraform init
          
          # Plan deployment
          echo "📋 Planning deployment..."
          terraform plan \\
            -var="emergent_llm_key=$EMERGENT_LLM_KEY" \\
            {% if parameters.enable_jira %}
            -var="jira_api_token=$JIRA_API_TOKEN" \\
            {% endif %}
            {% if parameters.enable_confluence %}
            -var="confluence_api_token=$CONFLUENCE_API_TOKEN" \\
            {% endif %}
            -var="mongodb_root_password=$MONGODB_PASSWORD" \\
            -var="redis_password=$REDIS_PASSWORD" \\
            -out=fixops.plan
          
          # Apply deployment
          echo "🚀 Applying deployment..."
          terraform apply fixops.plan
          
          echo "✅ FixOps deployed successfully!"
          echo ""
          echo "🌐 Access Information:"
          terraform output
          
          echo ""
          echo "🧪 Validation Commands:"
          echo "kubectl get pods -n $(terraform output -raw namespace)"
          echo "curl $(terraform output -raw fixops_api_url)/health"

    - id: register-service
      name: Register in Service Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/backstage/catalog-info.yaml'

  output:
    links:
      - title: FixOps Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Terraform Plan
        url: ${{ steps.publish.output.remoteUrl }}/blob/main/terraform/
      - title: Kubernetes Manifests  
        url: ${{ steps.publish.output.remoteUrl }}/blob/main/kubernetes/
      - title: Open in Backstage
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
{
  "application": "APP1_insurance",
  "description": "Authorization matrix defining role-based access control for insurance platform",
  "roles": [
    {
      "role": "customer",
      "description": "Regular insurance customer",
      "jwt_claims": {
        "sub": "cust_1234567890",
        "role": "customer",
        "email": "john.doe@example.com",
        "customer_id": "cust_1234567890"
      },
      "permissions": [
        "quotes:create:own",
        "quotes:read:own",
        "policies:read:own",
        "claims:create:own",
        "claims:read:own",
        "medical_records:read:own",
        "payments:create:own"
      ]
    },
    {
      "role": "agent",
      "description": "Insurance agent assisting customers",
      "jwt_claims": {
        "sub": "agent_9876543210",
        "role": "agent",
        "email": "agent@insurance.example.com",
        "agent_id": "agent_9876543210"
      },
      "permissions": [
        "quotes:create:any",
        "quotes:read:any",
        "quotes:update:any",
        "policies:create:any",
        "policies:read:any",
        "claims:read:any",
        "customers:read:any"
      ]
    },
    {
      "role": "underwriter",
      "description": "Underwriter reviewing and approving policies",
      "jwt_claims": {
        "sub": "underwriter_5555555555",
        "role": "underwriter",
        "email": "underwriter@insurance.example.com",
        "underwriter_id": "underwriter_5555555555"
      },
      "permissions": [
        "quotes:read:any",
        "quotes:approve:any",
        "quotes:reject:any",
        "policies:read:any",
        "policies:update:any",
        "medical_records:read:any",
        "risk_assessment:create:any"
      ]
    },
    {
      "role": "claims_adjuster",
      "description": "Claims adjuster processing insurance claims",
      "jwt_claims": {
        "sub": "adjuster_7777777777",
        "role": "claims_adjuster",
        "email": "adjuster@insurance.example.com",
        "adjuster_id": "adjuster_7777777777"
      },
      "permissions": [
        "claims:read:any",
        "claims:update:any",
        "claims:approve:any",
        "claims:deny:any",
        "policies:read:any",
        "medical_records:read:any",
        "payments:create:any"
      ]
    },
    {
      "role": "admin",
      "description": "System administrator with full access",
      "jwt_claims": {
        "sub": "admin_0000000000",
        "role": "admin",
        "email": "admin@insurance.example.com",
        "admin_id": "admin_0000000000"
      },
      "permissions": [
        "*:*:*"
      ]
    }
  ],
  "endpoints": [
    {
      "method": "POST",
      "path": "/v1/quotes",
      "description": "Create insurance quote",
      "required_permission": "quotes:create:own",
      "test_cases": [
        {
          "role": "customer",
          "expected_status": 200,
          "description": "Customer can create quote for themselves"
        },
        {
          "role": "agent",
          "expected_status": 200,
          "description": "Agent can create quote for any customer"
        },
        {
          "role": "underwriter",
          "expected_status": 403,
          "description": "Underwriter cannot create quotes"
        },
        {
          "role": "anonymous",
          "expected_status": 401,
          "description": "Anonymous user cannot create quotes"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/v1/quotes/{quote_id}",
      "description": "Get quote details",
      "required_permission": "quotes:read:own",
      "test_cases": [
        {
          "role": "customer",
          "quote_id": "quote_owned_by_customer",
          "expected_status": 200,
          "description": "Customer can read their own quote"
        },
        {
          "role": "customer",
          "quote_id": "quote_owned_by_other",
          "expected_status": 403,
          "description": "Customer cannot read other customer's quote (IDOR test)"
        },
        {
          "role": "agent",
          "quote_id": "quote_owned_by_other",
          "expected_status": 200,
          "description": "Agent can read any quote"
        },
        {
          "role": "underwriter",
          "quote_id": "quote_owned_by_other",
          "expected_status": 200,
          "description": "Underwriter can read any quote"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/v1/policies/{policy_id}",
      "description": "Get policy details",
      "required_permission": "policies:read:own",
      "test_cases": [
        {
          "role": "customer",
          "policy_id": "pol_owned_by_customer",
          "expected_status": 200,
          "description": "Customer can read their own policy"
        },
        {
          "role": "customer",
          "policy_id": "pol_owned_by_other",
          "expected_status": 403,
          "description": "Customer cannot read other customer's policy (IDOR test)"
        },
        {
          "role": "agent",
          "policy_id": "pol_owned_by_other",
          "expected_status": 200,
          "description": "Agent can read any policy"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/v1/customers/{customer_id}/medical-records",
      "description": "Get customer medical records (PHI)",
      "required_permission": "medical_records:read:own",
      "hipaa_audit_required": true,
      "test_cases": [
        {
          "role": "customer",
          "customer_id": "cust_1234567890",
          "expected_status": 200,
          "description": "Customer can read their own medical records"
        },
        {
          "role": "customer",
          "customer_id": "cust_0987654321",
          "expected_status": 403,
          "description": "Customer cannot read other customer's medical records (HIPAA violation test)"
        },
        {
          "role": "underwriter",
          "customer_id": "cust_0987654321",
          "expected_status": 200,
          "description": "Underwriter can read medical records for underwriting"
        },
        {
          "role": "claims_adjuster",
          "customer_id": "cust_0987654321",
          "expected_status": 200,
          "description": "Claims adjuster can read medical records for claims processing"
        },
        {
          "role": "agent",
          "customer_id": "cust_0987654321",
          "expected_status": 403,
          "description": "Agent cannot read medical records (HIPAA minimum necessary)"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/v1/claims",
      "description": "Submit insurance claim",
      "required_permission": "claims:create:own",
      "test_cases": [
        {
          "role": "customer",
          "expected_status": 201,
          "description": "Customer can submit claim for their policy"
        },
        {
          "role": "agent",
          "expected_status": 403,
          "description": "Agent cannot submit claims on behalf of customers"
        }
      ]
    },
    {
      "method": "PUT",
      "path": "/v1/claims/{claim_id}/approve",
      "description": "Approve insurance claim",
      "required_permission": "claims:approve:any",
      "test_cases": [
        {
          "role": "customer",
          "expected_status": 403,
          "description": "Customer cannot approve their own claim"
        },
        {
          "role": "claims_adjuster",
          "expected_status": 200,
          "description": "Claims adjuster can approve claims"
        },
        {
          "role": "admin",
          "expected_status": 200,
          "description": "Admin can approve claims"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/v1/billing/payments",
      "description": "Process premium payment",
      "required_permission": "payments:create:own",
      "test_cases": [
        {
          "role": "customer",
          "expected_status": 200,
          "description": "Customer can make payment for their policy"
        },
        {
          "role": "claims_adjuster",
          "expected_status": 200,
          "description": "Claims adjuster can process claim payments"
        }
      ]
    }
  ],
  "jwt_examples": {
    "customer": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjdXN0XzEyMzQ1Njc4OTAiLCJyb2xlIjoiY3VzdG9tZXIiLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIiwiY3VzdG9tZXJfaWQiOiJjdXN0XzEyMzQ1Njc4OTAiLCJpYXQiOjE2OTg1MDAwMDAsImV4cCI6MTY5ODUwMzYwMH0.signature",
    "agent": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZ2VudF85ODc2NTQzMjEwIiwicm9sZSI6ImFnZW50IiwiZW1haWwiOiJhZ2VudEBpbnN1cmFuY2UuZXhhbXBsZS5jb20iLCJhZ2VudF9pZCI6ImFnZW50Xzk4NzY1NDMyMTAiLCJpYXQiOjE2OTg1MDAwMDAsImV4cCI6MTY5ODUwMzYwMH0.signature",
    "underwriter": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1bmRlcndyaXRlcl81NTU1NTU1NTU1Iiwicm9sZSI6InVuZGVyd3JpdGVyIiwiZW1haWwiOiJ1bmRlcndyaXRlckBpbnN1cmFuY2UuZXhhbXBsZS5jb20iLCJ1bmRlcndyaXRlcl9pZCI6InVuZGVyd3JpdGVyXzU1NTU1NTU1NTUiLCJpYXQiOjE2OTg1MDAwMDAsImV4cCI6MTY5ODUwMzYwMH0.signature",
    "claims_adjuster": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZGp1c3Rlcl83Nzc3Nzc3Nzc3Iiwicm9sZSI6ImNsYWltc19hZGp1c3RlciIsImVtYWlsIjoiYWRqdXN0ZXJAaW5zdXJhbmNlLmV4YW1wbGUuY29tIiwiYWRqdXN0ZXJfaWQiOiJhZGp1c3Rlcl83Nzc3Nzc3Nzc3IiwiaWF0IjoxNjk4NTAwMDAwLCJleHAiOjE2OTg1MDM2MDB9.signature",
    "admin": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbl8wMDAwMDAwMDAwIiwicm9sZSI6ImFkbWluIiwiZW1haWwiOiJhZG1pbkBpbnN1cmFuY2UuZXhhbXBsZS5jb20iLCJhZG1pbl9pZCI6ImFkbWluXzAwMDAwMDAwMDAiLCJpYXQiOjE2OTg1MDAwMDAsImV4cCI6MTY5ODUwMzYwMH0.signature"
  },
  "negative_tests": [
    {
      "name": "Expired JWT token",
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjdXN0XzEyMzQ1Njc4OTAiLCJyb2xlIjoiY3VzdG9tZXIiLCJleHAiOjE2MDAwMDAwMDB9.signature",
      "expected_status": 401,
      "expected_error": "token_expired"
    },
    {
      "name": "Invalid signature",
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjdXN0XzEyMzQ1Njc4OTAiLCJyb2xlIjoiY3VzdG9tZXIifQ.invalid_signature",
      "expected_status": 401,
      "expected_error": "invalid_token"
    },
    {
      "name": "Missing role claim",
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjdXN0XzEyMzQ1Njc4OTAiLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIn0.signature",
      "expected_status": 403,
      "expected_error": "missing_role"
    },
    {
      "name": "Privilege escalation attempt",
      "description": "Customer tries to modify JWT role to admin",
      "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjdXN0XzEyMzQ1Njc4OTAiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIn0.forged_signature",
      "expected_status": 401,
      "expected_error": "invalid_token"
    }
  ],
  "compliance_notes": {
    "HIPAA": "All access to medical_records endpoints must be logged with timestamp, user_id, and purpose. Logs must be retained for 6 years.",
    "SOC2": "Authorization failures must be logged and monitored. Excessive failures should trigger account lockout.",
    "GDPR": "Customers have right to access their own data. Data access by agents/underwriters must be justified and logged."
  }
}

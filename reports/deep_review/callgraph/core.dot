digraph callgraph {
  "core/feature_matrix.py:_as_mapping" -> "dict";
  "core/feature_matrix.py:_as_mapping" -> "isinstance";
  "core/feature_matrix.py:_as_sequence" -> "isinstance";
  "core/feature_matrix.py:_as_sequence" -> "list";
  "core/feature_matrix.py:_to_int" -> "int";
  "core/feature_matrix.py:_to_float" -> "float";
  "core/feature_matrix.py:_guardrail_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_guardrail_metrics" -> "get";
  "core/feature_matrix.py:_context_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_context_metrics" -> "_to_float";
  "core/feature_matrix.py:_context_metrics" -> "_to_int";
  "core/feature_matrix.py:_context_metrics" -> "get";
  "core/feature_matrix.py:_onboarding_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_onboarding_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_onboarding_metrics" -> "_to_float";
  "core/feature_matrix.py:_onboarding_metrics" -> "get";
  "core/feature_matrix.py:_onboarding_metrics" -> "len";
  "core/feature_matrix.py:_compliance_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_compliance_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_compliance_metrics" -> "get";
  "core/feature_matrix.py:_compliance_metrics" -> "len";
  "core/feature_matrix.py:_compliance_metrics" -> "sum";
  "core/feature_matrix.py:_policy_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_policy_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_policy_metrics" -> "get";
  "core/feature_matrix.py:_policy_metrics" -> "len";
  "core/feature_matrix.py:_evidence_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_evidence_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_evidence_metrics" -> "bool";
  "core/feature_matrix.py:_evidence_metrics" -> "get";
  "core/feature_matrix.py:_evidence_metrics" -> "len";
  "core/feature_matrix.py:_analytics_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_analytics_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_analytics_metrics" -> "_to_float";
  "core/feature_matrix.py:_analytics_metrics" -> "get";
  "core/feature_matrix.py:_analytics_metrics" -> "len";
  "core/feature_matrix.py:_ai_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_ai_metrics" -> "_to_int";
  "core/feature_matrix.py:_ai_metrics" -> "get";
  "core/feature_matrix.py:_ai_metrics" -> "isinstance";
  "core/feature_matrix.py:_ai_metrics" -> "list";
  "core/feature_matrix.py:_exploit_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_exploit_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_exploit_metrics" -> "_to_int";
  "core/feature_matrix.py:_exploit_metrics" -> "get";
  "core/feature_matrix.py:_exploit_metrics" -> "len";
  "core/feature_matrix.py:_probabilistic_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_probabilistic_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_probabilistic_metrics" -> "_to_float";
  "core/feature_matrix.py:_probabilistic_metrics" -> "get";
  "core/feature_matrix.py:_probabilistic_metrics" -> "len";
  "core/feature_matrix.py:_ssdlc_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_ssdlc_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_ssdlc_metrics" -> "_to_int";
  "core/feature_matrix.py:_ssdlc_metrics" -> "get";
  "core/feature_matrix.py:_ssdlc_metrics" -> "len";
  "core/feature_matrix.py:_iac_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_iac_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_iac_metrics" -> "get";
  "core/feature_matrix.py:_iac_metrics" -> "len";
  "core/feature_matrix.py:_tenancy_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_tenancy_metrics" -> "_to_int";
  "core/feature_matrix.py:_tenancy_metrics" -> "get";
  "core/feature_matrix.py:_performance_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_performance_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_performance_metrics" -> "_to_float";
  "core/feature_matrix.py:_performance_metrics" -> "get";
  "core/feature_matrix.py:_performance_metrics" -> "len";
  "core/feature_matrix.py:_pricing_metrics" -> "_as_mapping";
  "core/feature_matrix.py:_pricing_metrics" -> "_as_sequence";
  "core/feature_matrix.py:_pricing_metrics" -> "get";
  "core/feature_matrix.py:_pricing_metrics" -> "len";
  "core/feature_matrix.py:build_feature_matrix" -> "_as_mapping";
  "core/feature_matrix.py:build_feature_matrix" -> "_as_sequence";
  "core/feature_matrix.py:build_feature_matrix" -> "get";
  "core/feature_matrix.py:build_feature_matrix" -> "items";
  "core/feature_matrix.py:build_feature_matrix" -> "len";
  "core/feature_matrix.py:build_feature_matrix" -> "metrics_builder";
  "core/feature_matrix.py:build_feature_matrix" -> "sorted";
  "core/feature_matrix.py:build_feature_matrix" -> "str";
  "core/compliance.py:ComplianceEvaluator.__init__" -> "dict";
  "core/compliance.py:ComplianceEvaluator.__init__" -> "get";
  "core/compliance.py:ComplianceEvaluator.__init__" -> "isinstance";
  "core/compliance.py:ComplianceEvaluator._check_requirement" -> "bool";
  "core/compliance.py:ComplianceEvaluator._check_requirement" -> "get";
  "core/compliance.py:ComplianceEvaluator._check_requirement" -> "int";
  "core/compliance.py:ComplianceEvaluator._check_requirement" -> "isinstance";
  "core/compliance.py:ComplianceEvaluator._check_requirement" -> "str";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "_check_requirement";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "all";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "append";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "get";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "isinstance";
  "core/compliance.py:ComplianceEvaluator.evaluate" -> "join";
  "core/configuration.py:_read_text_cached" -> "Path";
  "core/configuration.py:_read_text_cached" -> "lru_cache";
  "core/configuration.py:_read_text_cached" -> "read_text";
  "core/configuration.py:_read_text" -> "_read_text_cached";
  "core/configuration.py:_read_text" -> "str";
  "core/configuration.py:_parse_overlay" -> "TypeError";
  "core/configuration.py:_parse_overlay" -> "ValueError";
  "core/configuration.py:_parse_overlay" -> "dict";
  "core/configuration.py:_parse_overlay" -> "isinstance";
  "core/configuration.py:_parse_overlay" -> "loads";
  "core/configuration.py:_parse_overlay" -> "safe_load";
  "core/configuration.py:_parse_overlay" -> "strip";
  "core/configuration.py:_deep_merge" -> "_deep_merge";
  "core/configuration.py:_deep_merge" -> "isinstance";
  "core/configuration.py:_deep_merge" -> "items";
  "core/configuration.py:_require_mapping" -> "ValueError";
  "core/configuration.py:_require_mapping" -> "isinstance";
  "core/configuration.py:_require_string" -> "ValueError";
  "core/configuration.py:_require_string" -> "isinstance";
  "core/configuration.py:_require_string" -> "strip";
  "core/configuration.py:_optional_string" -> "ValueError";
  "core/configuration.py:_optional_string" -> "isinstance";
  "core/configuration.py:_optional_string" -> "strip";
  "core/configuration.py:_string_list" -> "ValueError";
  "core/configuration.py:_string_list" -> "append";
  "core/configuration.py:_string_list" -> "enumerate";
  "core/configuration.py:_string_list" -> "isinstance";
  "core/configuration.py:_string_list" -> "strip";
  "core/configuration.py:_validate_signing_config" -> "ValueError";
  "core/configuration.py:_validate_signing_config" -> "_require_mapping";
  "core/configuration.py:_validate_signing_config" -> "_require_string";
  "core/configuration.py:_validate_signing_config" -> "get";
  "core/configuration.py:_validate_signing_config" -> "isinstance";
  "core/configuration.py:_validate_signing_config" -> "lower";
  "core/configuration.py:_validate_signing_config" -> "set";
  "core/configuration.py:_validate_signing_config" -> "sorted";
  "core/configuration.py:_validate_compliance_frameworks" -> "ValueError";
  "core/configuration.py:_validate_compliance_frameworks" -> "_optional_string";
  "core/configuration.py:_validate_compliance_frameworks" -> "_require_mapping";
  "core/configuration.py:_validate_compliance_frameworks" -> "_require_string";
  "core/configuration.py:_validate_compliance_frameworks" -> "_validate_compliance_controls";
  "core/configuration.py:_validate_compliance_frameworks" -> "append";
  "core/configuration.py:_validate_compliance_frameworks" -> "dict";
  "core/configuration.py:_validate_compliance_frameworks" -> "enumerate";
  "core/configuration.py:_validate_compliance_frameworks" -> "get";
  "core/configuration.py:_validate_compliance_frameworks" -> "isinstance";
  "core/configuration.py:_validate_compliance_frameworks" -> "set";
  "core/configuration.py:_validate_compliance_frameworks" -> "sorted";
  "core/configuration.py:_validate_compliance_controls" -> "ValueError";
  "core/configuration.py:_validate_compliance_controls" -> "_optional_string";
  "core/configuration.py:_validate_compliance_controls" -> "_require_mapping";
  "core/configuration.py:_validate_compliance_controls" -> "_require_string";
  "core/configuration.py:_validate_compliance_controls" -> "_string_list";
  "core/configuration.py:_validate_compliance_controls" -> "append";
  "core/configuration.py:_validate_compliance_controls" -> "dict";
  "core/configuration.py:_validate_compliance_controls" -> "enumerate";
  "core/configuration.py:_validate_compliance_controls" -> "get";
  "core/configuration.py:_validate_compliance_controls" -> "isinstance";
  "core/configuration.py:_validate_compliance_controls" -> "set";
  "core/configuration.py:_validate_compliance_controls" -> "sorted";
  "core/configuration.py:_validate_compliance_config" -> "ValueError";
  "core/configuration.py:_validate_compliance_config" -> "_require_mapping";
  "core/configuration.py:_validate_compliance_config" -> "_require_string";
  "core/configuration.py:_validate_compliance_config" -> "_validate_compliance_frameworks";
  "core/configuration.py:_validate_compliance_config" -> "format";
  "core/configuration.py:_validate_compliance_config" -> "get";
  "core/configuration.py:_validate_compliance_config" -> "items";
  "core/configuration.py:_validate_compliance_config" -> "set";
  "core/configuration.py:_validate_compliance_config" -> "sorted";
  "core/configuration.py:_validate_policy_actions" -> "ValueError";
  "core/configuration.py:_validate_policy_actions" -> "_require_mapping";
  "core/configuration.py:_validate_policy_actions" -> "_require_string";
  "core/configuration.py:_validate_policy_actions" -> "append";
  "core/configuration.py:_validate_policy_actions" -> "dict";
  "core/configuration.py:_validate_policy_actions" -> "enumerate";
  "core/configuration.py:_validate_policy_actions" -> "get";
  "core/configuration.py:_validate_policy_actions" -> "int";
  "core/configuration.py:_validate_policy_actions" -> "isinstance";
  "core/configuration.py:_validate_policy_actions" -> "lower";
  "core/configuration.py:_validate_policy_actions" -> "set";
  "core/configuration.py:_validate_policy_actions" -> "sorted";
  "core/configuration.py:_validate_policy_actions" -> "str";
  "core/configuration.py:_validate_policy_config" -> "ValueError";
  "core/configuration.py:_validate_policy_config" -> "_require_mapping";
  "core/configuration.py:_validate_policy_config" -> "_require_string";
  "core/configuration.py:_validate_policy_config" -> "_validate_policy_actions";
  "core/configuration.py:_validate_policy_config" -> "format";
  "core/configuration.py:_validate_policy_config" -> "get";
  "core/configuration.py:_validate_policy_config" -> "int";
  "core/configuration.py:_validate_policy_config" -> "isdigit";
  "core/configuration.py:_validate_policy_config" -> "isinstance";
  "core/configuration.py:_validate_policy_config" -> "items";
  "core/configuration.py:_validate_policy_config" -> "set";
  "core/configuration.py:_validate_policy_config" -> "sorted";
  "core/configuration.py:_validate_policy_config" -> "strip";
  "core/configuration.py:_validate_policy_engine_config" -> "ValueError";
  "core/configuration.py:_validate_policy_engine_config" -> "_require_mapping";
  "core/configuration.py:_validate_policy_engine_config" -> "_require_string";
  "core/configuration.py:_validate_policy_engine_config" -> "bool";
  "core/configuration.py:_validate_policy_engine_config" -> "format";
  "core/configuration.py:_validate_policy_engine_config" -> "get";
  "core/configuration.py:_validate_policy_engine_config" -> "isinstance";
  "core/configuration.py:_validate_policy_engine_config" -> "set";
  "core/configuration.py:_validate_policy_engine_config" -> "setdefault";
  "core/configuration.py:_validate_policy_engine_config" -> "sorted";
  "core/configuration.py:_resolve_allowlisted_roots" -> "Path";
  "core/configuration.py:_resolve_allowlisted_roots" -> "append";
  "core/configuration.py:_resolve_allowlisted_roots" -> "expanduser";
  "core/configuration.py:_resolve_allowlisted_roots" -> "getenv";
  "core/configuration.py:_resolve_allowlisted_roots" -> "resolve";
  "core/configuration.py:_resolve_allowlisted_roots" -> "split";
  "core/configuration.py:_resolve_allowlisted_roots" -> "str";
  "core/configuration.py:_resolve_allowlisted_roots" -> "strip";
  "core/configuration.py:_resolve_allowlisted_roots" -> "tuple";
  "core/configuration.py:_ensure_within_allowlist" -> "ValueError";
  "core/configuration.py:_ensure_within_allowlist" -> "relative_to";
  "core/configuration.py:_ensure_within_allowlist" -> "resolve";
  "core/configuration.py:load_overlay" -> "OverlayConfig";
  "core/configuration.py:load_overlay" -> "Path";
  "core/configuration.py:load_overlay" -> "RuntimeError";
  "core/configuration.py:load_overlay" -> "ValueError";
  "core/configuration.py:load_overlay" -> "_OverlayDocument";
  "core/configuration.py:load_overlay" -> "_deep_merge";
  "core/configuration.py:load_overlay" -> "_parse_overlay";
  "core/configuration.py:load_overlay" -> "_read_text";
  "core/configuration.py:load_overlay" -> "_resolve_allowlisted_roots";
  "core/configuration.py:load_overlay" -> "_validate_compliance_config";
  "core/configuration.py:load_overlay" -> "_validate_policy_config";
  "core/configuration.py:load_overlay" -> "_validate_policy_engine_config";
  "core/configuration.py:load_overlay" -> "_validate_signing_config";
  "core/configuration.py:load_overlay" -> "append";
  "core/configuration.py:load_overlay" -> "dict";
  "core/configuration.py:load_overlay" -> "extend";
  "core/configuration.py:load_overlay" -> "fromkeys";
  "core/configuration.py:load_overlay" -> "get";
  "core/configuration.py:load_overlay" -> "getenv";
  "core/configuration.py:load_overlay" -> "isinstance";
  "core/configuration.py:load_overlay" -> "items";
  "core/configuration.py:load_overlay" -> "keys";
  "core/configuration.py:load_overlay" -> "lower";
  "core/configuration.py:load_overlay" -> "setdefault";
  "core/configuration.py:load_overlay" -> "sorted";
  "core/configuration.py:load_overlay" -> "str";
  "core/configuration.py:load_overlay" -> "strip";
  "core/configuration.py:load_overlay" -> "token_urlsafe";
  "core/configuration.py:load_overlay" -> "tuple";
  "core/configuration.py:load_overlay" -> "warning";
  "core/configuration.py:OverlayConfig.required_inputs" -> "get";
  "core/configuration.py:OverlayConfig.data_directories" -> "Path";
  "core/configuration.py:OverlayConfig.data_directories" -> "_ensure_within_allowlist";
  "core/configuration.py:OverlayConfig.data_directories" -> "expanduser";
  "core/configuration.py:OverlayConfig.data_directories" -> "is_absolute";
  "core/configuration.py:OverlayConfig.data_directories" -> "isinstance";
  "core/configuration.py:OverlayConfig.data_directories" -> "items";
  "core/configuration.py:OverlayConfig.data_directories" -> "resolve";
  "core/configuration.py:OverlayConfig.to_sanitised_dict" -> "_mask";
  "core/configuration.py:OverlayConfig.signing_settings" -> "dict";
  "core/configuration.py:OverlayConfig.signing_settings" -> "get";
  "core/configuration.py:OverlayConfig.signing_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.signing_settings" -> "lower";
  "core/configuration.py:OverlayConfig.signing_settings" -> "str";
  "core/configuration.py:OverlayConfig.signing_settings" -> "strip";
  "core/configuration.py:OverlayConfig._mask" -> "any";
  "core/configuration.py:OverlayConfig._mask" -> "items";
  "core/configuration.py:OverlayConfig._mask" -> "lower";
  "core/configuration.py:OverlayConfig.guardrail_maturity" -> "get";
  "core/configuration.py:OverlayConfig.guardrail_maturity" -> "lower";
  "core/configuration.py:OverlayConfig.guardrail_maturity" -> "str";
  "core/configuration.py:OverlayConfig.guardrail_maturity" -> "strip";
  "core/configuration.py:OverlayConfig.guardrail_policy" -> "get";
  "core/configuration.py:OverlayConfig.guardrail_policy" -> "isinstance";
  "core/configuration.py:OverlayConfig.guardrail_policy" -> "lower";
  "core/configuration.py:OverlayConfig.guardrail_policy" -> "str";
  "core/configuration.py:OverlayConfig.guardrail_policy" -> "strip";
  "core/configuration.py:OverlayConfig.context_engine_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.context_engine_settings" -> "dict";
  "core/configuration.py:OverlayConfig.context_engine_settings" -> "get";
  "core/configuration.py:OverlayConfig.context_engine_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.context_engine_settings" -> "pop";
  "core/configuration.py:OverlayConfig.evidence_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.evidence_settings" -> "dict";
  "core/configuration.py:OverlayConfig.evidence_settings" -> "get";
  "core/configuration.py:OverlayConfig.evidence_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.evidence_settings" -> "pop";
  "core/configuration.py:OverlayConfig.onboarding_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.onboarding_settings" -> "dict";
  "core/configuration.py:OverlayConfig.onboarding_settings" -> "get";
  "core/configuration.py:OverlayConfig.onboarding_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.onboarding_settings" -> "pop";
  "core/configuration.py:OverlayConfig.compliance_settings" -> "dict";
  "core/configuration.py:OverlayConfig.compliance_settings" -> "extend";
  "core/configuration.py:OverlayConfig.compliance_settings" -> "get";
  "core/configuration.py:OverlayConfig.compliance_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.compliance_settings" -> "pop";
  "core/configuration.py:OverlayConfig.policy_settings" -> "dict";
  "core/configuration.py:OverlayConfig.policy_settings" -> "extend";
  "core/configuration.py:OverlayConfig.policy_settings" -> "get";
  "core/configuration.py:OverlayConfig.policy_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.policy_settings" -> "list";
  "core/configuration.py:OverlayConfig.policy_settings" -> "pop";
  "core/configuration.py:OverlayConfig.policy_engine_settings" -> "bool";
  "core/configuration.py:OverlayConfig.policy_engine_settings" -> "get";
  "core/configuration.py:OverlayConfig.policy_engine_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.policy_engine_settings" -> "setdefault";
  "core/configuration.py:OverlayConfig.policy_engine_settings" -> "strip";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "append";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "dict";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "get";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "items";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "str";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "strip";
  "core/configuration.py:OverlayConfig.ssdlc_settings" -> "update";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "dict";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "get";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "items";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "str";
  "core/configuration.py:OverlayConfig.exploit_settings" -> "update";
  "core/configuration.py:OverlayConfig.probabilistic_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.probabilistic_settings" -> "dict";
  "core/configuration.py:OverlayConfig.probabilistic_settings" -> "get";
  "core/configuration.py:OverlayConfig.probabilistic_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.probabilistic_settings" -> "pop";
  "core/configuration.py:OverlayConfig.iac_settings" -> "append";
  "core/configuration.py:OverlayConfig.iac_settings" -> "dict";
  "core/configuration.py:OverlayConfig.iac_settings" -> "get";
  "core/configuration.py:OverlayConfig.iac_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.iac_settings" -> "items";
  "core/configuration.py:OverlayConfig.analytics_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.analytics_settings" -> "dict";
  "core/configuration.py:OverlayConfig.analytics_settings" -> "get";
  "core/configuration.py:OverlayConfig.analytics_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.analytics_settings" -> "pop";
  "core/configuration.py:OverlayConfig.performance_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.performance_settings" -> "dict";
  "core/configuration.py:OverlayConfig.performance_settings" -> "get";
  "core/configuration.py:OverlayConfig.performance_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.performance_settings" -> "pop";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "_deep_merge";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "_extend";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "append";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "dict";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "get";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "isinstance";
  "core/configuration.py:OverlayConfig.tenancy_settings" -> "pop";
  "core/configuration.py:OverlayConfig.module_config" -> "dict";
  "core/configuration.py:OverlayConfig.module_config" -> "get";
  "core/configuration.py:OverlayConfig.module_config" -> "isinstance";
  "core/configuration.py:OverlayConfig.module_config" -> "pop";
  "core/configuration.py:OverlayConfig.is_module_enabled" -> "bool";
  "core/configuration.py:OverlayConfig.is_module_enabled" -> "get";
  "core/configuration.py:OverlayConfig.is_module_enabled" -> "isinstance";
  "core/configuration.py:OverlayConfig.custom_module_specs" -> "append";
  "core/configuration.py:OverlayConfig.custom_module_specs" -> "dict";
  "core/configuration.py:OverlayConfig.custom_module_specs" -> "get";
  "core/configuration.py:OverlayConfig.custom_module_specs" -> "isinstance";
  "core/configuration.py:OverlayConfig.module_matrix" -> "isinstance";
  "core/configuration.py:OverlayConfig.module_matrix" -> "items";
  "core/configuration.py:OverlayConfig.enabled_modules" -> "append";
  "core/configuration.py:OverlayConfig.enabled_modules" -> "get";
  "core/configuration.py:OverlayConfig.enabled_modules" -> "is_module_enabled";
  "core/configuration.py:OverlayConfig.pricing_summary" -> "dict";
  "core/configuration.py:OverlayConfig.pricing_summary" -> "get";
  "core/configuration.py:OverlayConfig.pricing_summary" -> "isinstance";
  "core/configuration.py:OverlayConfig.evidence_limits" -> "dict";
  "core/configuration.py:OverlayConfig.evidence_limits" -> "get";
  "core/configuration.py:OverlayConfig.evidence_limits" -> "isinstance";
  "core/configuration.py:OverlayConfig.upload_limit" -> "get";
  "core/configuration.py:OverlayConfig.upload_limit" -> "int";
  "core/configuration.py:OverlayConfig.upload_limit" -> "isdigit";
  "core/configuration.py:OverlayConfig.upload_limit" -> "isinstance";
  "core/cli.py:_apply_env_overrides" -> "ValueError";
  "core/cli.py:_apply_env_overrides" -> "split";
  "core/cli.py:_apply_env_overrides" -> "strip";
  "core/cli.py:_load_design" -> "DictReader";
  "core/cli.py:_load_design" -> "ValueError";
  "core/cli.py:_load_design" -> "any";
  "core/cli.py:_load_design" -> "open";
  "core/cli.py:_load_design" -> "strip";
  "core/cli.py:_load_design" -> "values";
  "core/cli.py:_load_file" -> "read_bytes";
  "core/cli.py:_load_inputs" -> "_load_design";
  "core/cli.py:_load_inputs" -> "_load_file";
  "core/cli.py:_load_inputs" -> "load_cve_feed";
  "core/cli.py:_load_inputs" -> "load_sarif";
  "core/cli.py:_load_inputs" -> "load_sbom";
  "core/cli.py:_load_incident_history" -> "ValueError";
  "core/cli.py:_load_incident_history" -> "get";
  "core/cli.py:_load_incident_history" -> "isinstance";
  "core/cli.py:_load_incident_history" -> "loads";
  "core/cli.py:_load_incident_history" -> "read_text";
  "core/cli.py:_ensure_inputs" -> "ValueError";
  "core/cli.py:_ensure_inputs" -> "append";
  "core/cli.py:_ensure_inputs" -> "get";
  "core/cli.py:_ensure_inputs" -> "join";
  "core/cli.py:_ensure_inputs" -> "set";
  "core/cli.py:_ensure_inputs" -> "sorted";
  "core/cli.py:_set_module_enabled" -> "get";
  "core/cli.py:_set_module_enabled" -> "isinstance";
  "core/cli.py:_copy_evidence" -> "Path";
  "core/cli.py:_copy_evidence" -> "ensure_secure_directory";
  "core/cli.py:_copy_evidence" -> "get";
  "core/cli.py:_copy_evidence" -> "isinstance";
  "core/cli.py:_copy_evidence" -> "read_bytes";
  "core/cli.py:_copy_evidence" -> "write_bytes";
  "core/cli.py:_handle_stage_run" -> "FileNotFoundError";
  "core/cli.py:_handle_stage_run" -> "RunRegistry";
  "core/cli.py:_handle_stage_run" -> "StageRunner";
  "core/cli.py:_handle_stage_run" -> "cwd";
  "core/cli.py:_handle_stage_run" -> "exists";
  "core/cli.py:_handle_stage_run" -> "expanduser";
  "core/cli.py:_handle_stage_run" -> "get";
  "core/cli.py:_handle_stage_run" -> "join";
  "core/cli.py:_handle_stage_run" -> "print";
  "core/cli.py:_handle_stage_run" -> "relative_to";
  "core/cli.py:_handle_stage_run" -> "resolve";
  "core/cli.py:_handle_stage_run" -> "run_stage";
  "core/cli.py:_print_summary" -> "get";
  "core/cli.py:_print_summary" -> "isinstance";
  "core/cli.py:_print_summary" -> "join";
  "core/cli.py:_print_summary" -> "print";
  "core/cli.py:_print_summary" -> "sorted";
  "core/cli.py:_handle_run" -> "ArtefactArchive";
  "core/cli.py:_handle_run" -> "InputNormalizer";
  "core/cli.py:_handle_run" -> "Path";
  "core/cli.py:_handle_run" -> "PipelineOrchestrator";
  "core/cli.py:_handle_run" -> "_apply_env_overrides";
  "core/cli.py:_handle_run" -> "_copy_evidence";
  "core/cli.py:_handle_run" -> "_ensure_inputs";
  "core/cli.py:_handle_run" -> "_load_inputs";
  "core/cli.py:_handle_run" -> "_print_summary";
  "core/cli.py:_handle_run" -> "_set_module_enabled";
  "core/cli.py:_handle_run" -> "dump";
  "core/cli.py:_handle_run" -> "ensure_secure_directory";
  "core/cli.py:_handle_run" -> "get";
  "core/cli.py:_handle_run" -> "getattr";
  "core/cli.py:_handle_run" -> "isinstance";
  "core/cli.py:_handle_run" -> "load_overlay";
  "core/cli.py:_handle_run" -> "open";
  "core/cli.py:_handle_run" -> "persist";
  "core/cli.py:_handle_run" -> "print";
  "core/cli.py:_handle_run" -> "read_bytes";
  "core/cli.py:_handle_run" -> "resolve";
  "core/cli.py:_handle_run" -> "run";
  "core/cli.py:_handle_run" -> "str";
  "core/cli.py:_handle_run" -> "summarise";
  "core/cli.py:_handle_run" -> "to_sanitised_dict";
  "core/cli.py:_handle_run" -> "values";
  "core/cli.py:_handle_run" -> "verify_allowlisted_path";
  "core/cli.py:_handle_run" -> "write";
  "core/cli.py:_handle_show_overlay" -> "_apply_env_overrides";
  "core/cli.py:_handle_show_overlay" -> "dumps";
  "core/cli.py:_handle_show_overlay" -> "load_overlay";
  "core/cli.py:_handle_show_overlay" -> "print";
  "core/cli.py:_handle_show_overlay" -> "to_sanitised_dict";
  "core/cli.py:_handle_train_forecast" -> "ProbabilisticForecastEngine";
  "core/cli.py:_handle_train_forecast" -> "ValueError";
  "core/cli.py:_handle_train_forecast" -> "_load_incident_history";
  "core/cli.py:_handle_train_forecast" -> "calibrate";
  "core/cli.py:_handle_train_forecast" -> "dump";
  "core/cli.py:_handle_train_forecast" -> "ensure_secure_directory";
  "core/cli.py:_handle_train_forecast" -> "get";
  "core/cli.py:_handle_train_forecast" -> "isinstance";
  "core/cli.py:_handle_train_forecast" -> "loads";
  "core/cli.py:_handle_train_forecast" -> "open";
  "core/cli.py:_handle_train_forecast" -> "print";
  "core/cli.py:_handle_train_forecast" -> "read_text";
  "core/cli.py:_handle_train_forecast" -> "to_dict";
  "core/cli.py:_handle_train_forecast" -> "write";
  "core/cli.py:_handle_demo" -> "FileNotFoundError";
  "core/cli.py:_handle_demo" -> "exists";
  "core/cli.py:_handle_demo" -> "print";
  "core/cli.py:_handle_demo" -> "run_demo_pipeline";
  "core/cli.py:build_parser" -> "ArgumentParser";
  "core/cli.py:build_parser" -> "add_argument";
  "core/cli.py:build_parser" -> "add_parser";
  "core/cli.py:build_parser" -> "add_subparsers";
  "core/cli.py:build_parser" -> "set_defaults";
  "core/cli.py:main" -> "build_parser";
  "core/cli.py:main" -> "func";
  "core/cli.py:main" -> "hasattr";
  "core/cli.py:main" -> "list";
  "core/cli.py:main" -> "parse_args";
  "core/cli.py:main" -> "print";
  "core/cli.py:main" -> "print_help";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "_ensure_enum_aliases";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "_extract_enum_types";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "_normalise_priority_weights";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "_resolve_decision_class";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "_resolve_type_hints";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "import_module";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "join";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "lower";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "signature";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "split";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "update";
  "core/design_context_injector.py:DesignContextInjector.__init__" -> "upper";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "Decision";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "PriorProbability";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "_build_decision_kwargs";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "_build_rationale";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "_build_vector";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "_iterate_rows";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "_probability_from_outcome";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "append";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "enumerate";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "evaluate";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "get";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "list";
  "core/design_context_injector.py:DesignContextInjector.calculate_priors" -> "strip";
  "core/design_context_injector.py:DesignContextInjector._iterate_rows" -> "DictReader";
  "core/design_context_injector.py:DesignContextInjector._iterate_rows" -> "Path";
  "core/design_context_injector.py:DesignContextInjector._iterate_rows" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._iterate_rows" -> "list";
  "core/design_context_injector.py:DesignContextInjector._iterate_rows" -> "open";
  "core/design_context_injector.py:DesignContextInjector._build_decision_kwargs" -> "ValueError";
  "core/design_context_injector.py:DesignContextInjector._build_decision_kwargs" -> "_coerce_parameter";
  "core/design_context_injector.py:DesignContextInjector._build_decision_kwargs" -> "get";
  "core/design_context_injector.py:DesignContextInjector._build_decision_kwargs" -> "str";
  "core/design_context_injector.py:DesignContextInjector._build_decision_kwargs" -> "strip";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "ValueError";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "get";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "isinstance";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "lower";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "str";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "strip";
  "core/design_context_injector.py:DesignContextInjector._coerce_parameter" -> "upper";
  "core/design_context_injector.py:DesignContextInjector._probability_from_outcome" -> "ValueError";
  "core/design_context_injector.py:DesignContextInjector._probability_from_outcome" -> "getattr";
  "core/design_context_injector.py:DesignContextInjector._probability_from_outcome" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._probability_from_outcome" -> "lower";
  "core/design_context_injector.py:DesignContextInjector._probability_from_outcome" -> "str";
  "core/design_context_injector.py:DesignContextInjector._build_rationale" -> "_format_enum";
  "core/design_context_injector.py:DesignContextInjector._build_rationale" -> "append";
  "core/design_context_injector.py:DesignContextInjector._build_rationale" -> "getattr";
  "core/design_context_injector.py:DesignContextInjector._format_enum" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._format_enum" -> "str";
  "core/design_context_injector.py:DesignContextInjector._resolve_decision_class" -> "ValueError";
  "core/design_context_injector.py:DesignContextInjector._resolve_decision_class" -> "dir";
  "core/design_context_injector.py:DesignContextInjector._resolve_decision_class" -> "getattr";
  "core/design_context_injector.py:DesignContextInjector._resolve_decision_class" -> "isclass";
  "core/design_context_injector.py:DesignContextInjector._resolve_decision_class" -> "startswith";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "_compose_vector";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "_vector_code";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "append";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "getattr";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "join";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "split";
  "core/design_context_injector.py:DesignContextInjector._build_vector" -> "to_vector";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "ValueError";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "_vector_code";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "append";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "isoformat";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "items";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "join";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "now";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "replace";
  "core/design_context_injector.py:DesignContextInjector._compose_vector" -> "upper";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "get";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "getattr";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "replace";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "split";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "str";
  "core/design_context_injector.py:DesignContextInjector._vector_code" -> "upper";
  "core/design_context_injector.py:DesignContextInjector._resolve_type_hints" -> "get_annotations";
  "core/design_context_injector.py:DesignContextInjector._extract_enum_types" -> "_extract_enum";
  "core/design_context_injector.py:DesignContextInjector._extract_enum_types" -> "items";
  "core/design_context_injector.py:DesignContextInjector._extract_enum" -> "get_args";
  "core/design_context_injector.py:DesignContextInjector._extract_enum" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._extract_enum" -> "isclass";
  "core/design_context_injector.py:DesignContextInjector._extract_enum" -> "issubclass";
  "core/design_context_injector.py:DesignContextInjector._normalise_priority_weights" -> "copy";
  "core/design_context_injector.py:DesignContextInjector._normalise_priority_weights" -> "float";
  "core/design_context_injector.py:DesignContextInjector._normalise_priority_weights" -> "items";
  "core/design_context_injector.py:DesignContextInjector._normalise_priority_weights" -> "lower";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "hasattr";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "isclass";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "issubclass";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "lower";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "setattr";
  "core/design_context_injector.py:DesignContextInjector._ensure_enum_aliases" -> "values";
  "core/feedback.py:FeedbackRecorder.__init__" -> "ConfluenceConnector";
  "core/feedback.py:FeedbackRecorder.__init__" -> "FeedbackOutcomeStore";
  "core/feedback.py:FeedbackRecorder.__init__" -> "JiraConnector";
  "core/feedback.py:FeedbackRecorder.__init__" -> "Path";
  "core/feedback.py:FeedbackRecorder.__init__" -> "ensure_secure_directory";
  "core/feedback.py:FeedbackRecorder.__init__" -> "get";
  "core/feedback.py:FeedbackRecorder.__init__" -> "resolve";
  "core/feedback.py:FeedbackRecorder.__init__" -> "update";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "ValueError";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "append";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "get";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "int";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "isinstance";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "match";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "strip";
  "core/feedback.py:FeedbackRecorder._validate_payload" -> "time";
  "core/feedback.py:FeedbackRecorder.record" -> "_forward_to_connectors";
  "core/feedback.py:FeedbackRecorder.record" -> "_validate_payload";
  "core/feedback.py:FeedbackRecorder.record" -> "dumps";
  "core/feedback.py:FeedbackRecorder.record" -> "ensure_secure_directory";
  "core/feedback.py:FeedbackRecorder.record" -> "exception";
  "core/feedback.py:FeedbackRecorder.record" -> "open";
  "core/feedback.py:FeedbackRecorder.record" -> "record";
  "core/feedback.py:FeedbackRecorder.record" -> "record_feedback_event";
  "core/feedback.py:FeedbackRecorder.record" -> "setdefault";
  "core/feedback.py:FeedbackRecorder.record" -> "str";
  "core/feedback.py:FeedbackRecorder.record" -> "write";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "_send_to_connector";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "dict";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "exception";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "get";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "isinstance";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "items";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "setdefault";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "str";
  "core/feedback.py:FeedbackRecorder._forward_to_connectors" -> "to_dict";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "create_issue";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "create_page";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "escape";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "format";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "get";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "hasattr";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "isinstance";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "join";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "list";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "str";
  "core/feedback.py:FeedbackRecorder._send_to_connector" -> "strip";
  "core/demo_runner.py:_ensure_env_defaults" -> "items";
  "core/demo_runner.py:_ensure_env_defaults" -> "setdefault";
  "core/demo_runner.py:_read_design" -> "DictReader";
  "core/demo_runner.py:_read_design" -> "any";
  "core/demo_runner.py:_read_design" -> "open";
  "core/demo_runner.py:_read_design" -> "strip";
  "core/demo_runner.py:_read_design" -> "values";
  "core/demo_runner.py:_fixture_path" -> "FileNotFoundError";
  "core/demo_runner.py:_fixture_path" -> "exists";
  "core/demo_runner.py:_bundle_path" -> "Path";
  "core/demo_runner.py:_bundle_path" -> "get";
  "core/demo_runner.py:_bundle_path" -> "isinstance";
  "core/demo_runner.py:_format_summary" -> "append";
  "core/demo_runner.py:_format_summary" -> "get";
  "core/demo_runner.py:_format_summary" -> "isinstance";
  "core/demo_runner.py:_format_summary" -> "join";
  "core/demo_runner.py:_format_summary" -> "set";
  "core/demo_runner.py:_format_summary" -> "sorted";
  "core/demo_runner.py:_format_summary" -> "str";
  "core/demo_runner.py:_format_summary" -> "title";
  "core/demo_runner.py:_prepare_overlay" -> "_ensure_env_defaults";
  "core/demo_runner.py:_prepare_overlay" -> "ensure_secure_directory";
  "core/demo_runner.py:_prepare_overlay" -> "get";
  "core/demo_runner.py:_prepare_overlay" -> "isinstance";
  "core/demo_runner.py:_prepare_overlay" -> "load_overlay";
  "core/demo_runner.py:_prepare_overlay" -> "setdefault";
  "core/demo_runner.py:_prepare_overlay" -> "values";
  "core/demo_runner.py:run_demo_pipeline" -> "InputNormalizer";
  "core/demo_runner.py:run_demo_pipeline" -> "PipelineOrchestrator";
  "core/demo_runner.py:run_demo_pipeline" -> "_bundle_path";
  "core/demo_runner.py:run_demo_pipeline" -> "_fixture_path";
  "core/demo_runner.py:run_demo_pipeline" -> "_format_summary";
  "core/demo_runner.py:run_demo_pipeline" -> "_prepare_overlay";
  "core/demo_runner.py:run_demo_pipeline" -> "_read_design";
  "core/demo_runner.py:run_demo_pipeline" -> "dump";
  "core/demo_runner.py:run_demo_pipeline" -> "ensure_secure_directory";
  "core/demo_runner.py:run_demo_pipeline" -> "load_cve_feed";
  "core/demo_runner.py:run_demo_pipeline" -> "load_sarif";
  "core/demo_runner.py:run_demo_pipeline" -> "load_sbom";
  "core/demo_runner.py:run_demo_pipeline" -> "lower";
  "core/demo_runner.py:run_demo_pipeline" -> "open";
  "core/demo_runner.py:run_demo_pipeline" -> "print";
  "core/demo_runner.py:run_demo_pipeline" -> "read_bytes";
  "core/demo_runner.py:run_demo_pipeline" -> "run";
  "core/demo_runner.py:run_demo_pipeline" -> "strip";
  "core/demo_runner.py:run_demo_pipeline" -> "write";
  "core/connectors.py:_mask" -> "len";
  "core/connectors.py:summarise_connector" -> "_mask";
  "core/connectors.py:summarise_connector" -> "bool";
  "core/connectors.py:summarise_connector" -> "isinstance";
  "core/connectors.py:summarise_connector" -> "str";
  "core/connectors.py:ConnectorOutcome.to_dict" -> "dict";
  "core/connectors.py:ConnectorOutcome.to_dict" -> "setdefault";
  "core/connectors.py:_BaseConnector.__init__" -> "Session";
  "core/connectors.py:_BaseConnector._request" -> "request";
  "core/connectors.py:JiraConnector.__init__" -> "__init__";
  "core/connectors.py:JiraConnector.__init__" -> "float";
  "core/connectors.py:JiraConnector.__init__" -> "get";
  "core/connectors.py:JiraConnector.__init__" -> "getenv";
  "core/connectors.py:JiraConnector.__init__" -> "rstrip";
  "core/connectors.py:JiraConnector.__init__" -> "str";
  "core/connectors.py:JiraConnector.__init__" -> "super";
  "core/connectors.py:JiraConnector.configured" -> "bool";
  "core/connectors.py:JiraConnector.create_issue" -> "ConnectorOutcome";
  "core/connectors.py:JiraConnector.create_issue" -> "_request";
  "core/connectors.py:JiraConnector.create_issue" -> "dumps";
  "core/connectors.py:JiraConnector.create_issue" -> "get";
  "core/connectors.py:JiraConnector.create_issue" -> "json";
  "core/connectors.py:JiraConnector.create_issue" -> "raise_for_status";
  "core/connectors.py:JiraConnector.create_issue" -> "str";
  "core/connectors.py:JiraConnector.create_issue" -> "urljoin";
  "core/connectors.py:ConfluenceConnector.__init__" -> "__init__";
  "core/connectors.py:ConfluenceConnector.__init__" -> "float";
  "core/connectors.py:ConfluenceConnector.__init__" -> "get";
  "core/connectors.py:ConfluenceConnector.__init__" -> "getenv";
  "core/connectors.py:ConfluenceConnector.__init__" -> "rstrip";
  "core/connectors.py:ConfluenceConnector.__init__" -> "str";
  "core/connectors.py:ConfluenceConnector.__init__" -> "super";
  "core/connectors.py:ConfluenceConnector.configured" -> "bool";
  "core/connectors.py:ConfluenceConnector.create_page" -> "ConnectorOutcome";
  "core/connectors.py:ConfluenceConnector.create_page" -> "_request";
  "core/connectors.py:ConfluenceConnector.create_page" -> "append";
  "core/connectors.py:ConfluenceConnector.create_page" -> "dumps";
  "core/connectors.py:ConfluenceConnector.create_page" -> "get";
  "core/connectors.py:ConfluenceConnector.create_page" -> "json";
  "core/connectors.py:ConfluenceConnector.create_page" -> "raise_for_status";
  "core/connectors.py:ConfluenceConnector.create_page" -> "str";
  "core/connectors.py:ConfluenceConnector.create_page" -> "urljoin";
  "core/connectors.py:SlackConnector.__init__" -> "__init__";
  "core/connectors.py:SlackConnector.__init__" -> "float";
  "core/connectors.py:SlackConnector.__init__" -> "get";
  "core/connectors.py:SlackConnector.__init__" -> "getenv";
  "core/connectors.py:SlackConnector.__init__" -> "str";
  "core/connectors.py:SlackConnector.__init__" -> "super";
  "core/connectors.py:SlackConnector.post_message" -> "ConnectorOutcome";
  "core/connectors.py:SlackConnector.post_message" -> "_request";
  "core/connectors.py:SlackConnector.post_message" -> "get";
  "core/connectors.py:SlackConnector.post_message" -> "raise_for_status";
  "core/connectors.py:SlackConnector.post_message" -> "str";
  "core/connectors.py:AutomationConnectors.__init__" -> "ConfluenceConnector";
  "core/connectors.py:AutomationConnectors.__init__" -> "JiraConnector";
  "core/connectors.py:AutomationConnectors.__init__" -> "SlackConnector";
  "core/connectors.py:AutomationConnectors.__init__" -> "bool";
  "core/connectors.py:AutomationConnectors.__init__" -> "get";
  "core/connectors.py:AutomationConnectors.deliver" -> "ConnectorOutcome";
  "core/connectors.py:AutomationConnectors.deliver" -> "create_issue";
  "core/connectors.py:AutomationConnectors.deliver" -> "create_page";
  "core/connectors.py:AutomationConnectors.deliver" -> "get";
  "core/connectors.py:AutomationConnectors.deliver" -> "lower";
  "core/connectors.py:AutomationConnectors.deliver" -> "post_message";
  "core/connectors.py:AutomationConnectors.deliver" -> "str";
  "core/performance.py:PerformanceSimulator.__init__" -> "_coerce_mapping";
  "core/performance.py:PerformanceSimulator.__init__" -> "_to_float";
  "core/performance.py:PerformanceSimulator.__init__" -> "_to_int";
  "core/performance.py:PerformanceSimulator.__init__" -> "dict";
  "core/performance.py:PerformanceSimulator.__init__" -> "get";
  "core/performance.py:PerformanceSimulator._coerce_mapping" -> "dict";
  "core/performance.py:PerformanceSimulator._coerce_mapping" -> "isinstance";
  "core/performance.py:PerformanceSimulator._to_int" -> "int";
  "core/performance.py:PerformanceSimulator._to_float" -> "float";
  "core/performance.py:PerformanceSimulator.simulate" -> "_to_int";
  "core/performance.py:PerformanceSimulator.simulate" -> "append";
  "core/performance.py:PerformanceSimulator.simulate" -> "get";
  "core/performance.py:PerformanceSimulator.simulate" -> "int";
  "core/performance.py:PerformanceSimulator.simulate" -> "isinstance";
  "core/performance.py:PerformanceSimulator.simulate" -> "len";
  "core/performance.py:PerformanceSimulator.simulate" -> "max";
  "core/performance.py:PerformanceSimulator.simulate" -> "str";
  "core/evidence.py:_atomic_write" -> "ensure_secure_directory";
  "core/evidence.py:_atomic_write" -> "replace";
  "core/evidence.py:_atomic_write" -> "uuid4";
  "core/evidence.py:_atomic_write" -> "with_suffix";
  "core/evidence.py:_atomic_write" -> "write_bytes";
  "core/evidence.py:EvidenceHub.__init__" -> "Fernet";
  "core/evidence.py:EvidenceHub.__init__" -> "RuntimeError";
  "core/evidence.py:EvidenceHub.__init__" -> "bool";
  "core/evidence.py:EvidenceHub.__init__" -> "encode";
  "core/evidence.py:EvidenceHub.__init__" -> "get";
  "core/evidence.py:EvidenceHub.__init__" -> "getenv";
  "core/evidence.py:EvidenceHub.__init__" -> "int";
  "core/evidence.py:EvidenceHub.__init__" -> "isinstance";
  "core/evidence.py:EvidenceHub.__init__" -> "str";
  "core/evidence.py:EvidenceHub._base_directory" -> "Path";
  "core/evidence.py:EvidenceHub._base_directory" -> "ensure_secure_directory";
  "core/evidence.py:EvidenceHub._base_directory" -> "get";
  "core/evidence.py:EvidenceHub._base_directory" -> "resolve";
  "core/evidence.py:EvidenceHub._bundle_name" -> "get";
  "core/evidence.py:EvidenceHub._bundle_name" -> "str";
  "core/evidence.py:EvidenceHub._bundle_name" -> "strip";
  "core/evidence.py:EvidenceHub._bundle_name" -> "sub";
  "core/evidence.py:EvidenceHub.persist" -> "ValueError";
  "core/evidence.py:EvidenceHub.persist" -> "_atomic_write";
  "core/evidence.py:EvidenceHub.persist" -> "_base_directory";
  "core/evidence.py:EvidenceHub.persist" -> "_bundle_name";
  "core/evidence.py:EvidenceHub.persist" -> "_include";
  "core/evidence.py:EvidenceHub.persist" -> "append";
  "core/evidence.py:EvidenceHub.persist" -> "compress";
  "core/evidence.py:EvidenceHub.persist" -> "dumps";
  "core/evidence.py:EvidenceHub.persist" -> "encode";
  "core/evidence.py:EvidenceHub.persist" -> "encrypt";
  "core/evidence.py:EvidenceHub.persist" -> "ensure_secure_directory";
  "core/evidence.py:EvidenceHub.persist" -> "get";
  "core/evidence.py:EvidenceHub.persist" -> "keys";
  "core/evidence.py:EvidenceHub.persist" -> "len";
  "core/evidence.py:EvidenceHub.persist" -> "str";
  "core/evidence.py:EvidenceHub.persist" -> "to_sanitised_dict";
  "core/evidence.py:EvidenceHub.persist" -> "uuid4";
  "core/evidence.py:EvidenceHub.persist" -> "with_suffix";
  "core/ssdlc.py:SSDLCEvaluator.__init__" -> "_parse_stages";
  "core/ssdlc.py:SSDLCEvaluator.__init__" -> "dict";
  "core/ssdlc.py:SSDLCEvaluator.__init__" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._parse_stages" -> "append";
  "core/ssdlc.py:SSDLCEvaluator._parse_stages" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._parse_stages" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._parse_stages" -> "str";
  "core/ssdlc.py:SSDLCEvaluator._parse_stages" -> "strip";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "RequirementResult";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "StageResult";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "_build_summary";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "_check_requirement";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "_serialise_stage";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "append";
  "core/ssdlc.py:SSDLCEvaluator.evaluate" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._build_summary" -> "append";
  "core/ssdlc.py:SSDLCEvaluator._build_summary" -> "len";
  "core/ssdlc.py:SSDLCEvaluator._check_requirement" -> "evaluator";
  "core/ssdlc.py:SSDLCEvaluator._check_requirement" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_requirement" -> "lower";
  "core/ssdlc.py:SSDLCEvaluator._check_requirement" -> "str";
  "core/ssdlc.py:SSDLCEvaluator._check_design" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_design" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_design" -> "sum";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "items";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "lower";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "str";
  "core/ssdlc.py:SSDLCEvaluator._check_threat_model" -> "strip";
  "core/ssdlc.py:SSDLCEvaluator._check_ai_register" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_ai_register" -> "join";
  "core/ssdlc.py:SSDLCEvaluator._check_sbom" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_sbom" -> "getattr";
  "core/ssdlc.py:SSDLCEvaluator._check_sbom" -> "hasattr";
  "core/ssdlc.py:SSDLCEvaluator._check_sbom" -> "int";
  "core/ssdlc.py:SSDLCEvaluator._check_sbom" -> "len";
  "core/ssdlc.py:SSDLCEvaluator._check_dependency_pinning" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_dependency_pinning" -> "getattr";
  "core/ssdlc.py:SSDLCEvaluator._check_dependency_pinning" -> "len";
  "core/ssdlc.py:SSDLCEvaluator._check_sarif" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_sarif" -> "getattr";
  "core/ssdlc.py:SSDLCEvaluator._check_sarif" -> "hasattr";
  "core/ssdlc.py:SSDLCEvaluator._check_sarif" -> "len";
  "core/ssdlc.py:SSDLCEvaluator._check_guardrails" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_cve" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_cve" -> "getattr";
  "core/ssdlc.py:SSDLCEvaluator._check_cve" -> "len";
  "core/ssdlc.py:SSDLCEvaluator._check_cve" -> "sum";
  "core/ssdlc.py:SSDLCEvaluator._check_policy_automation" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_policy_automation" -> "int";
  "core/ssdlc.py:SSDLCEvaluator._check_policy_automation" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_compliance" -> "all";
  "core/ssdlc.py:SSDLCEvaluator._check_compliance" -> "any";
  "core/ssdlc.py:SSDLCEvaluator._check_compliance" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_compliance" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_deploy_approvals" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_deploy_approvals" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_deploy_approvals" -> "join";
  "core/ssdlc.py:SSDLCEvaluator._check_deploy_approvals" -> "sorted";
  "core/ssdlc.py:SSDLCEvaluator._check_deploy_approvals" -> "str";
  "core/ssdlc.py:SSDLCEvaluator._check_evidence" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_evidence" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_observability" -> "get";
  "core/ssdlc.py:SSDLCEvaluator._check_observability" -> "intersection";
  "core/ssdlc.py:SSDLCEvaluator._check_observability" -> "isinstance";
  "core/ssdlc.py:SSDLCEvaluator._check_observability" -> "set";
  "core/ssdlc.py:SSDLCEvaluator._check_feedback_loop" -> "get";
  "core/ai_agents.py:_extract_component_name" -> "get";
  "core/ai_agents.py:_extract_component_name" -> "isinstance";
  "core/ai_agents.py:_extract_component_name" -> "strip";
  "core/ai_agents.py:_tokenise" -> "lower";
  "core/ai_agents.py:_tokenise" -> "set";
  "core/ai_agents.py:_tokenise" -> "split";
  "core/ai_agents.py:FrameworkSignature.__post_init__" -> "_tokenise";
  "core/ai_agents.py:FrameworkSignature.__post_init__" -> "set";
  "core/ai_agents.py:FrameworkSignature.__post_init__" -> "update";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "FrameworkSignature";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "append";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "get";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "isinstance";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "lower";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "str";
  "core/ai_agents.py:AIAgentAdvisor.__init__" -> "strip";
  "core/ai_agents.py:AIAgentAdvisor.enabled" -> "bool";
  "core/ai_agents.py:AIAgentAdvisor._match_frameworks" -> "any";
  "core/ai_agents.py:AIAgentAdvisor._match_frameworks" -> "append";
  "core/ai_agents.py:AIAgentAdvisor._match_frameworks" -> "bool";
  "core/ai_agents.py:AIAgentAdvisor._match_frameworks" -> "intersection";
  "core/ai_agents.py:AIAgentAdvisor._match_frameworks" -> "lower";
  "core/ai_agents.py:AIAgentAdvisor._controls_for" -> "get";
  "core/ai_agents.py:AIAgentAdvisor._controls_for" -> "isinstance";
  "core/ai_agents.py:AIAgentAdvisor._controls_for" -> "lower";
  "core/ai_agents.py:AIAgentAdvisor._controls_for" -> "update";
  "core/ai_agents.py:AIAgentAdvisor._playbooks_for" -> "append";
  "core/ai_agents.py:AIAgentAdvisor._playbooks_for" -> "get";
  "core/ai_agents.py:AIAgentAdvisor._playbooks_for" -> "isinstance";
  "core/ai_agents.py:AIAgentAdvisor._playbooks_for" -> "lower";
  "core/ai_agents.py:AIAgentAdvisor._playbooks_for" -> "str";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "_controls_for";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "_extract_component_name";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "_match_frameworks";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "_playbooks_for";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "_tokenise";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "add";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "append";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "enabled";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "extend";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "get";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "isinstance";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "join";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "keys";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "len";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "set";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "sorted";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "str";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "update";
  "core/ai_agents.py:AIAgentAdvisor.analyse" -> "values";
  "core/iac.py:_normalise_tokens" -> "add";
  "core/iac.py:_normalise_tokens" -> "isinstance";
  "core/iac.py:_normalise_tokens" -> "lower";
  "core/iac.py:_normalise_tokens" -> "set";
  "core/iac.py:_normalise_tokens" -> "strip";
  "core/iac.py:IACTarget.from_mapping" -> "ValueError";
  "core/iac.py:IACTarget.from_mapping" -> "_normalise_tokens";
  "core/iac.py:IACTarget.from_mapping" -> "cls";
  "core/iac.py:IACTarget.from_mapping" -> "get";
  "core/iac.py:IACTarget.from_mapping" -> "str";
  "core/iac.py:IACTarget.from_mapping" -> "strip";
  "core/iac.py:IaCPostureEvaluator.__init__" -> "append";
  "core/iac.py:IaCPostureEvaluator.__init__" -> "dict";
  "core/iac.py:IaCPostureEvaluator.__init__" -> "from_mapping";
  "core/iac.py:IaCPostureEvaluator.__init__" -> "get";
  "core/iac.py:IaCPostureEvaluator.__init__" -> "isinstance";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "_normalise_tokens";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "add";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "any";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "append";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "get";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "isdisjoint";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "isinstance";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "set";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "sorted";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "str";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "strip";
  "core/iac.py:IaCPostureEvaluator.evaluate" -> "update";
  "core/context_engine.py:ContextEngine.__init__" -> "_normalise_weights";
  "core/context_engine.py:ContextEngine.__init__" -> "_parse_playbooks";
  "core/context_engine.py:ContextEngine.__init__" -> "dict";
  "core/context_engine.py:ContextEngine.__init__" -> "get";
  "core/context_engine.py:ContextEngine.__init__" -> "isinstance";
  "core/context_engine.py:ContextEngine.__init__" -> "str";
  "core/context_engine.py:ContextEngine._normalise_weights" -> "int";
  "core/context_engine.py:ContextEngine._normalise_weights" -> "isinstance";
  "core/context_engine.py:ContextEngine._normalise_weights" -> "items";
  "core/context_engine.py:ContextEngine._normalise_weights" -> "lower";
  "core/context_engine.py:ContextEngine._normalise_weights" -> "str";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "append";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "get";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "int";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "isinstance";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "items";
  "core/context_engine.py:ContextEngine._parse_playbooks" -> "sort";
  "core/context_engine.py:ContextEngine._severity_index" -> "index";
  "core/context_engine.py:ContextEngine._normalise_sarif_severity" -> "get";
  "core/context_engine.py:ContextEngine._normalise_sarif_severity" -> "isinstance";
  "core/context_engine.py:ContextEngine._normalise_sarif_severity" -> "lower";
  "core/context_engine.py:ContextEngine._normalise_cve_severity" -> "get";
  "core/context_engine.py:ContextEngine._normalise_cve_severity" -> "lower";
  "core/context_engine.py:ContextEngine._normalise_cve_severity" -> "str";
  "core/context_engine.py:ContextEngine._evaluate_playbook" -> "dict";
  "core/context_engine.py:ContextEngine._evaluate_playbook" -> "get";
  "core/context_engine.py:ContextEngine._score_value" -> "get";
  "core/context_engine.py:ContextEngine._score_value" -> "lower";
  "core/context_engine.py:ContextEngine._score_value" -> "str";
  "core/context_engine.py:ContextEngine._score_data_classification" -> "_score_value";
  "core/context_engine.py:ContextEngine._score_data_classification" -> "isinstance";
  "core/context_engine.py:ContextEngine._score_data_classification" -> "max";
  "core/context_engine.py:ContextEngine._extract_component_name" -> "get";
  "core/context_engine.py:ContextEngine._extract_component_name" -> "isinstance";
  "core/context_engine.py:ContextEngine._extract_component_name" -> "strip";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "ComponentContext";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_evaluate_playbook";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_extract_component_name";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_normalise_cve_severity";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_normalise_sarif_severity";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_score_data_classification";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_score_value";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "_severity_index";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "bool";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "get";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "isinstance";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "len";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "lower";
  "core/context_engine.py:ContextEngine._derive_component_context" -> "str";
  "core/context_engine.py:ContextEngine.evaluate" -> "_bucket";
  "core/context_engine.py:ContextEngine.evaluate" -> "_derive_component_context";
  "core/context_engine.py:ContextEngine.evaluate" -> "append";
  "core/context_engine.py:ContextEngine.evaluate" -> "enumerate";
  "core/context_engine.py:ContextEngine.evaluate" -> "get";
  "core/context_engine.py:ContextEngine.evaluate" -> "isinstance";
  "core/context_engine.py:ContextEngine.evaluate" -> "len";
  "core/context_engine.py:ContextEngine.evaluate" -> "max";
  "core/context_engine.py:ContextEngine.evaluate" -> "round";
  "core/context_engine.py:ContextEngine.evaluate" -> "sum";
  "core/context_engine.py:ContextEngine._bucket" -> "callable";
  "core/context_engine.py:ContextEngine._bucket" -> "get";
  "core/context_engine.py:ContextEngine._bucket" -> "key";
  "core/context_engine.py:ContextEngine._bucket" -> "str";
  "core/probabilistic.py:_coerce_severity" -> "get";
  "core/probabilistic.py:_coerce_severity" -> "lower";
  "core/probabilistic.py:_coerce_severity" -> "str";
  "core/probabilistic.py:_coerce_severity" -> "strip";
  "core/probabilistic.py:_extract_state_sequence" -> "_coerce_severity";
  "core/probabilistic.py:_extract_state_sequence" -> "append";
  "core/probabilistic.py:_extract_state_sequence" -> "get";
  "core/probabilistic.py:_extract_state_sequence" -> "isinstance";
  "core/probabilistic.py:_severity_index" -> "index";
  "core/probabilistic.py:_normalise_transition_row" -> "float";
  "core/probabilistic.py:_normalise_transition_row" -> "items";
  "core/probabilistic.py:_normalise_transition_row" -> "lower";
  "core/probabilistic.py:_normalise_transition_row" -> "str";
  "core/probabilistic.py:_normalise_prior" -> "float";
  "core/probabilistic.py:_normalise_prior" -> "items";
  "core/probabilistic.py:_normalise_prior" -> "lower";
  "core/probabilistic.py:_normalise_prior" -> "str";
  "core/probabilistic.py:_normalise_prior" -> "values";
  "core/probabilistic.py:_entropy" -> "log2";
  "core/probabilistic.py:_entropy" -> "values";
  "core/probabilistic.py:_highest_severity" -> "_severity_index";
  "core/probabilistic.py:_highest_severity" -> "get";
  "core/probabilistic.py:_highest_severity" -> "isinstance";
  "core/probabilistic.py:_highest_severity" -> "lower";
  "core/probabilistic.py:_highest_severity" -> "str";
  "core/probabilistic.py:ComponentForecast.to_dict" -> "items";
  "core/probabilistic.py:ComponentForecast.to_dict" -> "round";
  "core/probabilistic.py:CalibrationResult.to_dict" -> "items";
  "core/probabilistic.py:CalibrationResult.to_dict" -> "round";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "_default_transitions";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "_normalise_prior";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "_normalise_transition_row";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "_severity_index";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "dict";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "int";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "isinstance";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "lower";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine.__init__" -> "str";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "_coerce_severity";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "abs";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "append";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "round";
  "core/probabilistic.py:ProbabilisticForecastEngine.validate_transitions" -> "str";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "_coerce_severity";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "_default_transitions";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "_normalise_transition_row";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "dict";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._calibrate_transitions" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "CalibrationResult";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "ValueError";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "_calibrate_transitions";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "_chain_diagnostics";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "_coerce_severity";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "_extract_state_sequence";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "_posterior";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "isinstance";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "setdefault";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "validate_transitions";
  "core/probabilistic.py:ProbabilisticForecastEngine.calibrate" -> "zip";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "lower";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "str";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._posterior" -> "values";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "lower";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "str";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._forecast_next_state" -> "values";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "_coerce_severity";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "_default_transitions";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "append";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "enumerate";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "isinstance";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "list";
  "core/probabilistic.py:ProbabilisticForecastEngine._transition_matrix" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "abs";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "range";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._stationary_distribution" -> "zip";
  "core/probabilistic.py:ProbabilisticForecastEngine._second_eigenvalue" -> "abs";
  "core/probabilistic.py:ProbabilisticForecastEngine._second_eigenvalue" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine._second_eigenvalue" -> "range";
  "core/probabilistic.py:ProbabilisticForecastEngine._second_eigenvalue" -> "sqrt";
  "core/probabilistic.py:ProbabilisticForecastEngine._second_eigenvalue" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "ceil";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "int";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "log";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "min";
  "core/probabilistic.py:ProbabilisticForecastEngine._mixing_time" -> "values";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "float";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "len";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "range";
  "core/probabilistic.py:ProbabilisticForecastEngine._multi_step_projection" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "_mixing_time";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "_second_eigenvalue";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "_stationary_distribution";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "_transition_matrix";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "min";
  "core/probabilistic.py:ProbabilisticForecastEngine._chain_diagnostics" -> "round";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "ComponentForecast";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "_highest_severity";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "_severity_index";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "append";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "dict";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "isinstance";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "sort";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "str";
  "core/probabilistic.py:ProbabilisticForecastEngine._component_forecasts" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_component_forecasts";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_entropy";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_forecast_next_state";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_mixing_time";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_multi_step_projection";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_posterior";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_second_eigenvalue";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_severity_index";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_stationary_distribution";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "_transition_matrix";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "append";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "get";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "isinstance";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "items";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "join";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "max";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "min";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "pow";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "round";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "sum";
  "core/probabilistic.py:ProbabilisticForecastEngine.evaluate" -> "to_dict";
  "core/modules.py:_resolve_callable" -> "ImportError";
  "core/modules.py:_resolve_callable" -> "TypeError";
  "core/modules.py:_resolve_callable" -> "ValueError";
  "core/modules.py:_resolve_callable" -> "callable";
  "core/modules.py:_resolve_callable" -> "getattr";
  "core/modules.py:_resolve_callable" -> "import_module";
  "core/modules.py:_resolve_callable" -> "rsplit";
  "core/modules.py:_resolve_callable" -> "split";
  "core/modules.py:execute_custom_modules" -> "_resolve_callable";
  "core/modules.py:execute_custom_modules" -> "append";
  "core/modules.py:execute_custom_modules" -> "get";
  "core/modules.py:execute_custom_modules" -> "handler";
  "core/modules.py:execute_custom_modules" -> "isinstance";
  "core/modules.py:execute_custom_modules" -> "str";
  "core/modules.py:execute_custom_modules" -> "strip";
  "core/modules.py:execute_custom_modules" -> "update";
  "core/paths.py:_current_uid" -> "getuid";
  "core/paths.py:_validate_directory_security" -> "PermissionError";
  "core/paths.py:_validate_directory_security" -> "exists";
  "core/paths.py:_validate_directory_security" -> "hasattr";
  "core/paths.py:_validate_directory_security" -> "stat";
  "core/paths.py:ensure_secure_directory" -> "PermissionError";
  "core/paths.py:ensure_secure_directory" -> "chmod";
  "core/paths.py:ensure_secure_directory" -> "mkdir";
  "core/paths.py:ensure_secure_directory" -> "resolve";
  "core/paths.py:ensure_secure_directory" -> "stat";
  "core/paths.py:verify_allowlisted_path" -> "PermissionError";
  "core/paths.py:verify_allowlisted_path" -> "_current_uid";
  "core/paths.py:verify_allowlisted_path" -> "_validate_directory_security";
  "core/paths.py:verify_allowlisted_path" -> "exists";
  "core/paths.py:verify_allowlisted_path" -> "expanduser";
  "core/paths.py:verify_allowlisted_path" -> "relative_to";
  "core/paths.py:verify_allowlisted_path" -> "resolve";
  "core/paths.py:verify_allowlisted_path" -> "tuple";
  "core/stage_runner.py:StageRunner.__init__" -> "InputNormalizer";
  "core/stage_runner.py:StageRunner.run_stage" -> "FileNotFoundError";
  "core/stage_runner.py:StageRunner.run_stage" -> "StageSummary";
  "core/stage_runner.py:StageRunner.run_stage" -> "ValueError";
  "core/stage_runner.py:StageRunner.run_stage" -> "_load_design_payload";
  "core/stage_runner.py:StageRunner.run_stage" -> "_resolve_identity";
  "core/stage_runner.py:StageRunner.run_stage" -> "_signing_available";
  "core/stage_runner.py:StageRunner.run_stage" -> "append";
  "core/stage_runner.py:StageRunner.run_stage" -> "append_transparency_index";
  "core/stage_runner.py:StageRunner.run_stage" -> "copy2";
  "core/stage_runner.py:StageRunner.run_stage" -> "dumps";
  "core/stage_runner.py:StageRunner.run_stage" -> "encode";
  "core/stage_runner.py:StageRunner.run_stage" -> "ensure_ids";
  "core/stage_runner.py:StageRunner.run_stage" -> "ensure_run";
  "core/stage_runner.py:StageRunner.run_stage" -> "exists";
  "core/stage_runner.py:StageRunner.run_stage" -> "expanduser";
  "core/stage_runner.py:StageRunner.run_stage" -> "get";
  "core/stage_runner.py:StageRunner.run_stage" -> "getattr";
  "core/stage_runner.py:StageRunner.run_stage" -> "lower";
  "core/stage_runner.py:StageRunner.run_stage" -> "mkdir";
  "core/stage_runner.py:StageRunner.run_stage" -> "print";
  "core/stage_runner.py:StageRunner.run_stage" -> "processor";
  "core/stage_runner.py:StageRunner.run_stage" -> "read_bytes";
  "core/stage_runner.py:StageRunner.run_stage" -> "resolve";
  "core/stage_runner.py:StageRunner.run_stage" -> "save_input";
  "core/stage_runner.py:StageRunner.run_stage" -> "sign_manifest";
  "core/stage_runner.py:StageRunner.run_stage" -> "startswith";
  "core/stage_runner.py:StageRunner.run_stage" -> "str";
  "core/stage_runner.py:StageRunner.run_stage" -> "strip";
  "core/stage_runner.py:StageRunner.run_stage" -> "verify_manifest";
  "core/stage_runner.py:StageRunner.run_stage" -> "write_output";
  "core/stage_runner.py:StageRunner.run_stage" -> "write_signed_manifest";
  "core/stage_runner.py:StageRunner._process_requirements" -> "BytesIO";
  "core/stage_runner.py:StageRunner._process_requirements" -> "_assign_requirement_ids";
  "core/stage_runner.py:StageRunner._process_requirements" -> "_derive_ssvc_anchor";
  "core/stage_runner.py:StageRunner._process_requirements" -> "_parse_requirements";
  "core/stage_runner.py:StageRunner._process_design" -> "_component_token";
  "core/stage_runner.py:StageRunner._process_design" -> "_design_risk_score";
  "core/stage_runner.py:StageRunner._process_design" -> "dict";
  "core/stage_runner.py:StageRunner._process_design" -> "get";
  "core/stage_runner.py:StageRunner._process_design" -> "isinstance";
  "core/stage_runner.py:StageRunner._process_design" -> "setdefault";
  "core/stage_runner.py:StageRunner._process_build" -> "Path";
  "core/stage_runner.py:StageRunner._process_build" -> "ValueError";
  "core/stage_runner.py:StageRunner._process_build" -> "_read_optional_json";
  "core/stage_runner.py:StageRunner._process_build" -> "append";
  "core/stage_runner.py:StageRunner._process_build" -> "exists";
  "core/stage_runner.py:StageRunner._process_build" -> "get";
  "core/stage_runner.py:StageRunner._process_build" -> "getattr";
  "core/stage_runner.py:StageRunner._process_build" -> "isinstance";
  "core/stage_runner.py:StageRunner._process_build" -> "len";
  "core/stage_runner.py:StageRunner._process_build" -> "load_sbom";
  "core/stage_runner.py:StageRunner._process_build" -> "lower";
  "core/stage_runner.py:StageRunner._process_build" -> "min";
  "core/stage_runner.py:StageRunner._process_build" -> "read_bytes";
  "core/stage_runner.py:StageRunner._process_build" -> "relative_to";
  "core/stage_runner.py:StageRunner._process_build" -> "round";
  "core/stage_runner.py:StageRunner._process_build" -> "save_input";
  "core/stage_runner.py:StageRunner._process_build" -> "split";
  "core/stage_runner.py:StageRunner._process_build" -> "str";
  "core/stage_runner.py:StageRunner._process_build" -> "to_dict";
  "core/stage_runner.py:StageRunner._process_test" -> "Counter";
  "core/stage_runner.py:StageRunner._process_test" -> "_load_test_inputs";
  "core/stage_runner.py:StageRunner._process_test" -> "_read_optional_json";
  "core/stage_runner.py:StageRunner._process_test" -> "float";
  "core/stage_runner.py:StageRunner._process_test" -> "get";
  "core/stage_runner.py:StageRunner._process_test" -> "isinstance";
  "core/stage_runner.py:StageRunner._process_test" -> "len";
  "core/stage_runner.py:StageRunner._process_test" -> "min";
  "core/stage_runner.py:StageRunner._process_test" -> "round";
  "core/stage_runner.py:StageRunner._process_deploy" -> "ValueError";
  "core/stage_runner.py:StageRunner._process_deploy" -> "_analyse_posture";
  "core/stage_runner.py:StageRunner._process_deploy" -> "_control_evidence";
  "core/stage_runner.py:StageRunner._process_deploy" -> "_extract_digests";
  "core/stage_runner.py:StageRunner._process_deploy" -> "_load_deploy_payload";
  "core/stage_runner.py:StageRunner._process_deploy" -> "get";
  "core/stage_runner.py:StageRunner._process_deploy" -> "min";
  "core/stage_runner.py:StageRunner._process_deploy" -> "round";
  "core/stage_runner.py:StageRunner._process_operate" -> "Path";
  "core/stage_runner.py:StageRunner._process_operate" -> "_read_optional_json";
  "core/stage_runner.py:StageRunner._process_operate" -> "append";
  "core/stage_runner.py:StageRunner._process_operate" -> "decode";
  "core/stage_runner.py:StageRunner._process_operate" -> "get";
  "core/stage_runner.py:StageRunner._process_operate" -> "isinstance";
  "core/stage_runner.py:StageRunner._process_operate" -> "list";
  "core/stage_runner.py:StageRunner._process_operate" -> "loads";
  "core/stage_runner.py:StageRunner._process_operate" -> "lower";
  "core/stage_runner.py:StageRunner._process_operate" -> "max";
  "core/stage_runner.py:StageRunner._process_operate" -> "min";
  "core/stage_runner.py:StageRunner._process_operate" -> "round";
  "core/stage_runner.py:StageRunner._process_operate" -> "str";
  "core/stage_runner.py:StageRunner._process_decision" -> "ZipFile";
  "core/stage_runner.py:StageRunner._process_decision" -> "_bundle_manifest";
  "core/stage_runner.py:StageRunner._process_decision" -> "_collect_documents";
  "core/stage_runner.py:StageRunner._process_decision" -> "_compliance_rollup";
  "core/stage_runner.py:StageRunner._process_decision" -> "_decision_factors";
  "core/stage_runner.py:StageRunner._process_decision" -> "_marketplace_recommendations";
  "core/stage_runner.py:StageRunner._process_decision" -> "_write_evidence_bundle";
  "core/stage_runner.py:StageRunner._process_decision" -> "decode";
  "core/stage_runner.py:StageRunner._process_decision" -> "dumps";
  "core/stage_runner.py:StageRunner._process_decision" -> "encode";
  "core/stage_runner.py:StageRunner._process_decision" -> "get";
  "core/stage_runner.py:StageRunner._process_decision" -> "isinstance";
  "core/stage_runner.py:StageRunner._process_decision" -> "len";
  "core/stage_runner.py:StageRunner._process_decision" -> "loads";
  "core/stage_runner.py:StageRunner._process_decision" -> "lower";
  "core/stage_runner.py:StageRunner._process_decision" -> "min";
  "core/stage_runner.py:StageRunner._process_decision" -> "round";
  "core/stage_runner.py:StageRunner._process_decision" -> "write_binary_output";
  "core/stage_runner.py:StageRunner._process_decision" -> "writestr";
  "core/stage_runner.py:StageRunner._signing_available" -> "bool";
  "core/stage_runner.py:StageRunner._signing_available" -> "get";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "DictReader";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "StringIO";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "any";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "decode";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "loads";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "lower";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "strip";
  "core/stage_runner.py:StageRunner._load_design_payload" -> "values";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "DictReader";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "TextIOWrapper";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "_normalise_requirement";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "any";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "append";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "decode";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "get";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "getvalue";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "isinstance";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "loads";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "seek";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "startswith";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "strip";
  "core/stage_runner.py:StageRunner._parse_requirements" -> "values";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "add";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "append";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "dict";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "get";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "set";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "setdefault";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "startswith";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "str";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "strip";
  "core/stage_runner.py:StageRunner._assign_requirement_ids" -> "upper";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "_as_bool";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "get";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "isinstance";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "lower";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "split";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "str";
  "core/stage_runner.py:StageRunner._normalise_requirement" -> "strip";
  "core/stage_runner.py:StageRunner._derive_ssvc_anchor" -> "any";
  "core/stage_runner.py:StageRunner._derive_ssvc_anchor" -> "get";
  "core/stage_runner.py:StageRunner._component_token" -> "isalnum";
  "core/stage_runner.py:StageRunner._component_token" -> "join";
  "core/stage_runner.py:StageRunner._component_token" -> "lower";
  "core/stage_runner.py:StageRunner._component_token" -> "replace";
  "core/stage_runner.py:StageRunner._component_token" -> "split";
  "core/stage_runner.py:StageRunner._component_token" -> "str";
  "core/stage_runner.py:StageRunner._component_token" -> "strip";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "get";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "isinstance";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "lower";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "min";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "round";
  "core/stage_runner.py:StageRunner._design_risk_score" -> "str";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "append";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "decode";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "exists";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "get";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "isinstance";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "load_sarif";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "loads";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "lower";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "read_bytes";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "read_text";
  "core/stage_runner.py:StageRunner._load_test_inputs" -> "save_input";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "ValueError";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "decode";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "isinstance";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "loads";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "lstrip";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "safe_load";
  "core/stage_runner.py:StageRunner._load_deploy_payload" -> "startswith";
  "core/stage_runner.py:StageRunner._analyse_posture" -> "append";
  "core/stage_runner.py:StageRunner._analyse_posture" -> "get";
  "core/stage_runner.py:StageRunner._analyse_posture" -> "isinstance";
  "core/stage_runner.py:StageRunner._analyse_posture" -> "str";
  "core/stage_runner.py:StageRunner._extract_digests" -> "append";
  "core/stage_runner.py:StageRunner._extract_digests" -> "exists";
  "core/stage_runner.py:StageRunner._extract_digests" -> "get";
  "core/stage_runner.py:StageRunner._extract_digests" -> "isinstance";
  "core/stage_runner.py:StageRunner._extract_digests" -> "loads";
  "core/stage_runner.py:StageRunner._extract_digests" -> "read_text";
  "core/stage_runner.py:StageRunner._control_evidence" -> "append";
  "core/stage_runner.py:StageRunner._control_evidence" -> "get";
  "core/stage_runner.py:StageRunner._collect_documents" -> "exists";
  "core/stage_runner.py:StageRunner._collect_documents" -> "get";
  "core/stage_runner.py:StageRunner._collect_documents" -> "isinstance";
  "core/stage_runner.py:StageRunner._collect_documents" -> "items";
  "core/stage_runner.py:StageRunner._collect_documents" -> "loads";
  "core/stage_runner.py:StageRunner._collect_documents" -> "read_text";
  "core/stage_runner.py:StageRunner._collect_documents" -> "split";
  "core/stage_runner.py:StageRunner._decision_factors" -> "append";
  "core/stage_runner.py:StageRunner._decision_factors" -> "get";
  "core/stage_runner.py:StageRunner._decision_factors" -> "isinstance";
  "core/stage_runner.py:StageRunner._decision_factors" -> "title";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "append";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "get";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "isinstance";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "items";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "len";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "round";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "setdefault";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "sorted";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "split";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "str";
  "core/stage_runner.py:StageRunner._compliance_rollup" -> "sum";
  "core/stage_runner.py:StageRunner._marketplace_recommendations" -> "list";
  "core/stage_runner.py:StageRunner._marketplace_recommendations" -> "str";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "ZipFile";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "dumps";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "get";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "isinstance";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "items";
  "core/stage_runner.py:StageRunner._write_evidence_bundle" -> "writestr";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "dumps";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "encode";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "get";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "hexdigest";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "isinstance";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "isoformat";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "items";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "sha256";
  "core/stage_runner.py:StageRunner._bundle_manifest" -> "utcnow";
  "core/stage_runner.py:StageRunner._read_optional_json" -> "loads";
  "core/stage_runner.py:StageRunner._read_optional_json" -> "read_text";
  "core/stage_runner.py:StageRunner._as_bool" -> "bool";
  "core/stage_runner.py:StageRunner._as_bool" -> "isinstance";
  "core/stage_runner.py:StageRunner._as_bool" -> "lower";
  "core/stage_runner.py:StageRunner._as_bool" -> "strip";
  "core/stage_runner.py:StageRunner._resolve_identity" -> "isinstance";
  "core/stage_runner.py:StageRunner._resolve_identity" -> "match";
  "core/stage_runner.py:StageRunner._resolve_identity" -> "strip";
  "core/stage_runner.py:StageRunner._resolve_identity" -> "upper";
  "core/onboarding.py:OnboardingGuide._iter_steps" -> "get";
  "core/onboarding.py:OnboardingGuide._iter_steps" -> "isinstance";
  "core/onboarding.py:OnboardingGuide.build" -> "_iter_steps";
  "core/onboarding.py:OnboardingGuide.build" -> "append";
  "core/onboarding.py:OnboardingGuide.build" -> "extend";
  "core/onboarding.py:OnboardingGuide.build" -> "get";
  "core/onboarding.py:OnboardingGuide.build" -> "upper";
  "core/storage.py:_serialise_payload" -> "_serialise_payload";
  "core/storage.py:_serialise_payload" -> "callable";
  "core/storage.py:_serialise_payload" -> "getattr";
  "core/storage.py:_serialise_payload" -> "hasattr";
  "core/storage.py:_serialise_payload" -> "isinstance";
  "core/storage.py:_serialise_payload" -> "items";
  "core/storage.py:_serialise_payload" -> "str";
  "core/storage.py:_serialise_payload" -> "to_dict";
  "core/storage.py:ArtefactArchive.__init__" -> "Path";
  "core/storage.py:ArtefactArchive.__init__" -> "ensure_secure_directory";
  "core/storage.py:ArtefactArchive.__init__" -> "resolve";
  "core/storage.py:ArtefactArchive.__init__" -> "tuple";
  "core/storage.py:ArtefactArchive.__init__" -> "verify_allowlisted_path";
  "core/storage.py:ArtefactArchive._stage_directory" -> "ensure_secure_directory";
  "core/storage.py:ArtefactArchive._stage_directory" -> "verify_allowlisted_path";
  "core/storage.py:ArtefactArchive.persist" -> "_serialise_payload";
  "core/storage.py:ArtefactArchive.persist" -> "_stage_directory";
  "core/storage.py:ArtefactArchive.persist" -> "dict";
  "core/storage.py:ArtefactArchive.persist" -> "dumps";
  "core/storage.py:ArtefactArchive.persist" -> "isoformat";
  "core/storage.py:ArtefactArchive.persist" -> "replace";
  "core/storage.py:ArtefactArchive.persist" -> "str";
  "core/storage.py:ArtefactArchive.persist" -> "utcnow";
  "core/storage.py:ArtefactArchive.persist" -> "uuid4";
  "core/storage.py:ArtefactArchive.persist" -> "write_bytes";
  "core/storage.py:ArtefactArchive.persist" -> "write_text";
  "core/storage.py:ArtefactArchive.summarise" -> "items";
  "core/tenancy.py:TenantLifecycleManager.__init__" -> "_coerce_mapping";
  "core/tenancy.py:TenantLifecycleManager.__init__" -> "_parse_tenants";
  "core/tenancy.py:TenantLifecycleManager.__init__" -> "dict";
  "core/tenancy.py:TenantLifecycleManager.__init__" -> "get";
  "core/tenancy.py:TenantLifecycleManager._coerce_mapping" -> "dict";
  "core/tenancy.py:TenantLifecycleManager._coerce_mapping" -> "isinstance";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "append";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "get";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "isinstance";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "lower";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "str";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "strip";
  "core/tenancy.py:TenantLifecycleManager._parse_tenants" -> "title";
  "core/tenancy.py:TenantLifecycleManager._resolve_required_modules" -> "get";
  "core/tenancy.py:TenantLifecycleManager._resolve_required_modules" -> "isinstance";
  "core/tenancy.py:TenantLifecycleManager._resolve_required_modules" -> "set";
  "core/tenancy.py:TenantLifecycleManager._resolve_required_modules" -> "str";
  "core/tenancy.py:TenantLifecycleManager._resolve_required_modules" -> "update";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "Counter";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "_resolve_required_modules";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "append";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "dict";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "get";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "isinstance";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "len";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "sorted";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "str";
  "core/tenancy.py:TenantLifecycleManager.evaluate" -> "title";
  "core/analytics.py:_validate_run_id" -> "ValueError";
  "core/analytics.py:_validate_run_id" -> "isinstance";
  "core/analytics.py:_validate_run_id" -> "set";
  "core/analytics.py:_validate_run_id" -> "strip";
  "core/analytics.py:AnalyticsStore.__init__" -> "Path";
  "core/analytics.py:AnalyticsStore.__init__" -> "ensure_secure_directory";
  "core/analytics.py:AnalyticsStore.__init__" -> "resolve";
  "core/analytics.py:AnalyticsStore.__init__" -> "tuple";
  "core/analytics.py:AnalyticsStore.__init__" -> "verify_allowlisted_path";
  "core/analytics.py:AnalyticsStore._category_directory" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore._category_directory" -> "ensure_secure_directory";
  "core/analytics.py:AnalyticsStore._category_directory" -> "verify_allowlisted_path";
  "core/analytics.py:AnalyticsStore._timestamp" -> "int";
  "core/analytics.py:AnalyticsStore._timestamp" -> "time";
  "core/analytics.py:AnalyticsStore._write_entry" -> "_category_directory";
  "core/analytics.py:AnalyticsStore._write_entry" -> "_timestamp";
  "core/analytics.py:AnalyticsStore._write_entry" -> "dumps";
  "core/analytics.py:AnalyticsStore._write_entry" -> "uuid4";
  "core/analytics.py:AnalyticsStore._write_entry" -> "write_text";
  "core/analytics.py:AnalyticsStore._load_entries" -> "_category_directory";
  "core/analytics.py:AnalyticsStore._load_entries" -> "append";
  "core/analytics.py:AnalyticsStore._load_entries" -> "dict";
  "core/analytics.py:AnalyticsStore._load_entries" -> "exists";
  "core/analytics.py:AnalyticsStore._load_entries" -> "get";
  "core/analytics.py:AnalyticsStore._load_entries" -> "glob";
  "core/analytics.py:AnalyticsStore._load_entries" -> "is_dir";
  "core/analytics.py:AnalyticsStore._load_entries" -> "isinstance";
  "core/analytics.py:AnalyticsStore._load_entries" -> "iterdir";
  "core/analytics.py:AnalyticsStore._load_entries" -> "loads";
  "core/analytics.py:AnalyticsStore._load_entries" -> "read_text";
  "core/analytics.py:AnalyticsStore._load_entries" -> "setdefault";
  "core/analytics.py:AnalyticsStore._load_entries" -> "sort";
  "core/analytics.py:AnalyticsStore._load_entries" -> "str";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "_category_directory";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "append";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "dict";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "exists";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "get";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "glob";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "isinstance";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "loads";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "read_text";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "setdefault";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "sort";
  "core/analytics.py:AnalyticsStore._load_run_entries" -> "str";
  "core/analytics.py:AnalyticsStore._slice" -> "append";
  "core/analytics.py:AnalyticsStore._slice" -> "items";
  "core/analytics.py:AnalyticsStore._slice" -> "max";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "_timestamp";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "_write_entry";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "dict";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "float";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "get";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "int";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "isinstance";
  "core/analytics.py:AnalyticsStore.record_forecast" -> "len";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "_timestamp";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "_write_entry";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "dict";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "get";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "int";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "isinstance";
  "core/analytics.py:AnalyticsStore.record_exploit_snapshot" -> "len";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "Counter";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "_timestamp";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "_write_entry";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "dict";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "get";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "int";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "isinstance";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "len";
  "core/analytics.py:AnalyticsStore.record_ticket_metrics" -> "str";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "_timestamp";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "_write_entry";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "get";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "int";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "isinstance";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "len";
  "core/analytics.py:AnalyticsStore.record_feedback_event" -> "str";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "Counter";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "_timestamp";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "_validate_run_id";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "_write_entry";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "dict";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "get";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "isinstance";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "items";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "str";
  "core/analytics.py:AnalyticsStore.record_feedback_outcomes" -> "values";
  "core/analytics.py:AnalyticsStore.persist_run" -> "dict";
  "core/analytics.py:AnalyticsStore.persist_run" -> "get";
  "core/analytics.py:AnalyticsStore.persist_run" -> "isinstance";
  "core/analytics.py:AnalyticsStore.persist_run" -> "record_exploit_snapshot";
  "core/analytics.py:AnalyticsStore.persist_run" -> "record_forecast";
  "core/analytics.py:AnalyticsStore.persist_run" -> "record_ticket_metrics";
  "core/analytics.py:AnalyticsStore.persist_run" -> "str";
  "core/analytics.py:AnalyticsStore._average" -> "float";
  "core/analytics.py:AnalyticsStore._average" -> "len";
  "core/analytics.py:AnalyticsStore._average" -> "sum";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "_average";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "_load_entries";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "_slice";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "get";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "len";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "round";
  "core/analytics.py:AnalyticsStore._forecast_dashboard" -> "sum";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "Counter";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "_load_entries";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "_slice";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "dict";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "get";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "len";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "str";
  "core/analytics.py:AnalyticsStore._exploit_dashboard" -> "sum";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "Counter";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "_load_entries";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "_slice";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "dict";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "get";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "isinstance";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "len";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "sum";
  "core/analytics.py:AnalyticsStore._ticket_dashboard" -> "update";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "Counter";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "_load_entries";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "_slice";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "dict";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "get";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "isinstance";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "len";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "str";
  "core/analytics.py:AnalyticsStore._feedback_dashboard" -> "update";
  "core/analytics.py:AnalyticsStore.load_dashboard" -> "_exploit_dashboard";
  "core/analytics.py:AnalyticsStore.load_dashboard" -> "_feedback_dashboard";
  "core/analytics.py:AnalyticsStore.load_dashboard" -> "_forecast_dashboard";
  "core/analytics.py:AnalyticsStore.load_dashboard" -> "_ticket_dashboard";
  "core/analytics.py:AnalyticsStore.load_dashboard" -> "max";
  "core/analytics.py:AnalyticsStore.load_run" -> "_load_run_entries";
  "core/analytics.py:AnalyticsStore.load_run" -> "_validate_run_id";
  "core/analytics.py:ROIDashboard.__init__" -> "_coerce_mapping";
  "core/analytics.py:ROIDashboard.__init__" -> "_to_float";
  "core/analytics.py:ROIDashboard.__init__" -> "dict";
  "core/analytics.py:ROIDashboard.__init__" -> "get";
  "core/analytics.py:ROIDashboard._coerce_mapping" -> "dict";
  "core/analytics.py:ROIDashboard._coerce_mapping" -> "isinstance";
  "core/analytics.py:ROIDashboard._to_float" -> "float";
  "core/analytics.py:ROIDashboard.evaluate" -> "_to_float";
  "core/analytics.py:ROIDashboard.evaluate" -> "append";
  "core/analytics.py:ROIDashboard.evaluate" -> "float";
  "core/analytics.py:ROIDashboard.evaluate" -> "get";
  "core/analytics.py:ROIDashboard.evaluate" -> "int";
  "core/analytics.py:ROIDashboard.evaluate" -> "isinstance";
  "core/analytics.py:ROIDashboard.evaluate" -> "join";
  "core/analytics.py:ROIDashboard.evaluate" -> "len";
  "core/analytics.py:ROIDashboard.evaluate" -> "list";
  "core/analytics.py:ROIDashboard.evaluate" -> "max";
  "core/analytics.py:ROIDashboard.evaluate" -> "round";
  "core/analytics.py:ROIDashboard.evaluate" -> "sorted";
  "core/analytics.py:ROIDashboard.evaluate" -> "str";
  "core/analytics.py:ROIDashboard.evaluate" -> "sum";
  "core/analytics.py:ROIDashboard.evaluate" -> "values";
  "core/analytics.py:FeedbackOutcomeStore.__init__" -> "ensure_secure_directory";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "_validate_run_id";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "dict";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "dumps";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "ensure_secure_directory";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "get";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "int";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "isinstance";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "items";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "open";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "record_feedback_outcomes";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "setdefault";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "str";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "time";
  "core/analytics.py:FeedbackOutcomeStore.record" -> "write";
  "core/analytics.py:FeedbackOutcomeStore.record_feedback_event" -> "record_feedback_event";
  "core/policy.py:_AutomationDispatcher.__init__" -> "Path";
  "core/policy.py:_AutomationDispatcher.__init__" -> "ensure_secure_directory";
  "core/policy.py:_AutomationDispatcher.__init__" -> "get";
  "core/policy.py:_AutomationDispatcher.__init__" -> "resolve";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "dict";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "dumps";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "get";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "isoformat";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "str";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "strftime";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "utcnow";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "uuid4";
  "core/policy.py:_AutomationDispatcher.dispatch" -> "write_text";
  "core/policy.py:PolicyAutomation.__init__" -> "AutomationConnectors";
  "core/policy.py:PolicyAutomation.__init__" -> "_AutomationDispatcher";
  "core/policy.py:PolicyAutomation.__init__" -> "get";
  "core/policy.py:PolicyAutomation.__init__" -> "isinstance";
  "core/policy.py:PolicyAutomation._render_action" -> "get";
  "core/policy.py:PolicyAutomation._render_action" -> "items";
  "core/policy.py:PolicyAutomation._render_action" -> "setdefault";
  "core/policy.py:PolicyAutomation._render_action" -> "uuid4";
  "core/policy.py:PolicyAutomation._should_trigger" -> "bool";
  "core/policy.py:PolicyAutomation._should_trigger" -> "get";
  "core/policy.py:PolicyAutomation._should_trigger" -> "int";
  "core/policy.py:PolicyAutomation.plan" -> "_render_action";
  "core/policy.py:PolicyAutomation.plan" -> "_should_trigger";
  "core/policy.py:PolicyAutomation.plan" -> "append";
  "core/policy.py:PolicyAutomation.plan" -> "get";
  "core/policy.py:PolicyAutomation.plan" -> "lower";
  "core/policy.py:PolicyAutomation.plan" -> "str";
  "core/policy.py:PolicyAutomation.plan" -> "strip";
  "core/policy.py:PolicyAutomation.execute" -> "append";
  "core/policy.py:PolicyAutomation.execute" -> "deliver";
  "core/policy.py:PolicyAutomation.execute" -> "dict";
  "core/policy.py:PolicyAutomation.execute" -> "dispatch";
  "core/policy.py:PolicyAutomation.execute" -> "get";
  "core/policy.py:PolicyAutomation.execute" -> "len";
  "core/policy.py:PolicyAutomation.execute" -> "str";
  "core/policy.py:PolicyAutomation.execute" -> "to_dict";
  "core/exploit_signals.py:_iter_dict" -> "get";
  "core/exploit_signals.py:_iter_dict" -> "isinstance";
  "core/exploit_signals.py:_extract_value" -> "_iter_dict";
  "core/exploit_signals.py:_extract_value" -> "split";
  "core/exploit_signals.py:_extract_value" -> "str";
  "core/exploit_signals.py:_refresh_named_feed" -> "ExploitFeedRefresher";
  "core/exploit_signals.py:_refresh_named_feed" -> "NormalizedCVEFeed";
  "core/exploit_signals.py:_refresh_named_feed" -> "get";
  "core/exploit_signals.py:_refresh_named_feed" -> "refresh";
  "core/exploit_signals.py:load_latest_kev_feed" -> "_refresh_named_feed";
  "core/exploit_signals.py:load_latest_kev_feed" -> "load_overlay";
  "core/exploit_signals.py:load_latest_epss_feed" -> "_refresh_named_feed";
  "core/exploit_signals.py:load_latest_epss_feed" -> "load_overlay";
  "core/exploit_signals.py:refresh_exploit_feeds" -> "exception";
  "core/exploit_signals.py:refresh_exploit_feeds" -> "info";
  "core/exploit_signals.py:refresh_exploit_feeds" -> "load_latest_epss_feed";
  "core/exploit_signals.py:refresh_exploit_feeds" -> "load_latest_kev_feed";
  "core/exploit_signals.py:refresh_exploit_feeds" -> "load_overlay";
  "core/exploit_signals.py:_start_scheduler" -> "BackgroundScheduler";
  "core/exploit_signals.py:_start_scheduler" -> "add_job";
  "core/exploit_signals.py:_start_scheduler" -> "info";
  "core/exploit_signals.py:_start_scheduler" -> "register";
  "core/exploit_signals.py:_start_scheduler" -> "shutdown";
  "core/exploit_signals.py:_start_scheduler" -> "start";
  "core/exploit_signals.py:_start_scheduler" -> "warning";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "cls";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "float";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "get";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "isinstance";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "lower";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "str";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "strip";
  "core/exploit_signals.py:ExploitSignal.from_mapping" -> "tuple";
  "core/exploit_signals.py:ExploitSignal.evaluate" -> "_extract_value";
  "core/exploit_signals.py:ExploitSignal.evaluate" -> "float";
  "core/exploit_signals.py:ExploitSignal.evaluate" -> "isinstance";
  "core/exploit_signals.py:ExploitSignal.evaluate" -> "lower";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "from_mapping";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "fromisoformat";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "get";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "int";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "isinstance";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "items";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "replace";
  "core/exploit_signals.py:ExploitSignalEvaluator.__init__" -> "str";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "append";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "evaluate";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "get";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "isoformat";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "items";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "len";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "now";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "round";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "timedelta";
  "core/exploit_signals.py:ExploitSignalEvaluator.evaluate" -> "total_seconds";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "Path";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "Session";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "_configure_session";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "_normalise_feed_spec";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "append";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "bool";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "ensure_secure_directory";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "int";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "isinstance";
  "core/exploit_signals.py:ExploitFeedRefresher.__init__" -> "resolve";
  "core/exploit_signals.py:ExploitFeedRefresher._configure_session" -> "HTTPAdapter";
  "core/exploit_signals.py:ExploitFeedRefresher._configure_session" -> "Retry";
  "core/exploit_signals.py:ExploitFeedRefresher._configure_session" -> "mount";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "bool";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "dict";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "float";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "isinstance";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "str";
  "core/exploit_signals.py:ExploitFeedRefresher._normalise_feed_spec" -> "strip";
  "core/exploit_signals.py:ExploitFeedRefresher._needs_refresh" -> "now";
  "core/exploit_signals.py:ExploitFeedRefresher._needs_refresh" -> "timedelta";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "_apply_feed";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "_needs_refresh";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "any";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "append";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "isoformat";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "now";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "replace";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "setdefault";
  "core/exploit_signals.py:ExploitFeedRefresher.refresh" -> "update";
  "core/exploit_signals.py:ExploitFeedRefresher._read_destination" -> "Path";
  "core/exploit_signals.py:ExploitFeedRefresher._read_destination" -> "ensure_secure_directory";
  "core/exploit_signals.py:ExploitFeedRefresher._read_destination" -> "is_absolute";
  "core/exploit_signals.py:ExploitFeedRefresher._read_destination" -> "resolve";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "Path";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "_read_destination";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "ensure_secure_directory";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "exists";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "is_absolute";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "isinstance";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "len";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "loads";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "raise_for_status";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "read_text";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "resolve";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "str";
  "core/exploit_signals.py:ExploitFeedRefresher._load_feed_data" -> "write_text";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "_extract_cve_id";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "_extract_nested_value";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "_load_feed_data";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "bool";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "isinstance";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "lower";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "setdefault";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "str";
  "core/exploit_signals.py:ExploitFeedRefresher._apply_feed" -> "update";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_nested_value" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_nested_value" -> "isinstance";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_nested_value" -> "split";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_nested_value" -> "str";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_cve_id" -> "get";
  "core/exploit_signals.py:ExploitFeedRefresher._extract_cve_id" -> "isinstance";
}

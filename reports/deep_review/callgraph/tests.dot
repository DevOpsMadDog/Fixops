digraph callgraph {
  "tests/test_key_management.py:_encode_b64url" -> "bit_length";
  "tests/test_key_management.py:_encode_b64url" -> "decode";
  "tests/test_key_management.py:_encode_b64url" -> "rstrip";
  "tests/test_key_management.py:_encode_b64url" -> "to_bytes";
  "tests/test_key_management.py:_encode_b64url" -> "urlsafe_b64encode";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "AWSKMSProvider";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "StubKMSClient";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "age_current_key";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "attestation";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "fingerprint";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "rotate";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "sign";
  "tests/test_key_management.py:test_aws_kms_provider_signs_and_rotates" -> "verify";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "AzureKeyVaultProvider";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "StubAzureCryptoClient";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "StubAzureKeyClient";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "attestation";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "fingerprint";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "rotate";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "sign";
  "tests/test_key_management.py:test_azure_key_vault_provider_signs_and_rotates" -> "verify";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "AWSKMSProvider";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "StubKMSClient";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "evaluate_rotation_health";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "get_key_rotation_age";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "get_key_rotation_health";
  "tests/test_key_management.py:test_rotation_health_flags_breach" -> "reset_runtime_stats";
  "tests/test_key_management.py:StubKMSClient.__init__" -> "_create_key";
  "tests/test_key_management.py:StubKMSClient._create_key" -> "generate_private_key";
  "tests/test_key_management.py:StubKMSClient._create_key" -> "len";
  "tests/test_key_management.py:StubKMSClient._create_key" -> "now";
  "tests/test_key_management.py:StubKMSClient._create_key" -> "timedelta";
  "tests/test_key_management.py:StubKMSClient._resolve" -> "startswith";
  "tests/test_key_management.py:StubKMSClient.get_public_key" -> "_resolve";
  "tests/test_key_management.py:StubKMSClient.get_public_key" -> "dict";
  "tests/test_key_management.py:StubKMSClient.get_public_key" -> "public_bytes";
  "tests/test_key_management.py:StubKMSClient.get_public_key" -> "public_key";
  "tests/test_key_management.py:StubKMSClient.describe_key" -> "_resolve";
  "tests/test_key_management.py:StubKMSClient.describe_key" -> "dict";
  "tests/test_key_management.py:StubKMSClient.sign" -> "PKCS1v15";
  "tests/test_key_management.py:StubKMSClient.sign" -> "SHA256";
  "tests/test_key_management.py:StubKMSClient.sign" -> "_resolve";
  "tests/test_key_management.py:StubKMSClient.sign" -> "sign";
  "tests/test_key_management.py:StubKMSClient.rotate_key" -> "_create_key";
  "tests/test_key_management.py:StubKMSClient.rotate_key" -> "get_public_key";
  "tests/test_key_management.py:StubKMSClient.rotate_key" -> "now";
  "tests/test_key_management.py:StubKMSClient.rotate_key" -> "startswith";
  "tests/test_key_management.py:StubKMSClient.age_current_key" -> "get";
  "tests/test_key_management.py:StubKMSClient.age_current_key" -> "now";
  "tests/test_key_management.py:StubKMSClient.age_current_key" -> "timedelta";
  "tests/test_key_management.py:StubAzureKeyClient.__init__" -> "_create_version";
  "tests/test_key_management.py:StubAzureKeyClient._create_version" -> "generate_private_key";
  "tests/test_key_management.py:StubAzureKeyClient._create_version" -> "len";
  "tests/test_key_management.py:StubAzureKeyClient._create_version" -> "now";
  "tests/test_key_management.py:StubAzureKeyClient._create_version" -> "timedelta";
  "tests/test_key_management.py:StubAzureKeyClient.get_key" -> "SimpleNamespace";
  "tests/test_key_management.py:StubAzureKeyClient.get_key" -> "ValueError";
  "tests/test_key_management.py:StubAzureKeyClient.get_key" -> "_encode_b64url";
  "tests/test_key_management.py:StubAzureKeyClient.get_key" -> "public_key";
  "tests/test_key_management.py:StubAzureKeyClient.get_key" -> "public_numbers";
  "tests/test_key_management.py:StubAzureKeyClient.rotate_key" -> "ValueError";
  "tests/test_key_management.py:StubAzureKeyClient.rotate_key" -> "_create_version";
  "tests/test_key_management.py:StubAzureKeyClient.rotate_key" -> "get_key";
  "tests/test_key_management.py:StubAzureKeyClient.begin_rotate_key" -> "_Poller";
  "tests/test_key_management.py:StubAzureKeyClient.begin_rotate_key" -> "rotate_key";
  "tests/test_key_management.py:StubAzureCryptoClient.sign" -> "PKCS1v15";
  "tests/test_key_management.py:StubAzureCryptoClient.sign" -> "SHA256";
  "tests/test_key_management.py:StubAzureCryptoClient.sign" -> "SimpleNamespace";
  "tests/test_key_management.py:StubAzureCryptoClient.sign" -> "private_key";
  "tests/test_key_management.py:StubAzureCryptoClient.sign" -> "sign";
  "tests/test_cicd_signature.py:signing_provider" -> "EnvKeyProvider";
  "tests/test_cicd_signature.py:signing_provider" -> "NoEncryption";
  "tests/test_cicd_signature.py:signing_provider" -> "decode";
  "tests/test_cicd_signature.py:signing_provider" -> "fixture";
  "tests/test_cicd_signature.py:signing_provider" -> "generate_private_key";
  "tests/test_cicd_signature.py:signing_provider" -> "private_bytes";
  "tests/test_cicd_signature.py:signing_provider" -> "public_bytes";
  "tests/test_cicd_signature.py:signing_provider" -> "public_key";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "SimpleNamespace";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "b64encode";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "decode";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "dumps";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "encode";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "fingerprint";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "run";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "sign";
  "tests/test_cicd_signature.py:test_verify_signature_success" -> "verify_signature";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "SimpleNamespace";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "b64encode";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "decode";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "dumps";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "encode";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "fingerprint";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "lower";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "raises";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "run";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "sign";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "str";
  "tests/test_cicd_signature.py:test_verify_signature_failure" -> "verify_signature";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "callable";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "get";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "isinstance";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "items";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "setattr";
  "tests/test_cicd_signature.py:_BaseSettings.__init__" -> "startswith";
  "tests/test_cicd_signature.py:_BaseSettings.model_dump" -> "dir";
  "tests/test_cicd_signature.py:_BaseSettings.model_dump" -> "getattr";
  "tests/test_cicd_signature.py:_BaseSettings.model_dump" -> "isupper";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "InputNormalizer";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "PipelineOrchestrator";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "any";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "dumps";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "encode";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "load_cve_feed";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "load_overlay";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "load_sarif";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "load_sbom";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "run";
  "tests/test_pipeline_integration.py:test_pipeline_emits_compliance_results" -> "setdefault";
  "tests/test_storage_security.py:allowlisted_root" -> "mkdir";
  "tests/test_storage_security.py:test_archive_rejects_directory_outside_allowlist" -> "ArtefactArchive";
  "tests/test_storage_security.py:test_archive_rejects_directory_outside_allowlist" -> "mkdir";
  "tests/test_storage_security.py:test_archive_rejects_directory_outside_allowlist" -> "raises";
  "tests/test_storage_security.py:test_archive_rejects_world_writable_root" -> "ArtefactArchive";
  "tests/test_storage_security.py:test_archive_rejects_world_writable_root" -> "chmod";
  "tests/test_storage_security.py:test_archive_rejects_world_writable_root" -> "raises";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "FeedbackRecorder";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "OverlayConfig";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "exists";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "read_text";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "record";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "resolve";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "str";
  "tests/test_feedback.py:test_feedback_recorder_writes_entries" -> "strip";
  "tests/test_feedback.py:test_feedback_recorder_rejects_path_traversal" -> "FeedbackRecorder";
  "tests/test_feedback.py:test_feedback_recorder_rejects_path_traversal" -> "OverlayConfig";
  "tests/test_feedback.py:test_feedback_recorder_rejects_path_traversal" -> "raises";
  "tests/test_feedback.py:test_feedback_recorder_rejects_path_traversal" -> "record";
  "tests/test_feedback.py:test_feedback_recorder_rejects_path_traversal" -> "resolve";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "FeedbackRecorder";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "OverlayConfig";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "_StubConfluence";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "_StubJira";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "exists";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "loads";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "read_text";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "record";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "resolve";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "splitlines";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "str";
  "tests/test_feedback.py:test_feedback_forwarding_records_connector_outcomes" -> "strip";
  "tests/test_feedback.py:_StubJira.create_issue" -> "ConnectorOutcome";
  "tests/test_feedback.py:_StubJira.create_issue" -> "append";
  "tests/test_feedback.py:_StubJira.create_issue" -> "dict";
  "tests/test_feedback.py:_StubConfluence.create_page" -> "ConnectorOutcome";
  "tests/test_feedback.py:_StubConfluence.create_page" -> "append";
  "tests/test_feedback.py:_StubConfluence.create_page" -> "dict";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "EvidenceHub";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "OverlayConfig";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "Path";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "_minimal_pipeline_result";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "persist";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "resolve";
  "tests/test_evidence.py:test_evidence_hub_uses_allowlisted_root_and_sanitises_name" -> "startswith";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "EvidenceHub";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "OverlayConfig";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "Path";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "_minimal_pipeline_result";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "persist";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "resolve";
  "tests/test_evidence.py:test_evidence_hub_falls_back_to_default_bundle_name" -> "startswith";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "EvidenceHub";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "OverlayConfig";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "_minimal_pipeline_result";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "endswith";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "persist";
  "tests/test_evidence.py:test_evidence_hub_compresses_when_limit_configured" -> "resolve";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "FakeDecisionEngine";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "GoldenRegressionStore";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "approx";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "dumps";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "evaluate";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "run";
  "tests/test_golden_regression_store.py:test_evaluate_with_mock_engine" -> "write_text";
  "tests/test_golden_regression_store.py:FakeDecisionEngine.make_decision" -> "SimpleNamespace";
  "tests/test_golden_regression_store.py:FakeDecisionEngine.make_decision" -> "append";
  "tests/test_golden_regression_store.py:FakeDecisionEngine.make_decision" -> "get";
  "tests/test_demo_runner.py:test_run_demo_pipeline_demo_mode" -> "exists";
  "tests/test_demo_runner.py:test_run_demo_pipeline_demo_mode" -> "get";
  "tests/test_demo_runner.py:test_run_demo_pipeline_demo_mode" -> "run_demo_pipeline";
  "tests/test_demo_runner.py:test_run_demo_pipeline_enterprise_mode" -> "exists";
  "tests/test_demo_runner.py:test_run_demo_pipeline_enterprise_mode" -> "get";
  "tests/test_demo_runner.py:test_run_demo_pipeline_enterprise_mode" -> "run_demo_pipeline";
  "tests/test_no_wip_imports.py:test_no_wip_imports" -> "read_text";
  "tests/test_no_wip_imports.py:test_no_wip_imports" -> "rglob";
  "tests/test_ai_agents.py:test_ai_agent_advisor_detects_frameworks" -> "AIAgentAdvisor";
  "tests/test_ai_agents.py:test_ai_agent_advisor_detects_frameworks" -> "analyse";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "StubRequest";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "authenticate";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "authenticated_payload";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "cache_clear";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "invoke";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "run";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "setenv";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "usefixtures";
  "tests/test_api_dependencies.py:test_authenticated_payload_roundtrip" -> "validated_payload";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "StubRequest";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "_StubSettings";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "cache_clear";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "invoke";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "raises";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "run";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "setattr";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "setenv";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "usefixtures";
  "tests/test_api_dependencies.py:test_validated_payload_size_guard" -> "validated_payload";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "StubRequest";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "authenticate";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "cache_clear";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "get_settings";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "invoke";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "raises";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "run";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "setattr";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "setenv";
  "tests/test_api_dependencies.py:test_authenticate_invalid_token" -> "usefixtures";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "StubRequest";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "authenticate";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "cache_clear";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "invoke";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "raises";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "run";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "setattr";
  "tests/test_api_dependencies.py:test_authenticate_missing_header" -> "usefixtures";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "StubRequest";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "invoke";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "raises";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "run";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "setattr";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "usefixtures";
  "tests/test_api_dependencies.py:test_validated_payload_content_type" -> "validated_payload";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "StubRequest";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "invoke";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "raises";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "run";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "setattr";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "usefixtures";
  "tests/test_api_dependencies.py:test_validated_payload_requires_object" -> "validated_payload";
  "tests/test_api_dependencies.py:StubRequest.__init__" -> "SimpleNamespace";
  "tests/test_policy_opa.py:_evaluate_with_stub" -> "GateRequest";
  "tests/test_policy_opa.py:_evaluate_with_stub" -> "evaluate_gate";
  "tests/test_policy_opa.py:_evaluate_with_stub" -> "setattr";
  "tests/test_policy_opa.py:test_policy_blocks_when_opa_denies" -> "_StubEngine";
  "tests/test_policy_opa.py:test_policy_blocks_when_opa_denies" -> "_evaluate_with_stub";
  "tests/test_policy_opa.py:test_policy_blocks_when_opa_denies" -> "run_with_session";
  "tests/test_policy_opa.py:test_policy_allows_when_opa_passes" -> "_StubEngine";
  "tests/test_policy_opa.py:test_policy_allows_when_opa_passes" -> "_evaluate_with_stub";
  "tests/test_policy_opa.py:test_policy_allows_when_opa_passes" -> "run_with_session";
  "tests/test_policy_opa.py:_StubEngine.evaluate_policy" -> "append";
  "tests/test_policy_opa.py:_StubEngine.evaluate_policy" -> "dict";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "CVERecordSummary";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "NormalizedCVEFeed";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "NormalizedSARIF";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "NormalizedSBOM";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "Path";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "PipelineOrchestrator";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "SBOMComponent";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "SarifFinding";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "all";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "get";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "is_file";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "issubset";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "keys";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "len";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "load_overlay";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "parametrize";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "run";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "set";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "setdefault";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "setenv";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "str";
  "tests/test_feature_matrix.py:test_feature_matrix_alignment" -> "values";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "BytesIO";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "DictReader";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "InputNormalizer";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "PipelineOrchestrator";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "SpooledTemporaryFile";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "StringIO";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "TestClient";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "ZipFile";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "all";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "any";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "close";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "compress";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "create_app";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "dumps";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "encode";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "get";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "getvalue";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "isinstance";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "json";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "len";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "list";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "load_cve_feed";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "load_sarif";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "load_sbom";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "pop";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "post";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "run";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "seek";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "write";
  "tests/test_end_to_end.py:test_end_to_end_demo_pipeline" -> "writestr";
  "tests/test_end_to_end.py:test_api_rejects_missing_token" -> "TestClient";
  "tests/test_end_to_end.py:test_api_rejects_missing_token" -> "create_app";
  "tests/test_end_to_end.py:test_api_rejects_missing_token" -> "pop";
  "tests/test_end_to_end.py:test_api_rejects_missing_token" -> "post";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "Path";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "TestClient";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "create_app";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "delenv";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "dumps";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "json";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "lower";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "mkdir";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "post";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "resolve";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "rmtree";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "setenv";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "str";
  "tests/test_end_to_end.py:test_feedback_endpoint_rejects_invalid_payload" -> "write_text";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "BytesIO";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "InputNormalizer";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "Path";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "SpooledTemporaryFile";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "TestClient";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "ZipFile";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "append";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "b64encode";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "close";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "compress";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "create_app";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "decode";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "delenv";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "dumps";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "encode";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "getvalue";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "json";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "len";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "load_cve_feed";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "load_sarif";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "load_sbom";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "mkdir";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "post";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "range";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "resolve";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "rmtree";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "seek";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "setenv";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "str";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "urandom";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "write";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "write_text";
  "tests/test_end_to_end.py:test_large_compressed_uploads_stream_to_disk" -> "writestr";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "Path";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "endswith";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "get";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "isinstance";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "loads";
  "tests/test_postman_ci_sync.py:test_postman_collection_contains_alignment_scenarios" -> "read_text";
  "tests/test_new_backend_processing.py:clear_processing_modules" -> "fixture";
  "tests/test_new_backend_processing.py:clear_processing_modules" -> "list";
  "tests/test_new_backend_processing.py:clear_processing_modules" -> "pop";
  "tests/test_new_backend_processing.py:clear_processing_modules" -> "startswith";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "KnowledgeGraphProcessor";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "ModuleType";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "append";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "build_graph";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "extend";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "import_module";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "isinstance";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "list";
  "tests/test_new_backend_processing.py:test_knowledge_graph_processor_invokes_ctinexus" -> "setitem";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "DummyLimiter";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "ExplanationGenerator";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "ModuleType";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "_build_prompt";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "_ensure_client";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "append";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "generate";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "import_module";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "setattr";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "setitem";
  "tests/test_new_backend_processing.py:test_explanation_generator_uses_sentinel_gpt" -> "startswith";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "ModuleType";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "SarifAnalyzer";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "analyze";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "cls";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "get";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "import_module";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "setattr";
  "tests/test_new_backend_processing.py:test_sarif_analyzer_clusters_and_scores" -> "setitem";
  "tests/test_new_backend_processing.py:test_bayesian_network_inference_produces_posteriors" -> "approx";
  "tests/test_new_backend_processing.py:test_bayesian_network_inference_produces_posteriors" -> "attach_component_posterior";
  "tests/test_new_backend_processing.py:test_bayesian_network_inference_produces_posteriors" -> "get";
  "tests/test_new_backend_processing.py:test_bayesian_network_inference_produces_posteriors" -> "import_module";
  "tests/test_new_backend_processing.py:test_bayesian_network_inference_produces_posteriors" -> "update_probabilities";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "_path";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "approx";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "dumps";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "enrich_findings";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "get";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "len";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "parametrize";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "reload";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "setenv";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "str";
  "tests/test_feeds_enrichment.py:test_enrich_findings_populates_epss_and_kev" -> "write_text";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "Experience";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "_run";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "export_policy";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "get";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "get_instance";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "recommend_action";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "record_experience";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "reset_instance";
  "tests/test_rl_controller.py:test_rl_controller_updates_q_values" -> "run";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "BytesIO";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "EvidenceExportService";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "ZipFile";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "_run";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "build_bundle";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "dict";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "issubset";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "loads";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "namelist";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "read";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "run";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "set";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "setattr";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "staticmethod";
  "tests/test_evidence_export.py:test_evidence_export_creates_signed_bundle" -> "type";
  "tests/test_new_backend_api.py:client" -> "TestClient";
  "tests/test_new_backend_api.py:client" -> "create_app";
  "tests/test_new_backend_api.py:client" -> "fixture";
  "tests/test_new_backend_api.py:test_make_decision_success" -> "json";
  "tests/test_new_backend_api.py:test_make_decision_success" -> "post";
  "tests/test_new_backend_api.py:test_make_decision_validation_error" -> "any";
  "tests/test_new_backend_api.py:test_make_decision_validation_error" -> "json";
  "tests/test_new_backend_api.py:test_make_decision_validation_error" -> "post";
  "tests/test_new_backend_api.py:test_submit_feedback_success" -> "json";
  "tests/test_new_backend_api.py:test_submit_feedback_success" -> "post";
  "tests/test_new_backend_api.py:test_submit_feedback_mismatch" -> "json";
  "tests/test_new_backend_api.py:test_submit_feedback_mismatch" -> "post";
  "tests/test_new_backend_api.py:test_healthcheck" -> "get";
  "tests/test_new_backend_api.py:test_healthcheck" -> "json";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "CVERecordSummary";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "NormalizedSBOM";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "SBOMComponent";
  "tests/test_pipeline_matching.py:build_orchestrator_payload" -> "SarifFinding";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "CVERecordSummary";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "ImportError";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "InputNormalizer";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "SarifFinding";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "load_sbom";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "read_text";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "run";
  "tests/test_pipeline_matching.py:test_provider_specific_sbom_parser_enables_pipeline" -> "setattr";
  "tests/test_pipeline_matching.py:test_provider_specific_syft_parser" -> "ImportError";
  "tests/test_pipeline_matching.py:test_provider_specific_syft_parser" -> "InputNormalizer";
  "tests/test_pipeline_matching.py:test_provider_specific_syft_parser" -> "load_sbom";
  "tests/test_pipeline_matching.py:test_provider_specific_syft_parser" -> "read_text";
  "tests/test_pipeline_matching.py:test_provider_specific_syft_parser" -> "setattr";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "ImportError";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "InputNormalizer";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "load_sbom";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "raises";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "setattr";
  "tests/test_pipeline_matching.py:test_provider_parser_surfaces_error_code" -> "str";
  "tests/test_pipeline_matching.py:test_pipeline_crosswalk_reuses_precomputed_matches" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_crosswalk_reuses_precomputed_matches" -> "build_orchestrator_payload";
  "tests/test_pipeline_matching.py:test_pipeline_crosswalk_reuses_precomputed_matches" -> "run";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "NormalizedSBOM";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "SBOMComponent";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "get";
  "tests/test_pipeline_matching.py:test_crosswalk_retains_design_indices_for_duplicates" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_guardrail_evaluation_uses_overlay_policy" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_guardrail_evaluation_uses_overlay_policy" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_guardrail_evaluation_uses_overlay_policy" -> "build_orchestrator_payload";
  "tests/test_pipeline_matching.py:test_pipeline_guardrail_evaluation_uses_overlay_policy" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_emits_ai_agent_analysis_when_enabled" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_emits_ai_agent_analysis_when_enabled" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_emits_ai_agent_analysis_when_enabled" -> "build_orchestrator_payload";
  "tests/test_pipeline_matching.py:test_pipeline_emits_ai_agent_analysis_when_enabled" -> "get";
  "tests/test_pipeline_matching.py:test_pipeline_emits_ai_agent_analysis_when_enabled" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "CVERecordSummary";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "NormalizedSBOM";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "SBOMComponent";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "any";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "get";
  "tests/test_pipeline_matching.py:test_pipeline_emits_exploitability_summary" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "CVERecordSummary";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "NormalizedSBOM";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "SBOMComponent";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "SarifFinding";
  "tests/test_pipeline_matching.py:test_pipeline_supports_design_rows_with_name_column" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_respects_module_toggles" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_respects_module_toggles" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_respects_module_toggles" -> "build_orchestrator_payload";
  "tests/test_pipeline_matching.py:test_pipeline_respects_module_toggles" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_executes_custom_modules" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_executes_custom_modules" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_executes_custom_modules" -> "build_orchestrator_payload";
  "tests/test_pipeline_matching.py:test_pipeline_executes_custom_modules" -> "run";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "NormalizedCVEFeed";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "NormalizedSARIF";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "NormalizedSBOM";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "OverlayConfig";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "PipelineOrchestrator";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "get";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "next";
  "tests/test_pipeline_matching.py:test_pipeline_emits_iac_posture_summary" -> "run";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "CVERecordSummary";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "ExploitSignalEvaluator";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "NormalizedCVEFeed";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "any";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "evaluate";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_matches_boolean_and_probability" -> "get";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_returns_none_without_signals" -> "ExploitSignalEvaluator";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_returns_none_without_signals" -> "NormalizedCVEFeed";
  "tests/test_exploit_signals.py:test_exploit_signal_evaluator_returns_none_without_signals" -> "evaluate";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "CVERecordSummary";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "ExploitFeedRefresher";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "NormalizedCVEFeed";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "OverlayConfig";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "dumps";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "exists";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "refresh";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "str";
  "tests/test_exploit_signals.py:test_exploit_feed_refresher_enriches_records" -> "write_text";
  "tests/test_exploit_refresh.py:test_refresh_exploit_feeds" -> "append";
  "tests/test_exploit_refresh.py:test_refresh_exploit_feeds" -> "refresh_exploit_feeds";
  "tests/test_exploit_refresh.py:test_refresh_exploit_feeds" -> "setattr";
  "tests/test_golden_regression.py:reset_golden_regression_store" -> "fixture";
  "tests/test_golden_regression.py:reset_golden_regression_store" -> "reset_instance";
  "tests/test_golden_regression.py:test_store_lookup_matches_service_and_cve" -> "get_instance";
  "tests/test_golden_regression.py:test_store_lookup_matches_service_and_cve" -> "lookup_cases";
  "tests/test_golden_regression.py:test_regression_validation_passes_with_historical_support" -> "DecisionContext";
  "tests/test_golden_regression.py:test_regression_validation_passes_with_historical_support" -> "DecisionEngine";
  "tests/test_golden_regression.py:test_regression_validation_passes_with_historical_support" -> "_real_golden_regression_validation";
  "tests/test_golden_regression.py:test_regression_validation_passes_with_historical_support" -> "run";
  "tests/test_golden_regression.py:test_regression_validation_surfaces_failures" -> "DecisionContext";
  "tests/test_golden_regression.py:test_regression_validation_surfaces_failures" -> "DecisionEngine";
  "tests/test_golden_regression.py:test_regression_validation_surfaces_failures" -> "_real_golden_regression_validation";
  "tests/test_golden_regression.py:test_regression_validation_surfaces_failures" -> "run";
  "tests/test_golden_regression.py:test_regression_validation_handles_missing_coverage" -> "DecisionContext";
  "tests/test_golden_regression.py:test_regression_validation_handles_missing_coverage" -> "DecisionEngine";
  "tests/test_golden_regression.py:test_regression_validation_handles_missing_coverage" -> "_real_golden_regression_validation";
  "tests/test_golden_regression.py:test_regression_validation_handles_missing_coverage" -> "run";
  "tests/test_vex_ingestion.py:test_vex_ingestion_suppresses_not_affected" -> "apply_assertions";
  "tests/test_vex_ingestion.py:test_vex_ingestion_suppresses_not_affected" -> "get";
  "tests/test_vex_ingestion.py:test_vex_ingestion_suppresses_not_affected" -> "ingest_document";
  "tests/test_vex_ingestion.py:test_vex_ingestion_suppresses_not_affected" -> "len";
  "tests/test_vex_ingestion.py:test_vex_ingestion_suppresses_not_affected" -> "setattr";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "AnalyticsStore";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "glob";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "list";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "load_dashboard";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "load_run";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "loads";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "read_text";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "record_exploit_snapshot";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "record_feedback_event";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "record_feedback_outcomes";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "record_forecast";
  "tests/test_analytics_store.py:test_analytics_store_persist_and_load" -> "record_ticket_metrics";
  "tests/test_normalizers.py:_reset_converter" -> "fixture";
  "tests/test_normalizers.py:_reset_converter" -> "setattr";
  "tests/test_normalizers.py:test_load_sarif_uses_embedded_payload_when_converter_missing" -> "InputNormalizer";
  "tests/test_normalizers.py:test_load_sarif_uses_embedded_payload_when_converter_missing" -> "_build_sarif_document";
  "tests/test_normalizers.py:test_load_sarif_uses_embedded_payload_when_converter_missing" -> "dumps";
  "tests/test_normalizers.py:test_load_sarif_uses_embedded_payload_when_converter_missing" -> "load_sarif";
  "tests/test_normalizers.py:test_load_sarif_logs_actionable_error_without_converter" -> "InputNormalizer";
  "tests/test_normalizers.py:test_load_sarif_logs_actionable_error_without_converter" -> "at_level";
  "tests/test_normalizers.py:test_load_sarif_logs_actionable_error_without_converter" -> "dumps";
  "tests/test_normalizers.py:test_load_sarif_logs_actionable_error_without_converter" -> "load_sarif";
  "tests/test_normalizers.py:test_load_sarif_logs_actionable_error_without_converter" -> "raises";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "NoEncryption";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "decode";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "generate_private_key";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "private_bytes";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "public_bytes";
  "tests/test_crypto_signing.py:_generate_rsa_keypair" -> "public_key";
  "tests/test_crypto_signing.py:signing_env" -> "_generate_rsa_keypair";
  "tests/test_crypto_signing.py:signing_env" -> "fixture";
  "tests/test_crypto_signing.py:signing_env" -> "reset_key_provider_cache";
  "tests/test_crypto_signing.py:signing_env" -> "setenv";
  "tests/test_crypto_signing.py:test_rsa_sign_round_trip" -> "dumps";
  "tests/test_crypto_signing.py:test_rsa_sign_round_trip" -> "encode";
  "tests/test_crypto_signing.py:test_rsa_sign_round_trip" -> "rsa_sign";
  "tests/test_crypto_signing.py:test_rsa_sign_round_trip" -> "rsa_verify";
  "tests/test_crypto_signing.py:test_rsa_verify_rejects_tampered_payload" -> "dumps";
  "tests/test_crypto_signing.py:test_rsa_verify_rejects_tampered_payload" -> "encode";
  "tests/test_crypto_signing.py:test_rsa_verify_rejects_tampered_payload" -> "rsa_sign";
  "tests/test_crypto_signing.py:test_rsa_verify_rejects_tampered_payload" -> "rsa_verify";
  "tests/test_crypto_signing.py:test_rsa_verify_handles_rotated_fingerprints" -> "get_key_provider";
  "tests/test_crypto_signing.py:test_rsa_verify_handles_rotated_fingerprints" -> "rotate";
  "tests/test_crypto_signing.py:test_rsa_verify_handles_rotated_fingerprints" -> "rsa_sign";
  "tests/test_crypto_signing.py:test_rsa_verify_handles_rotated_fingerprints" -> "rsa_verify";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "RateLimitMiddleware";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "cache_clear";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "fixture";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "import_module";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "reload";
  "tests/test_rate_limit.py:fixture_rate_limiter" -> "setenv";
  "tests/test_rate_limit.py:test_rate_limit_blocks_after_threshold" -> "_consume_token";
  "tests/test_rate_limit.py:test_rate_limit_blocks_after_threshold" -> "all";
  "tests/test_rate_limit.py:test_rate_limit_blocks_after_threshold" -> "append";
  "tests/test_rate_limit.py:test_rate_limit_blocks_after_threshold" -> "range";
  "tests/test_rate_limit.py:test_rate_limit_blocks_after_threshold" -> "run";
  "tests/test_http_metrics.py:reset_metrics" -> "fixture";
  "tests/test_http_metrics.py:reset_metrics" -> "reset_runtime_stats";
  "tests/test_http_metrics.py:_build_request" -> "SimpleNamespace";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "PerformanceMiddleware";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "Response";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "_build_request";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "dispatch";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "get_error_ratio";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "get_hot_path_latency_us";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "get_inflight";
  "tests/test_http_metrics.py:test_successful_hot_path_updates_latency_and_ratio" -> "run";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "HTTPException";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "PerformanceMiddleware";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "_build_request";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "dispatch";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "get_error_ratio";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "get_hot_path_latency_us";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "get_inflight";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "raises";
  "tests/test_http_metrics.py:test_policy_errors_drive_error_ratio" -> "run";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "PerformanceMiddleware";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "Response";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "_build_request";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "dispatch";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "get_error_ratio";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "get_hot_path_latency_us";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "get_inflight";
  "tests/test_http_metrics.py:test_evidence_requests_are_classified_correctly" -> "run";
  "tests/test_overlay_configuration.py:overlay_file" -> "dumps";
  "tests/test_overlay_configuration.py:overlay_file" -> "write_text";
  "tests/test_overlay_configuration.py:test_load_overlay_merges_profile_and_defaults" -> "isinstance";
  "tests/test_overlay_configuration.py:test_load_overlay_merges_profile_and_defaults" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_load_overlay_merges_profile_and_defaults" -> "to_sanitised_dict";
  "tests/test_overlay_configuration.py:test_environment_variable_override" -> "delenv";
  "tests/test_overlay_configuration.py:test_environment_variable_override" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_environment_variable_override" -> "setenv";
  "tests/test_overlay_configuration.py:test_environment_variable_override" -> "str";
  "tests/test_overlay_configuration.py:test_guardrail_defaults_when_missing" -> "OverlayConfig";
  "tests/test_overlay_configuration.py:test_guardrail_defaults_when_missing" -> "is_module_enabled";
  "tests/test_overlay_configuration.py:test_module_defaults_and_custom_specs" -> "OverlayConfig";
  "tests/test_overlay_configuration.py:test_module_defaults_and_custom_specs" -> "is_module_enabled";
  "tests/test_overlay_configuration.py:test_overlay_rejects_unknown_keys" -> "dumps";
  "tests/test_overlay_configuration.py:test_overlay_rejects_unknown_keys" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_overlay_rejects_unknown_keys" -> "raises";
  "tests/test_overlay_configuration.py:test_overlay_rejects_unknown_keys" -> "write_text";
  "tests/test_overlay_configuration.py:test_overlay_rejects_outside_data_directory" -> "dumps";
  "tests/test_overlay_configuration.py:test_overlay_rejects_outside_data_directory" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_overlay_rejects_outside_data_directory" -> "raises";
  "tests/test_overlay_configuration.py:test_overlay_rejects_outside_data_directory" -> "write_text";
  "tests/test_overlay_configuration.py:test_token_strategy_requires_environment" -> "delenv";
  "tests/test_overlay_configuration.py:test_token_strategy_requires_environment" -> "dumps";
  "tests/test_overlay_configuration.py:test_token_strategy_requires_environment" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_token_strategy_requires_environment" -> "raises";
  "tests/test_overlay_configuration.py:test_token_strategy_requires_environment" -> "write_text";
  "tests/test_overlay_configuration.py:test_compliance_controls_reject_unknown_fields" -> "dumps";
  "tests/test_overlay_configuration.py:test_compliance_controls_reject_unknown_fields" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_compliance_controls_reject_unknown_fields" -> "raises";
  "tests/test_overlay_configuration.py:test_compliance_controls_reject_unknown_fields" -> "write_text";
  "tests/test_overlay_configuration.py:test_policy_actions_reject_unknown_fields" -> "dumps";
  "tests/test_overlay_configuration.py:test_policy_actions_reject_unknown_fields" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_policy_actions_reject_unknown_fields" -> "raises";
  "tests/test_overlay_configuration.py:test_policy_actions_reject_unknown_fields" -> "write_text";
  "tests/test_overlay_configuration.py:test_policy_action_triggers_normalised" -> "dumps";
  "tests/test_overlay_configuration.py:test_policy_action_triggers_normalised" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_policy_action_triggers_normalised" -> "write_text";
  "tests/test_overlay_configuration.py:test_policy_engine_overlay_round_trip" -> "dumps";
  "tests/test_overlay_configuration.py:test_policy_engine_overlay_round_trip" -> "get";
  "tests/test_overlay_configuration.py:test_policy_engine_overlay_round_trip" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_policy_engine_overlay_round_trip" -> "to_sanitised_dict";
  "tests/test_overlay_configuration.py:test_policy_engine_overlay_round_trip" -> "write_text";
  "tests/test_overlay_configuration.py:test_overlay_toggles_round_trip" -> "dumps";
  "tests/test_overlay_configuration.py:test_overlay_toggles_round_trip" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_overlay_toggles_round_trip" -> "to_sanitised_dict";
  "tests/test_overlay_configuration.py:test_overlay_toggles_round_trip" -> "write_text";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_invalid_timeout" -> "dumps";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_invalid_timeout" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_invalid_timeout" -> "raises";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_invalid_timeout" -> "write_text";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_unknown_fields" -> "dumps";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_unknown_fields" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_unknown_fields" -> "raises";
  "tests/test_overlay_configuration.py:test_policy_engine_rejects_unknown_fields" -> "write_text";
  "tests/test_overlay_configuration.py:test_signing_configuration_round_trip" -> "dumps";
  "tests/test_overlay_configuration.py:test_signing_configuration_round_trip" -> "load_overlay";
  "tests/test_overlay_configuration.py:test_signing_configuration_round_trip" -> "to_sanitised_dict";
  "tests/test_overlay_configuration.py:test_signing_configuration_round_trip" -> "write_text";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "SimpleNamespace";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "_run";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "classmethod";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "run";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "setattr";
  "tests/test_tenant_rbac.py:test_user_has_tenant_role" -> "user_has_tenant_role";
  "tests/test_run_registry.py:_prepare" -> "resolve_run";
  "tests/test_run_registry.py:_prepare" -> "setattr";
  "tests/test_run_registry.py:test_resolve_run_creates_expected_structure" -> "_prepare";
  "tests/test_run_registry.py:test_resolve_run_creates_expected_structure" -> "exists";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "_prepare";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "loads";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "raises";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "read_text";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "save_input";
  "tests/test_run_registry.py:test_save_input_and_write_output" -> "write_output";
  "tests/test_run_registry.py:test_reopen_run" -> "_prepare";
  "tests/test_run_registry.py:test_reopen_run" -> "exists";
  "tests/test_run_registry.py:test_reopen_run" -> "reopen_run";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "_prepare";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "exists";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "loads";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "read_text";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "strip";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "verify_manifest";
  "tests/test_run_registry.py:test_signed_outputs_create_transparency_index" -> "write_output";
  "tests/test_postman_phase_collections.py:_load_json" -> "Path";
  "tests/test_postman_phase_collections.py:_load_json" -> "exists";
  "tests/test_postman_phase_collections.py:_load_json" -> "loads";
  "tests/test_postman_phase_collections.py:_load_json" -> "read_text";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "_load_json";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "endswith";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "get";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "isinstance";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "items";
  "tests/test_postman_phase_collections.py:test_phase_one_health_collection_targets_core_probes" -> "next";
  "tests/test_postman_phase_collections.py:test_phase_two_cicd_collection_covers_allow_block_defer" -> "_load_json";
  "tests/test_postman_phase_collections.py:test_phase_two_cicd_collection_covers_allow_block_defer" -> "get";
  "tests/test_postman_phase_collections.py:test_phase_two_cicd_collection_covers_allow_block_defer" -> "isinstance";
  "tests/test_postman_phase_collections.py:test_phase_two_cicd_collection_covers_allow_block_defer" -> "items";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "_load_json";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "endswith";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "extend";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "get";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "isinstance";
  "tests/test_postman_phase_collections.py:test_phase_three_performance_collection_targets_hot_path" -> "join";
  "tests/test_postman_phase_collections.py:test_bank_api_script_references_all_collections" -> "Path";
  "tests/test_postman_phase_collections.py:test_bank_api_script_references_all_collections" -> "exists";
  "tests/test_postman_phase_collections.py:test_bank_api_script_references_all_collections" -> "read_text";
  "tests/test_real_opa_engine_factory.py:test_factory_uses_production_engine" -> "_Settings";
  "tests/test_real_opa_engine_factory.py:test_factory_uses_production_engine" -> "create";
  "tests/test_real_opa_engine_factory.py:test_factory_uses_production_engine" -> "isinstance";
  "tests/test_real_opa_engine_factory.py:test_factory_uses_production_engine" -> "setattr";
  "tests/test_real_opa_engine_factory.py:test_factory_returns_demo_when_flag_enabled" -> "DemoSettings";
  "tests/test_real_opa_engine_factory.py:test_factory_returns_demo_when_flag_enabled" -> "create";
  "tests/test_real_opa_engine_factory.py:test_factory_returns_demo_when_flag_enabled" -> "isinstance";
  "tests/test_real_opa_engine_factory.py:test_factory_returns_demo_when_flag_enabled" -> "setattr";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "ProbabilisticForecastEngine";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "abs";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "any";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "evaluate";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "keys";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "set";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "sum";
  "tests/test_probabilistic.py:test_probabilistic_engine_generates_posterior_and_forecast" -> "values";
  "tests/test_probabilistic.py:test_probabilistic_engine_respects_component_limit" -> "ProbabilisticForecastEngine";
  "tests/test_probabilistic.py:test_probabilistic_engine_respects_component_limit" -> "evaluate";
  "tests/test_probabilistic.py:test_probabilistic_engine_respects_component_limit" -> "len";
  "tests/test_probabilistic.py:test_probabilistic_calibration_updates_priors_and_transitions" -> "ProbabilisticForecastEngine";
  "tests/test_probabilistic.py:test_probabilistic_calibration_updates_priors_and_transitions" -> "calibrate";
  "tests/test_probabilistic.py:test_probabilistic_transition_validation_detects_invalid" -> "ProbabilisticForecastEngine";
  "tests/test_probabilistic.py:test_probabilistic_transition_validation_detects_invalid" -> "validate_transitions";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "DummyResponse";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "OverlayConfig";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "Path";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "PolicyAutomation";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "all";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "any";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "append";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "execute";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "glob";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "len";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "list";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "plan";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "setattr";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "setenv";
  "tests/test_policy_connectors.py:test_policy_automation_executes_connectors" -> "startswith";
  "tests/test_policy_connectors.py:DummyResponse.__init__" -> "dumps";
  "tests/test_policy_connectors.py:DummyResponse.json" -> "dict";
  "tests/test_enterprise_compliance.py:test_compliance_engine_evaluates_frameworks" -> "ComplianceEngine";
  "tests/test_enterprise_compliance.py:test_compliance_engine_evaluates_frameworks" -> "evaluate";
  "tests/test_cli_stage_run.py:_pythonpath_env" -> "append";
  "tests/test_cli_stage_run.py:_pythonpath_env" -> "copy";
  "tests/test_cli_stage_run.py:_pythonpath_env" -> "get";
  "tests/test_cli_stage_run.py:_pythonpath_env" -> "join";
  "tests/test_cli_stage_run.py:_pythonpath_env" -> "str";
  "tests/test_cli_stage_run.py:_invoke_stage" -> "extend";
  "tests/test_cli_stage_run.py:_invoke_stage" -> "run";
  "tests/test_cli_stage_run.py:_invoke_stage" -> "str";
  "tests/test_cli_stage_run.py:_latest_run" -> "is_dir";
  "tests/test_cli_stage_run.py:_latest_run" -> "iterdir";
  "tests/test_cli_stage_run.py:_latest_run" -> "loads";
  "tests/test_cli_stage_run.py:_latest_run" -> "read_text";
  "tests/test_cli_stage_run.py:_latest_run" -> "startswith";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "_invoke_stage";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "_latest_run";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "_pythonpath_env";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "exists";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "get";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "isinstance";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "loads";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "read_text";
  "tests/test_cli_stage_run.py:test_stage_run_materialises_canonical_outputs" -> "startswith";
  "tests/test_cli_stage_run.py:test_requirements_stage_starts_new_run" -> "_invoke_stage";
  "tests/test_cli_stage_run.py:test_requirements_stage_starts_new_run" -> "_latest_run";
  "tests/test_cli_stage_run.py:test_requirements_stage_starts_new_run" -> "_pythonpath_env";
  "tests/test_cli_stage_run.py:test_design_stage_reuses_current_run" -> "_invoke_stage";
  "tests/test_cli_stage_run.py:test_design_stage_reuses_current_run" -> "_latest_run";
  "tests/test_cli_stage_run.py:test_design_stage_reuses_current_run" -> "_pythonpath_env";
  "tests/test_explainability_service.py:test_explainability_service_generates_contributions" -> "ExplainabilityService";
  "tests/test_explainability_service.py:test_explainability_service_generates_contributions" -> "approx";
  "tests/test_explainability_service.py:test_explainability_service_generates_contributions" -> "enrich_findings";
  "tests/test_explainability_service.py:test_explainability_service_generates_contributions" -> "explain";
  "tests/test_explainability_service.py:test_explainability_service_generates_contributions" -> "prime_baseline";
  "tests/test_policy_kevs.py:_execute_with_session" -> "SessionLocal";
  "tests/test_policy_kevs.py:_execute_with_session" -> "begin";
  "tests/test_policy_kevs.py:_execute_with_session" -> "create_async_engine";
  "tests/test_policy_kevs.py:_execute_with_session" -> "dispose";
  "tests/test_policy_kevs.py:_execute_with_session" -> "run_sync";
  "tests/test_policy_kevs.py:_execute_with_session" -> "sessionmaker";
  "tests/test_policy_kevs.py:_execute_with_session" -> "test_fn";
  "tests/test_policy_kevs.py:run_with_session" -> "_execute_with_session";
  "tests/test_policy_kevs.py:run_with_session" -> "run";
  "tests/test_policy_kevs.py:test_kevs_block_without_waiver" -> "GateRequest";
  "tests/test_policy_kevs.py:test_kevs_block_without_waiver" -> "any";
  "tests/test_policy_kevs.py:test_kevs_block_without_waiver" -> "evaluate_gate";
  "tests/test_policy_kevs.py:test_kevs_block_without_waiver" -> "lower";
  "tests/test_policy_kevs.py:test_kevs_block_without_waiver" -> "run_with_session";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "GateRequest";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "WaiverCreate";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "create_waiver";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "evaluate_gate";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "now";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "run_with_session";
  "tests/test_policy_kevs.py:test_kevs_allow_with_active_waiver" -> "timedelta";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "callable";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "get";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "isinstance";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "items";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "setattr";
  "tests/test_policy_kevs.py:_BaseSettings.__init__" -> "startswith";
  "tests/test_policy_kevs.py:_BaseSettings.model_dump" -> "dir";
  "tests/test_policy_kevs.py:_BaseSettings.model_dump" -> "getattr";
  "tests/test_policy_kevs.py:_BaseSettings.model_dump" -> "isupper";
  "tests/test_ci_adapters.py:_engine" -> "ComplianceEngine";
  "tests/test_ci_adapters.py:_engine" -> "DecisionEngine";
  "tests/test_ci_adapters.py:_engine" -> "EvidenceStore";
  "tests/test_ci_adapters.py:test_github_webhook_comment" -> "GitHubCIAdapter";
  "tests/test_ci_adapters.py:test_github_webhook_comment" -> "_engine";
  "tests/test_ci_adapters.py:test_github_webhook_comment" -> "get";
  "tests/test_ci_adapters.py:test_github_webhook_comment" -> "handle_webhook";
  "tests/test_ci_adapters.py:test_github_webhook_comment" -> "verify_manifest";
  "tests/test_ci_adapters.py:test_jenkins_signed_response" -> "JenkinsCIAdapter";
  "tests/test_ci_adapters.py:test_jenkins_signed_response" -> "_engine";
  "tests/test_ci_adapters.py:test_jenkins_signed_response" -> "ingest";
  "tests/test_ci_adapters.py:test_jenkins_signed_response" -> "items";
  "tests/test_ci_adapters.py:test_jenkins_signed_response" -> "verify_manifest";
  "tests/test_ci_adapters.py:test_sonarqube_ingest_top_factors" -> "SonarQubeAdapter";
  "tests/test_ci_adapters.py:test_sonarqube_ingest_top_factors" -> "_engine";
  "tests/test_ci_adapters.py:test_sonarqube_ingest_top_factors" -> "ingest";
  "tests/test_ci_adapters.py:test_sonarqube_ingest_top_factors" -> "len";
  "tests/test_ci_adapters.py:test_sonarqube_ingest_top_factors" -> "sorted";
  "tests/sample_modules.py:record_outcome" -> "append";
  "tests/sample_modules.py:record_outcome" -> "get";
  "tests/sample_modules.py:record_outcome" -> "isinstance";
  "tests/sample_modules.py:record_outcome" -> "setdefault";
  "tests/test_id_allocator.py:test_ensure_ids_mints_app_and_component_ids" -> "_sample_design";
  "tests/test_id_allocator.py:test_ensure_ids_mints_app_and_component_ids" -> "ensure_ids";
  "tests/test_id_allocator.py:test_ensure_ids_mints_app_and_component_ids" -> "startswith";
  "tests/test_id_allocator.py:test_ensure_ids_is_deterministic" -> "_sample_design";
  "tests/test_id_allocator.py:test_ensure_ids_is_deterministic" -> "deepcopy";
  "tests/test_id_allocator.py:test_ensure_ids_is_deterministic" -> "ensure_ids";
  "tests/test_id_allocator.py:test_ensure_ids_is_deterministic" -> "get";
  "tests/test_compliance_rollup.py:test_compliance_rollup_counts" -> "ComplianceEngine";
  "tests/test_compliance_rollup.py:test_compliance_rollup_counts" -> "evaluate";
  "tests/test_compliance_rollup.py:test_compliance_rollup_counts" -> "keys";
  "tests/test_compliance_rollup.py:test_compliance_rollup_counts" -> "set";
  "tests/test_compliance_rollup.py:test_opa_bridge_skips_without_binary" -> "ComplianceEngine";
  "tests/test_compliance_rollup.py:test_opa_bridge_skips_without_binary" -> "evaluate";
  "tests/test_cli.py:_write_json" -> "dumps";
  "tests/test_cli.py:_write_json" -> "write_text";
  "tests/test_cli.py:test_cli_run_pipeline" -> "Path";
  "tests/test_cli.py:test_cli_run_pipeline" -> "_write_json";
  "tests/test_cli.py:test_cli_run_pipeline" -> "delenv";
  "tests/test_cli.py:test_cli_run_pipeline" -> "get";
  "tests/test_cli.py:test_cli_run_pipeline" -> "getenv";
  "tests/test_cli.py:test_cli_run_pipeline" -> "iterdir";
  "tests/test_cli.py:test_cli_run_pipeline" -> "list";
  "tests/test_cli.py:test_cli_run_pipeline" -> "loads";
  "tests/test_cli.py:test_cli_run_pipeline" -> "main";
  "tests/test_cli.py:test_cli_run_pipeline" -> "read_text";
  "tests/test_cli.py:test_cli_run_pipeline" -> "readouterr";
  "tests/test_cli.py:test_cli_run_pipeline" -> "setenv";
  "tests/test_cli.py:test_cli_run_pipeline" -> "str";
  "tests/test_cli.py:test_cli_run_pipeline" -> "write_text";
  "tests/test_cli.py:test_cli_show_overlay" -> "Path";
  "tests/test_cli.py:test_cli_show_overlay" -> "loads";
  "tests/test_cli.py:test_cli_show_overlay" -> "main";
  "tests/test_cli.py:test_cli_show_overlay" -> "readouterr";
  "tests/test_cli.py:test_cli_show_overlay" -> "setenv";
  "tests/test_cli.py:test_cli_show_overlay" -> "str";
  "tests/test_cli.py:test_cli_train_forecast" -> "_write_json";
  "tests/test_cli.py:test_cli_train_forecast" -> "loads";
  "tests/test_cli.py:test_cli_train_forecast" -> "main";
  "tests/test_cli.py:test_cli_train_forecast" -> "read_text";
  "tests/test_cli.py:test_cli_train_forecast" -> "readouterr";
  "tests/test_cli.py:test_cli_train_forecast" -> "str";
  "tests/test_cli.py:test_cli_demo_command" -> "exists";
  "tests/test_cli.py:test_cli_demo_command" -> "get";
  "tests/test_cli.py:test_cli_demo_command" -> "loads";
  "tests/test_cli.py:test_cli_demo_command" -> "main";
  "tests/test_cli.py:test_cli_demo_command" -> "read_text";
  "tests/test_cli.py:test_cli_demo_command" -> "readouterr";
  "tests/test_cli.py:test_cli_demo_command" -> "setenv";
  "tests/test_cli.py:test_cli_demo_command" -> "str";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "cache_clear";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "delenv";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "get_settings";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "raises";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "resolve_allowed_origins";
  "tests/test_secure_defaults.py:test_production_requires_allowed_origins" -> "setenv";
  "tests/test_ssdlc_runner.py:test_overlay_merge" -> "_load_overlay";
  "tests/test_ssdlc_runner.py:test_overlay_merge" -> "_overlay_for_stage";
  "tests/test_ssdlc_runner.py:test_overlay_merge" -> "write_text";
  "tests/test_ssdlc_runner.py:test_overlay_requires_mapping" -> "_load_overlay";
  "tests/test_ssdlc_runner.py:test_overlay_requires_mapping" -> "raises";
  "tests/test_ssdlc_runner.py:test_overlay_requires_mapping" -> "write_text";
  "tests/test_ssdlc_runner.py:test_ensure_inputs_missing" -> "_ensure_inputs";
  "tests/test_ssdlc_runner.py:test_ensure_inputs_missing" -> "raises";
  "tests/test_ssdlc_runner.py:test_ensure_inputs_missing" -> "setattr";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "exists";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "keys";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "main";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "mkdir";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "parametrize";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "sorted";
  "tests/test_ssdlc_runner.py:test_individual_stage_outputs" -> "str";
  "tests/test_ssdlc_runner.py:test_run_all_generates_everything" -> "exists";
  "tests/test_ssdlc_runner.py:test_run_all_generates_everything" -> "main";
  "tests/test_ssdlc_runner.py:test_run_all_generates_everything" -> "str";
  "tests/test_ssdlc_runner.py:test_run_all_generates_everything" -> "values";
  "tests/test_design_context_injector.py:_code" -> "hasattr";
  "tests/test_design_context_injector.py:_code" -> "replace";
  "tests/test_design_context_injector.py:_code" -> "split";
  "tests/test_design_context_injector.py:_code" -> "str";
  "tests/test_design_context_injector.py:_code" -> "upper";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "Decision";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "DesignContextInjector";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "DictReader";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "_code";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "calculate_priors";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "endswith";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "evaluate";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "next";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "open";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "search";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "split";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "startswith";
  "tests/test_design_context_injector.py:test_calculate_priors_matches_ssvc_outcomes" -> "zip";
  "tests/test_cors_jwt.py:test_cors_origins_applied" -> "create_app";
  "tests/test_cors_jwt.py:test_cors_origins_applied" -> "setenv";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "decode";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "fromtimestamp";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "generate_access_token";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "setattr";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "timedelta";
  "tests/test_cors_jwt.py:test_generate_access_token_expiry" -> "utcnow";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "ComplianceEngine";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "DecisionEngine";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "EvidenceStore";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "evaluate";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "sorted";
  "tests/test_explainability.py:test_top_factors_deterministic" -> "startswith";
  "tests/test_explainability.py:test_decision_engine_compliance_rollup_and_marketplace" -> "ComplianceEngine";
  "tests/test_explainability.py:test_decision_engine_compliance_rollup_and_marketplace" -> "DecisionEngine";
  "tests/test_explainability.py:test_decision_engine_compliance_rollup_and_marketplace" -> "EvidenceStore";
  "tests/test_explainability.py:test_decision_engine_compliance_rollup_and_marketplace" -> "any";
  "tests/test_explainability.py:test_decision_engine_compliance_rollup_and_marketplace" -> "evaluate";
  "tests/conftest.py:signing_env" -> "NoEncryption";
  "tests/conftest.py:signing_env" -> "cache_clear";
  "tests/conftest.py:signing_env" -> "decode";
  "tests/conftest.py:signing_env" -> "generate_private_key";
  "tests/conftest.py:signing_env" -> "pop";
  "tests/conftest.py:signing_env" -> "private_bytes";
  "tests/conftest.py:signing_env" -> "setenv";
  "tests/conftest.py:pytest_addoption" -> "addoption";
  "tests/conftest.py:pytest_addoption" -> "getgroup";
  "tests/conftest.py:pytest_configure" -> "SimpleCoverage";
  "tests/conftest.py:pytest_configure" -> "getoption";
  "tests/conftest.py:pytest_configure" -> "start";
  "tests/conftest.py:pytest_unconfigure" -> "UsageError";
  "tests/conftest.py:pytest_unconfigure" -> "getattr";
  "tests/conftest.py:pytest_unconfigure" -> "getoption";
  "tests/conftest.py:pytest_unconfigure" -> "lower";
  "tests/conftest.py:pytest_unconfigure" -> "open";
  "tests/conftest.py:pytest_unconfigure" -> "report";
  "tests/conftest.py:pytest_unconfigure" -> "stop";
  "tests/conftest.py:pytest_unconfigure" -> "str";
  "tests/conftest.py:pytest_unconfigure" -> "xml_report";
  "tests/conftest.py:SimpleCoverage.__init__" -> "Path";
  "tests/conftest.py:SimpleCoverage.__init__" -> "add";
  "tests/conftest.py:SimpleCoverage.__init__" -> "exists";
  "tests/conftest.py:SimpleCoverage.__init__" -> "is_absolute";
  "tests/conftest.py:SimpleCoverage.__init__" -> "is_dir";
  "tests/conftest.py:SimpleCoverage.__init__" -> "is_file";
  "tests/conftest.py:SimpleCoverage.__init__" -> "replace";
  "tests/conftest.py:SimpleCoverage.__init__" -> "resolve";
  "tests/conftest.py:SimpleCoverage.__init__" -> "rglob";
  "tests/conftest.py:SimpleCoverage.__init__" -> "set";
  "tests/conftest.py:SimpleCoverage.__init__" -> "str";
  "tests/conftest.py:SimpleCoverage._trace" -> "_should_track";
  "tests/conftest.py:SimpleCoverage._trace" -> "add";
  "tests/conftest.py:SimpleCoverage._trace" -> "set";
  "tests/conftest.py:SimpleCoverage._trace" -> "setdefault";
  "tests/conftest.py:SimpleCoverage.start" -> "settrace";
  "tests/conftest.py:SimpleCoverage.stop" -> "settrace";
  "tests/conftest.py:SimpleCoverage._compute" -> "append";
  "tests/conftest.py:SimpleCoverage._compute" -> "enumerate";
  "tests/conftest.py:SimpleCoverage._compute" -> "get";
  "tests/conftest.py:SimpleCoverage._compute" -> "len";
  "tests/conftest.py:SimpleCoverage._compute" -> "open";
  "tests/conftest.py:SimpleCoverage._compute" -> "set";
  "tests/conftest.py:SimpleCoverage._compute" -> "sorted";
  "tests/conftest.py:SimpleCoverage._compute" -> "startswith";
  "tests/conftest.py:SimpleCoverage._compute" -> "strip";
  "tests/conftest.py:SimpleCoverage.report" -> "_compute";
  "tests/conftest.py:SimpleCoverage.report" -> "set";
  "tests/conftest.py:SimpleCoverage.report" -> "sorted";
  "tests/conftest.py:SimpleCoverage.report" -> "write";
  "tests/conftest.py:SimpleCoverage.xml_report" -> "_compute";
  "tests/conftest.py:SimpleCoverage.xml_report" -> "open";
  "tests/conftest.py:SimpleCoverage.xml_report" -> "write";
  "tests/test_compliance.py:test_evaluate_compliance_mapping" -> "evaluate_compliance";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "BayesianPriorMapping";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "SSVCContext";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "approx";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "compute_priors";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "import_module";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "reload";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "run";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "set";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "sum";
  "tests/test_processing_layer_fallbacks.py:test_bayesian_mapping_fallback_returns_distribution" -> "values";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "MarkovState";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "MarkovTransitionMatrixBuilder";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "approx";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "datetime";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "import_module";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "predict_state_evolution";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "reload";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "run";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "sum";
  "tests/test_processing_layer_fallbacks.py:test_markov_builder_fallback_uses_epss_and_kev_bias" -> "values";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "RateLimitMiddleware";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "_consume_token";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "cache_clear";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "run";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "sequence";
  "tests/test_ops_hardening.py:test_rate_limit_enforced" -> "setenv";
  "tests/test_ops_hardening.py:test_production_requires_allowed_origins" -> "cache_clear";
  "tests/test_ops_hardening.py:test_production_requires_allowed_origins" -> "create_app";
  "tests/test_ops_hardening.py:test_production_requires_allowed_origins" -> "delenv";
  "tests/test_ops_hardening.py:test_production_requires_allowed_origins" -> "raises";
  "tests/test_ops_hardening.py:test_production_requires_allowed_origins" -> "setenv";
  "tests/test_backend_security.py:_make_overlay" -> "OverlayConfig";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "_make_overlay";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "chmod";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "create_app";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "mkdir";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "raises";
  "tests/test_backend_security.py:test_create_app_rejects_insecure_allowlisted_root" -> "setattr";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "_FakeSession";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "copy";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "dumps";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "encode";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "get";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "hexdigest";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "pop";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "retrieve_evidence";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "run";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "setattr";
  "tests/test_evidence_retrieval_fastpath.py:test_evidence_retrieval_validates_integrity" -> "sha256";
  "tests/test_evidence_retrieval_fastpath.py:_FakeSession.execute" -> "_FakeResult";
  "tests/test_decision_top_factors.py:test_top_factors_and_marketplace_recommendations" -> "DecisionEngine";
  "tests/test_decision_top_factors.py:test_top_factors_and_marketplace_recommendations" -> "evaluate";
  "tests/test_decision_top_factors.py:test_top_factors_and_marketplace_recommendations" -> "len";
  "tests/test_signing_verify.py:test_sign_verify_roundtrip" -> "sign_manifest";
  "tests/test_signing_verify.py:test_sign_verify_roundtrip" -> "verify_manifest";
  "tests/test_signing_verify.py:test_verify_failure_on_tamper" -> "sign_manifest";
  "tests/test_signing_verify.py:test_verify_failure_on_tamper" -> "verify_manifest";
  "tests/test_signing_verify.py:test_signing_disabled" -> "cache_clear";
  "tests/test_signing_verify.py:test_signing_disabled" -> "delenv";
  "tests/test_signing_verify.py:test_signing_disabled" -> "raises";
  "tests/test_signing_verify.py:test_signing_disabled" -> "sign_manifest";
  "tests/test_risk_adjustment.py:scorer" -> "ContextualRiskScorer";
  "tests/test_risk_adjustment.py:scorer" -> "fixture";
  "tests/test_risk_adjustment.py:test_contextual_risk_scorer_downgrades_low_impact" -> "apply";
  "tests/test_risk_adjustment.py:test_contextual_risk_scorer_upgrades_high_impact" -> "apply";
  "tests/test_risk_adjustment.py:test_compliance_engine_uses_adjusted_severity" -> "ComplianceEngine";
  "tests/test_risk_adjustment.py:test_compliance_engine_uses_adjusted_severity" -> "_evaluate_framework";
  "tests/test_new_modules.py:_overlay_stub" -> "SimpleNamespace";
  "tests/test_new_modules.py:test_roi_dashboard_calculates_value" -> "ROIDashboard";
  "tests/test_new_modules.py:test_roi_dashboard_calculates_value" -> "_overlay_stub";
  "tests/test_new_modules.py:test_roi_dashboard_calculates_value" -> "any";
  "tests/test_new_modules.py:test_roi_dashboard_calculates_value" -> "evaluate";
  "tests/test_new_modules.py:test_tenant_lifecycle_summary" -> "TenantLifecycleManager";
  "tests/test_new_modules.py:test_tenant_lifecycle_summary" -> "_overlay_stub";
  "tests/test_new_modules.py:test_tenant_lifecycle_summary" -> "evaluate";
  "tests/test_new_modules.py:test_performance_simulation_estimates_latency" -> "PerformanceSimulator";
  "tests/test_new_modules.py:test_performance_simulation_estimates_latency" -> "_overlay_stub";
  "tests/test_new_modules.py:test_performance_simulation_estimates_latency" -> "simulate";
  "tests/test_marketplace_recos.py:test_marketplace_returns_pack_for_ac2" -> "endswith";
  "tests/test_marketplace_recos.py:test_marketplace_returns_pack_for_ac2" -> "get_recommendations";
  "tests/test_cve_simulation.py:_build_overlay" -> "Path";
  "tests/test_cve_simulation.py:_build_overlay" -> "dumps";
  "tests/test_cve_simulation.py:_build_overlay" -> "join";
  "tests/test_cve_simulation.py:_build_overlay" -> "resolve";
  "tests/test_cve_simulation.py:_build_overlay" -> "str";
  "tests/test_cve_simulation.py:_build_overlay" -> "write_text";
  "tests/test_cve_simulation.py:test_demo_mode_downgrades_severity" -> "_build_overlay";
  "tests/test_cve_simulation.py:test_demo_mode_downgrades_severity" -> "exists";
  "tests/test_cve_simulation.py:test_demo_mode_downgrades_severity" -> "loads";
  "tests/test_cve_simulation.py:test_demo_mode_downgrades_severity" -> "read_text";
  "tests/test_cve_simulation.py:test_demo_mode_downgrades_severity" -> "run_simulation";
  "tests/test_cve_simulation.py:test_enterprise_mode_escalates_severity" -> "_build_overlay";
  "tests/test_cve_simulation.py:test_enterprise_mode_escalates_severity" -> "exists";
  "tests/test_cve_simulation.py:test_enterprise_mode_escalates_severity" -> "loads";
  "tests/test_cve_simulation.py:test_enterprise_mode_escalates_severity" -> "read_text";
  "tests/test_cve_simulation.py:test_enterprise_mode_escalates_severity" -> "run_simulation";
  "tests/test_api_artefacts.py:api_client" -> "TestClient";
  "tests/test_api_artefacts.py:api_client" -> "create_app";
  "tests/test_api_artefacts.py:api_client" -> "fixture";
  "tests/test_api_artefacts.py:api_client" -> "import_module";
  "tests/test_api_artefacts.py:api_client" -> "reload";
  "tests/test_api_artefacts.py:api_client" -> "setenv";
  "tests/test_api_artefacts.py:api_client" -> "str";
  "tests/test_api_artefacts.py:_post_stage" -> "json";
  "tests/test_api_artefacts.py:_post_stage" -> "post";
  "tests/test_api_artefacts.py:_post_stage" -> "read_bytes";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "Path";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "_post_stage";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "exists";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "get";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "loads";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "read_text";
  "tests/test_api_artefacts.py:test_artefact_ingest_persists_outputs" -> "startswith";
}

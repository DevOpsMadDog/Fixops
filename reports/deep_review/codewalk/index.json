{
  "files": {
    "apps/api/__init__.py": {
      "classes": [],
      "docstring": "Backend package for FixOps simplified ingestion pipeline.",
      "functions": [
        {
          "calls": [
            "AttributeError"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 11,
          "lineno": 6,
          "name": "__getattr__"
        }
      ],
      "imports": []
    },
    "apps/api/app.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "encode",
            "timedelta",
            "utcnow"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Generate a signed JWT access token with an expiry.",
          "end_lineno": 48,
          "lineno": 42,
          "name": "generate_access_token"
        },
        {
          "calls": [
            "HTTPException",
            "decode"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "Decode and validate a JWT access token.",
          "end_lineno": 60,
          "lineno": 51,
          "name": "decode_access_token"
        },
        {
          "calls": [
            "APIKeyHeader",
            "AnalyticsStore",
            "ArtefactArchive",
            "Depends",
            "DictReader",
            "FastAPI",
            "FeedbackRecorder",
            "File",
            "HTTPException",
            "InputNormalizer",
            "Path",
            "PipelineOrchestrator",
            "SimpleNamespace",
            "SpooledTemporaryFile",
            "TextIOWrapper",
            "_maybe_materialise_raw",
            "_read_limited",
            "_store",
            "_validate_content_type",
            "add_middleware",
            "any",
            "bool",
            "close",
            "debug",
            "decode_access_token",
            "detach",
            "ensure_secure_directory",
            "exception",
            "get",
            "getattr",
            "getenv",
            "hasattr",
            "isinstance",
            "len",
            "list",
            "load_cve_feed",
            "load_dashboard",
            "load_overlay",
            "load_run",
            "load_sarif",
            "load_sbom",
            "lower",
            "min",
            "persist",
            "persist_run",
            "post",
            "read",
            "record",
            "resolve",
            "run",
            "seek",
            "split",
            "startswith",
            "str",
            "strip",
            "summarise",
            "suppress",
            "to_dict",
            "to_sanitised_dict",
            "tuple",
            "upload_limit",
            "uuid4",
            "values",
            "verify_allowlisted_path",
            "write"
          ],
          "cyclomatic_complexity": 62,
          "docstring": "Create the FastAPI application with file-upload ingestion endpoints.",
          "end_lineno": 493,
          "lineno": 63,
          "name": "create_app"
        }
      ],
      "imports": [
        "__future__",
        "contextlib",
        "core.analytics",
        "core.configuration",
        "core.feedback",
        "core.paths",
        "core.storage",
        "csv",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.security",
        "io",
        "jwt",
        "logging",
        "normalizers",
        "os",
        "pathlib",
        "pipeline",
        "secrets",
        "tempfile",
        "types",
        "typing",
        "uuid"
      ]
    },
    "apps/api/normalizers.py": {
      "classes": [
        {
          "docstring": "A minimal view of a component extracted from an SBOM.",
          "end_lineno": 78,
          "lineno": 64,
          "methods": [
            {
              "calls": [
                "asdict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 78,
              "lineno": 74,
              "name": "to_dict"
            }
          ],
          "name": "SBOMComponent"
        },
        {
          "docstring": "Result of normalising an SBOM document.",
          "end_lineno": 102,
          "lineno": 82,
          "methods": [
            {
              "calls": [
                "to_dict"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 102,
              "lineno": 93,
              "name": "to_dict"
            }
          ],
          "name": "NormalizedSBOM"
        },
        {
          "docstring": "Reduced representation of a CVE or KEV record.",
          "end_lineno": 116,
          "lineno": 106,
          "methods": [
            {
              "calls": [
                "asdict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 116,
              "lineno": 115,
              "name": "to_dict"
            }
          ],
          "name": "CVERecordSummary"
        },
        {
          "docstring": "Validated and simplified CVE feed content.",
          "end_lineno": 132,
          "lineno": 120,
          "methods": [
            {
              "calls": [
                "to_dict"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 132,
              "lineno": 127,
              "name": "to_dict"
            }
          ],
          "name": "NormalizedCVEFeed"
        },
        {
          "docstring": "Summarised SARIF result.",
          "end_lineno": 147,
          "lineno": 136,
          "methods": [
            {
              "calls": [
                "asdict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 147,
              "lineno": 146,
              "name": "to_dict"
            }
          ],
          "name": "SarifFinding"
        },
        {
          "docstring": "Parsed SARIF log enriched with quick statistics.",
          "end_lineno": 167,
          "lineno": 151,
          "methods": [
            {
              "calls": [
                "to_dict"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 167,
              "lineno": 160,
              "name": "to_dict"
            }
          ],
          "name": "NormalizedSARIF"
        },
        {
          "docstring": "Normalise artefacts using dedicated OSS parsers.",
          "end_lineno": 731,
          "lineno": 170,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 174,
              "lineno": 173,
              "name": "__init__"
            },
            {
              "calls": [
                "bytearray",
                "bytes",
                "encode",
                "extend",
                "hasattr",
                "isinstance",
                "read",
                "seek",
                "str",
                "suppress",
                "tell",
                "tobytes"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 208,
              "lineno": 177,
              "name": "_ensure_bytes"
            },
            {
              "calls": [
                "b64decode",
                "len",
                "strip"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 219,
              "lineno": 211,
              "name": "_maybe_decode_base64"
            },
            {
              "calls": [
                "BytesIO",
                "ZipFile",
                "decompress",
                "endswith",
                "is_zipfile",
                "lower",
                "namelist",
                "read",
                "startswith"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 251,
              "lineno": 222,
              "name": "_maybe_decompress"
            },
            {
              "calls": [
                "_ensure_bytes",
                "_maybe_decode_base64",
                "_maybe_decompress",
                "decode"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 257,
              "lineno": 253,
              "name": "_prepare_text"
            },
            {
              "calls": [
                "RuntimeError",
                "ValueError",
                "_load_sbom_from_provider",
                "_load_sbom_with_lib4sbom",
                "_prepare_text",
                "_resolve_sbom_parser_state",
                "debug"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Normalise an SBOM using lib4sbom or provider fallbacks.",
              "end_lineno": 293,
              "lineno": 259,
              "name": "load_sbom"
            },
            {
              "calls": [
                "NormalizedSBOM",
                "RuntimeError",
                "SBOMComponent",
                "SBOMParser",
                "append_component",
                "debug",
                "get",
                "get_document",
                "get_packages",
                "get_relationships",
                "get_services",
                "get_type",
                "get_vulnerabilities",
                "isinstance",
                "len",
                "parse_string",
                "str"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 351,
              "lineno": 295,
              "name": "_load_sbom_with_lib4sbom"
            },
            {
              "calls": [
                "loads",
                "parser"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 363,
              "lineno": 353,
              "name": "_load_sbom_from_provider"
            },
            {
              "calls": [
                "NormalizedSBOM",
                "SBOMComponent",
                "append",
                "get",
                "isinstance",
                "len",
                "list",
                "str",
                "values"
              ],
              "cyclomatic_complexity": 23,
              "docstring": null,
              "end_lineno": 438,
              "lineno": 365,
              "name": "_parse_github_dependency_snapshot"
            },
            {
              "calls": [
                "NormalizedSBOM",
                "SBOMComponent",
                "append",
                "get",
                "isinstance",
                "len",
                "str"
              ],
              "cyclomatic_complexity": 24,
              "docstring": null,
              "end_lineno": 516,
              "lineno": 440,
              "name": "_parse_syft_json"
            },
            {
              "calls": [
                "CVERecordSummary",
                "NormalizedCVEFeed",
                "ValueError",
                "_prepare_text",
                "append",
                "bool",
                "debug",
                "get",
                "isinstance",
                "len",
                "loads",
                "str",
                "validate"
              ],
              "cyclomatic_complexity": 20,
              "docstring": "Normalise CVE/KEV feeds using cvelib for schema validation.",
              "end_lineno": 608,
              "lineno": 518,
              "name": "load_cve_feed"
            },
            {
              "calls": [
                "NormalizedSARIF",
                "SarifFinding",
                "SarifLog",
                "ValueError",
                "_prepare_text",
                "append",
                "convert",
                "debug",
                "error",
                "get",
                "getattr",
                "intersection",
                "isinstance",
                "keys",
                "len",
                "loads",
                "lower",
                "sorted",
                "str"
              ],
              "cyclomatic_complexity": 35,
              "docstring": "Normalise SARIF logs via sarif-om with optional Snyk conversion.",
              "end_lineno": 731,
              "lineno": 610,
              "name": "load_sarif"
            }
          ],
          "name": "InputNormalizer"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "get",
            "getattr"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 32,
          "lineno": 24,
          "name": "_resolve_sbom_parser_state"
        }
      ],
      "imports": [
        "__future__",
        "base64",
        "binascii",
        "contextlib",
        "dataclasses",
        "gzip",
        "io",
        "json",
        "logging",
        "sys",
        "typing",
        "zipfile"
      ]
    },
    "apps/api/pipeline.py": {
      "classes": [
        {
          "docstring": "Derive intermediate insights from the uploaded artefacts.",
          "end_lineno": 684,
          "lineno": 152,
          "methods": [
            {
              "calls": [
                "get",
                "isinstance",
                "strip"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Return the first non-empty component identifier in a design row.",
              "end_lineno": 165,
              "lineno": 156,
              "name": "_extract_component_name"
            },
            {
              "calls": [
                "append",
                "dumps",
                "get",
                "join",
                "str"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Concatenate searchable portions of a SARIF finding once.",
              "end_lineno": 190,
              "lineno": 168,
              "name": "_build_finding_search_text"
            },
            {
              "calls": [
                "append",
                "dumps",
                "join",
                "str"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 205,
              "lineno": 193,
              "name": "_build_record_search_text"
            },
            {
              "calls": [
                "_lower"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 216,
              "lineno": 207,
              "name": "_match_components"
            },
            {
              "calls": [
                "compile",
                "escape",
                "join",
                "lru_cache",
                "sorted"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Build a compiled regex for substring lookups across artefacts.",
              "end_lineno": 230,
              "lineno": 220,
              "name": "_compile_token_pattern"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 241,
              "lineno": 233,
              "name": "_normalise_sarif_severity"
            },
            {
              "calls": [
                "index"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 248,
              "lineno": 244,
              "name": "_severity_index"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 268,
              "lineno": 251,
              "name": "_normalise_cve_severity"
            },
            {
              "calls": [
                "_severity_index",
                "append",
                "dict"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 309,
              "lineno": 270,
              "name": "_evaluate_guardrails"
            },
            {
              "calls": [
                "AIAgentAdvisor",
                "ComplianceEvaluator",
                "ContextEngine",
                "Counter",
                "EvidenceHub",
                "ExploitFeedRefresher",
                "ExploitSignalEvaluator",
                "IaCPostureEvaluator",
                "OnboardingGuide",
                "PerformanceSimulator",
                "PipelineContext",
                "PolicyAutomation",
                "ProbabilisticForecastEngine",
                "ROIDashboard",
                "SSDLCEvaluator",
                "TenantLifecycleManager",
                "_build_finding_search_text",
                "_build_record_search_text",
                "_compile_token_pattern",
                "_evaluate_guardrails",
                "_extract_component_name",
                "_lower",
                "_match_components",
                "_normalise_cve_severity",
                "_normalise_sarif_severity",
                "_severity_index",
                "analyse",
                "any",
                "append",
                "build",
                "build_feature_matrix",
                "defaultdict",
                "dict",
                "enumerate",
                "evaluate",
                "evaluate_compliance",
                "execute",
                "execute_custom_modules",
                "findall",
                "get",
                "is_module_enabled",
                "isinstance",
                "items",
                "len",
                "list",
                "lower",
                "module_config",
                "persist",
                "plan",
                "refresh",
                "set",
                "simulate",
                "sorted",
                "sum",
                "to_dict",
                "tuple",
                "update",
                "values"
              ],
              "cyclomatic_complexity": 52,
              "docstring": null,
              "end_lineno": 684,
              "lineno": 311,
              "name": "run"
            }
          ],
          "name": "PipelineOrchestrator"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "isinstance",
            "lower",
            "lru_cache"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 39,
          "lineno": 38,
          "name": "_lower"
        },
        {
          "calls": [
            "_resolve_status",
            "_status_passed",
            "append",
            "get",
            "isinstance",
            "items",
            "len",
            "list",
            "lower",
            "max",
            "split",
            "startswith"
          ],
          "cyclomatic_complexity": 27,
          "docstring": "Map guardrail and policy results to compliance control coverage.",
          "end_lineno": 149,
          "lineno": 61,
          "name": "evaluate_compliance"
        }
      ],
      "imports": [
        "__future__",
        "collections",
        "core.ai_agents",
        "core.analytics",
        "core.compliance",
        "core.configuration",
        "core.context_engine",
        "core.evidence",
        "core.exploit_signals",
        "core.feature_matrix",
        "core.iac",
        "core.modules",
        "core.onboarding",
        "core.performance",
        "core.policy",
        "core.probabilistic",
        "core.ssdlc",
        "core.tenancy",
        "functools",
        "json",
        "normalizers",
        "re",
        "typing"
      ]
    },
    "apps/fixops_cli/__init__.py": {
      "classes": [],
      "docstring": "Command line interface for orchestrating FixOps stages.",
      "functions": [],
      "imports": []
    },
    "apps/fixops_cli/__main__.py": {
      "classes": [],
      "docstring": "Entry point for the unified FixOps stage runner CLI.",
      "functions": [
        {
          "calls": [
            "Path",
            "exists",
            "insert",
            "resolve",
            "str"
          ],
          "cyclomatic_complexity": 3,
          "docstring": "Ensure the enterprise runtime package is importable.",
          "end_lineno": 20,
          "lineno": 11,
          "name": "_ensure_enterprise_src"
        },
        {
          "calls": [
            "ArgumentParser",
            "add_argument",
            "add_parser",
            "add_subparsers",
            "set_defaults"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 93,
          "lineno": 31,
          "name": "_build_parser"
        },
        {
          "calls": [
            "RunRegistry",
            "StageRunner",
            "append",
            "isinstance",
            "join",
            "print",
            "resolve",
            "run_stage",
            "str"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 123,
          "lineno": 96,
          "name": "_handle_stage_run"
        },
        {
          "calls": [
            "getattr",
            "handler",
            "list",
            "parse_args",
            "print_help"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 135,
          "lineno": 126,
          "name": "_dispatch"
        },
        {
          "calls": [
            "_build_parser",
            "_dispatch",
            "list"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 141,
          "lineno": 138,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "core.stage_runner",
        "pathlib",
        "src.services",
        "src.services.run_registry",
        "sys",
        "typing"
      ]
    },
    "backend_test.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 1598,
          "lineno": 24,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 29,
              "lineno": 25,
              "name": "__init__"
            },
            {
              "calls": [
                "append",
                "copy",
                "get",
                "isinstance",
                "json",
                "keys",
                "len",
                "list",
                "post",
                "print",
                "str"
              ],
              "cyclomatic_complexity": 16,
              "docstring": "Run a single API test",
              "end_lineno": 102,
              "lineno": 31,
              "name": "run_test"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "keys",
                "len",
                "list",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 17,
              "docstring": "Test Decision Engine API endpoints - CRITICAL TESTING AREA",
              "end_lineno": 210,
              "lineno": 104,
              "name": "test_decision_engine_api"
            },
            {
              "calls": [
                "NamedTemporaryFile",
                "dump",
                "get",
                "open",
                "print",
                "run_test",
                "unlink",
                "write"
              ],
              "cyclomatic_complexity": 12,
              "docstring": "Test Scan Upload API endpoints - CRITICAL TESTING AREA",
              "end_lineno": 372,
              "lineno": 212,
              "name": "test_scan_upload_api"
            },
            {
              "calls": [
                "NamedTemporaryFile",
                "_find_json_end",
                "append",
                "copy",
                "dump",
                "find",
                "get",
                "keys",
                "list",
                "loads",
                "print",
                "run",
                "str",
                "unlink"
              ],
              "cyclomatic_complexity": 17,
              "docstring": "Test CLI commands - CRITICAL TESTING AREA",
              "end_lineno": 538,
              "lineno": 374,
              "name": "test_cli_functionality"
            },
            {
              "calls": [
                "enumerate",
                "len"
              ],
              "cyclomatic_complexity": 5,
              "docstring": "Find the end of a JSON object in text",
              "end_lineno": 550,
              "lineno": 540,
              "name": "_find_json_end"
            },
            {
              "calls": [
                "append",
                "print",
                "run",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Test core services initialization and functionality",
              "end_lineno": 682,
              "lineno": 552,
              "name": "test_core_services"
            },
            {
              "calls": [
                "append",
                "exists",
                "getsize",
                "print",
                "run",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 5,
              "docstring": "Test database connectivity and operations - CRITICAL TESTING AREA",
              "end_lineno": 787,
              "lineno": 684,
              "name": "test_database_operations"
            },
            {
              "calls": [
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 6,
              "docstring": "Test authentication and security features - CRITICAL TESTING AREA",
              "end_lineno": 848,
              "lineno": 789,
              "name": "test_authentication_security"
            },
            {
              "calls": [
                "get",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 6,
              "docstring": "Test core health and monitoring endpoints",
              "end_lineno": 871,
              "lineno": 850,
              "name": "test_health_endpoints"
            },
            {
              "calls": [
                "append",
                "getenv",
                "print",
                "startswith",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Test LLM integration functionality",
              "end_lineno": 895,
              "lineno": 873,
              "name": "test_llm_integration"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "keys",
                "len",
                "list",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 18,
              "docstring": "Test Enhanced API endpoints as specified in review request",
              "end_lineno": 1002,
              "lineno": 897,
              "name": "test_enhanced_api_endpoints"
            },
            {
              "calls": [
                "NamedTemporaryFile",
                "append",
                "dump",
                "dumps",
                "encode",
                "get",
                "len",
                "open",
                "print",
                "run_test",
                "unlink"
              ],
              "cyclomatic_complexity": 16,
              "docstring": "Test Enhanced Scan Upload endpoints as specified in review request",
              "end_lineno": 1134,
              "lineno": 1004,
              "name": "test_scan_upload_enhanced"
            },
            {
              "calls": [
                "NamedTemporaryFile",
                "append",
                "dump",
                "get",
                "keys",
                "list",
                "open",
                "print",
                "run_test",
                "unlink",
                "write"
              ],
              "cyclomatic_complexity": 18,
              "docstring": "Test Business Context APIs as specified in review request",
              "end_lineno": 1302,
              "lineno": 1136,
              "name": "test_business_context_apis"
            },
            {
              "calls": [
                "append",
                "get",
                "len",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 11,
              "docstring": "Test Production Readiness APIs as specified in review request",
              "end_lineno": 1357,
              "lineno": 1304,
              "name": "test_production_readiness_apis"
            },
            {
              "calls": [
                "append",
                "get",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 14,
              "docstring": "Test System Mode APIs as specified in review request",
              "end_lineno": 1434,
              "lineno": 1359,
              "name": "test_system_mode_apis"
            },
            {
              "calls": [
                "append",
                "get",
                "len",
                "print",
                "run_test"
              ],
              "cyclomatic_complexity": 11,
              "docstring": "Test Core Stability as specified in review request",
              "end_lineno": 1541,
              "lineno": 1436,
              "name": "test_core_stability_check"
            },
            {
              "calls": [
                "append",
                "enumerate",
                "len",
                "print",
                "str",
                "test_health_endpoints",
                "test_suite"
              ],
              "cyclomatic_complexity": 8,
              "docstring": "Run all comprehensive FixOps Decision Engine tests",
              "end_lineno": 1598,
              "lineno": 1543,
              "name": "run_all_tests"
            }
          ],
          "name": "FixOpsDecisionEngineAPITester"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "FixOpsDecisionEngineAPITester",
            "run_all_tests"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 1603,
          "lineno": 1600,
          "name": "main"
        }
      ],
      "imports": [
        "asyncio",
        "datetime",
        "io",
        "json",
        "os",
        "pytest",
        "subprocess",
        "sys",
        "tempfile"
      ]
    },
    "core/__init__.py": {
      "classes": [],
      "docstring": "Core utilities for FixOps analytical components.",
      "functions": [],
      "imports": [
        "design_context_injector"
      ]
    },
    "core/ai_agents.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 43,
          "lineno": 27,
          "methods": [
            {
              "calls": [
                "_tokenise",
                "set",
                "update"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 40,
              "lineno": 34,
              "name": "__post_init__"
            }
          ],
          "name": "FrameworkSignature"
        },
        {
          "docstring": "Identify AI-agent frameworks and recommend controls.",
          "end_lineno": 222,
          "lineno": 46,
          "methods": [
            {
              "calls": [
                "FrameworkSignature",
                "append",
                "get",
                "isinstance",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 85,
              "lineno": 49,
              "name": "__init__"
            },
            {
              "calls": [
                "bool"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 88,
              "lineno": 87,
              "name": "enabled"
            },
            {
              "calls": [
                "any",
                "append",
                "bool",
                "intersection",
                "lower"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 106,
              "lineno": 90,
              "name": "_match_frameworks"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower",
                "update"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 117,
              "lineno": 108,
              "name": "_controls_for"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 136,
              "lineno": 119,
              "name": "_playbooks_for"
            },
            {
              "calls": [
                "_controls_for",
                "_extract_component_name",
                "_match_frameworks",
                "_playbooks_for",
                "_tokenise",
                "add",
                "append",
                "enabled",
                "extend",
                "get",
                "isinstance",
                "join",
                "keys",
                "len",
                "set",
                "sorted",
                "str",
                "update",
                "values"
              ],
              "cyclomatic_complexity": 23,
              "docstring": null,
              "end_lineno": 222,
              "lineno": 138,
              "name": "analyse"
            }
          ],
          "name": "AIAgentAdvisor"
        }
      ],
      "docstring": "Advisor for AI-agent components detected in design artefacts.",
      "functions": [
        {
          "calls": [
            "get",
            "isinstance",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 14,
          "lineno": 9,
          "name": "_extract_component_name"
        },
        {
          "calls": [
            "lower",
            "set",
            "split"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 23,
          "lineno": 20,
          "name": "_tokenise"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "re",
        "typing"
      ]
    },
    "core/analytics.py": {
      "classes": [
        {
          "docstring": "Persist analytics artefacts (forecasts, exploit snapshots, tickets, feedback).",
          "end_lineno": 412,
          "lineno": 29,
          "methods": [
            {
              "calls": [
                "Path",
                "ensure_secure_directory",
                "resolve",
                "tuple",
                "verify_allowlisted_path"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 51,
              "lineno": 38,
              "name": "__init__"
            },
            {
              "calls": [
                "_validate_run_id",
                "ensure_secure_directory",
                "verify_allowlisted_path"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 67,
              "lineno": 56,
              "name": "_category_directory"
            },
            {
              "calls": [
                "int",
                "time"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 71,
              "lineno": 70,
              "name": "_timestamp"
            },
            {
              "calls": [
                "_category_directory",
                "_timestamp",
                "dumps",
                "uuid4",
                "write_text"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 83,
              "lineno": 73,
              "name": "_write_entry"
            },
            {
              "calls": [
                "_category_directory",
                "append",
                "dict",
                "exists",
                "get",
                "glob",
                "is_dir",
                "isinstance",
                "iterdir",
                "loads",
                "read_text",
                "setdefault",
                "sort",
                "str"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 103,
              "lineno": 85,
              "name": "_load_entries"
            },
            {
              "calls": [
                "_category_directory",
                "append",
                "dict",
                "exists",
                "get",
                "glob",
                "isinstance",
                "loads",
                "read_text",
                "setdefault",
                "sort",
                "str"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 120,
              "lineno": 105,
              "name": "_load_run_entries"
            },
            {
              "calls": [
                "append",
                "items",
                "max"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 131,
              "lineno": 123,
              "name": "_slice"
            },
            {
              "calls": [
                "_timestamp",
                "_validate_run_id",
                "_write_entry",
                "dict",
                "float",
                "get",
                "int",
                "isinstance",
                "len"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 167,
              "lineno": 136,
              "name": "record_forecast"
            },
            {
              "calls": [
                "_timestamp",
                "_validate_run_id",
                "_write_entry",
                "dict",
                "get",
                "int",
                "isinstance",
                "len"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 190,
              "lineno": 169,
              "name": "record_exploit_snapshot"
            },
            {
              "calls": [
                "Counter",
                "_timestamp",
                "_validate_run_id",
                "_write_entry",
                "dict",
                "get",
                "int",
                "isinstance",
                "len",
                "str"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 224,
              "lineno": 192,
              "name": "record_ticket_metrics"
            },
            {
              "calls": [
                "_timestamp",
                "_validate_run_id",
                "_write_entry",
                "get",
                "int",
                "isinstance",
                "len",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 241,
              "lineno": 226,
              "name": "record_feedback_event"
            },
            {
              "calls": [
                "Counter",
                "_timestamp",
                "_validate_run_id",
                "_write_entry",
                "dict",
                "get",
                "isinstance",
                "items",
                "str",
                "values"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 260,
              "lineno": 243,
              "name": "record_feedback_outcomes"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance",
                "record_exploit_snapshot",
                "record_forecast",
                "record_ticket_metrics",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Persist supported analytics artefacts from a pipeline result.",
              "end_lineno": 286,
              "lineno": 262,
              "name": "persist_run"
            },
            {
              "calls": [
                "float",
                "len",
                "sum"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 296,
              "lineno": 292,
              "name": "_average"
            },
            {
              "calls": [
                "_average",
                "_load_entries",
                "_slice",
                "get",
                "len",
                "round",
                "sum"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 319,
              "lineno": 298,
              "name": "_forecast_dashboard"
            },
            {
              "calls": [
                "Counter",
                "_load_entries",
                "_slice",
                "dict",
                "get",
                "len",
                "str",
                "sum"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 335,
              "lineno": 321,
              "name": "_exploit_dashboard"
            },
            {
              "calls": [
                "Counter",
                "_load_entries",
                "_slice",
                "dict",
                "get",
                "isinstance",
                "len",
                "sum",
                "update"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 358,
              "lineno": 337,
              "name": "_ticket_dashboard"
            },
            {
              "calls": [
                "Counter",
                "_load_entries",
                "_slice",
                "dict",
                "get",
                "isinstance",
                "len",
                "str",
                "update"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 386,
              "lineno": 360,
              "name": "_feedback_dashboard"
            },
            {
              "calls": [
                "_exploit_dashboard",
                "_feedback_dashboard",
                "_forecast_dashboard",
                "_ticket_dashboard",
                "max"
              ],
              "cyclomatic_complexity": 1,
              "docstring": "Return aggregated analytics dashboard data.",
              "end_lineno": 397,
              "lineno": 388,
              "name": "load_dashboard"
            },
            {
              "calls": [
                "_load_run_entries",
                "_validate_run_id"
              ],
              "cyclomatic_complexity": 1,
              "docstring": "Return analytics artefacts for a specific run.",
              "end_lineno": 412,
              "lineno": 399,
              "name": "load_run"
            }
          ],
          "name": "AnalyticsStore"
        },
        {
          "docstring": "Calculate ROI and analytics insights from pipeline outputs.",
          "end_lineno": 597,
          "lineno": 415,
          "methods": [
            {
              "calls": [
                "_coerce_mapping",
                "_to_float",
                "dict",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 430,
              "lineno": 418,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 436,
              "lineno": 433,
              "name": "_coerce_mapping"
            },
            {
              "calls": [
                "float"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 443,
              "lineno": 439,
              "name": "_to_float"
            },
            {
              "calls": [
                "_to_float",
                "append",
                "float",
                "get",
                "int",
                "isinstance",
                "join",
                "len",
                "list",
                "max",
                "round",
                "sorted",
                "str",
                "sum",
                "values"
              ],
              "cyclomatic_complexity": 31,
              "docstring": null,
              "end_lineno": 597,
              "lineno": 445,
              "name": "evaluate"
            }
          ],
          "name": "ROIDashboard"
        },
        {
          "docstring": "Persist connector delivery outcomes for ROI analytics correlation.",
          "end_lineno": 647,
          "lineno": 600,
          "methods": [
            {
              "calls": [
                "ensure_secure_directory"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 610,
              "lineno": 603,
              "name": "__init__"
            },
            {
              "calls": [
                "_validate_run_id",
                "dict",
                "dumps",
                "ensure_secure_directory",
                "get",
                "int",
                "isinstance",
                "items",
                "open",
                "record_feedback_outcomes",
                "setdefault",
                "str",
                "time",
                "write"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 639,
              "lineno": 612,
              "name": "record"
            },
            {
              "calls": [
                "record_feedback_event"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 647,
              "lineno": 641,
              "name": "record_feedback_event"
            }
          ],
          "name": "FeedbackOutcomeStore"
        }
      ],
      "docstring": "Analytics and ROI computations for FixOps pipeline runs.",
      "functions": [
        {
          "calls": [
            "ValueError",
            "isinstance",
            "set",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 26,
          "lineno": 20,
          "name": "_validate_run_id"
        }
      ],
      "imports": [
        "__future__",
        "collections",
        "core.paths",
        "json",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ]
    },
    "core/cli.py": {
      "classes": [],
      "docstring": "Command-line helpers for running FixOps pipelines locally.",
      "functions": [
        {
          "calls": [
            "ValueError",
            "split",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 38,
          "lineno": 30,
          "name": "_apply_env_overrides"
        },
        {
          "calls": [
            "DictReader",
            "ValueError",
            "any",
            "open",
            "strip",
            "values"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 47,
          "lineno": 41,
          "name": "_load_design"
        },
        {
          "calls": [
            "read_bytes"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 53,
          "lineno": 50,
          "name": "_load_file"
        },
        {
          "calls": [
            "_load_design",
            "_load_file",
            "load_cve_feed",
            "load_sarif",
            "load_sbom"
          ],
          "cyclomatic_complexity": 8,
          "docstring": null,
          "end_lineno": 77,
          "lineno": 56,
          "name": "_load_inputs"
        },
        {
          "calls": [
            "ValueError",
            "get",
            "isinstance",
            "loads",
            "read_text"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 101,
          "lineno": 80,
          "name": "_load_incident_history"
        },
        {
          "calls": [
            "ValueError",
            "append",
            "get",
            "join",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 139,
          "lineno": 104,
          "name": "_ensure_inputs"
        },
        {
          "calls": [
            "get",
            "isinstance"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 147,
          "lineno": 142,
          "name": "_set_module_enabled"
        },
        {
          "calls": [
            "Path",
            "ensure_secure_directory",
            "get",
            "isinstance",
            "read_bytes",
            "write_bytes"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 163,
          "lineno": 150,
          "name": "_copy_evidence"
        },
        {
          "calls": [
            "FileNotFoundError",
            "RunRegistry",
            "StageRunner",
            "cwd",
            "exists",
            "expanduser",
            "get",
            "join",
            "print",
            "relative_to",
            "resolve",
            "run_stage"
          ],
          "cyclomatic_complexity": 15,
          "docstring": null,
          "end_lineno": 215,
          "lineno": 166,
          "name": "_handle_stage_run"
        },
        {
          "calls": [
            "get",
            "isinstance",
            "join",
            "print",
            "sorted"
          ],
          "cyclomatic_complexity": 21,
          "docstring": null,
          "end_lineno": 270,
          "lineno": 218,
          "name": "_print_summary"
        },
        {
          "calls": [
            "ArtefactArchive",
            "InputNormalizer",
            "Path",
            "PipelineOrchestrator",
            "_apply_env_overrides",
            "_copy_evidence",
            "_ensure_inputs",
            "_load_inputs",
            "_print_summary",
            "_set_module_enabled",
            "dump",
            "ensure_secure_directory",
            "get",
            "getattr",
            "isinstance",
            "load_overlay",
            "open",
            "persist",
            "print",
            "read_bytes",
            "resolve",
            "run",
            "str",
            "summarise",
            "to_sanitised_dict",
            "values",
            "verify_allowlisted_path",
            "write"
          ],
          "cyclomatic_complexity": 37,
          "docstring": null,
          "end_lineno": 399,
          "lineno": 273,
          "name": "_handle_run"
        },
        {
          "calls": [
            "_apply_env_overrides",
            "dumps",
            "load_overlay",
            "print",
            "to_sanitised_dict"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 409,
          "lineno": 402,
          "name": "_handle_show_overlay"
        },
        {
          "calls": [
            "ProbabilisticForecastEngine",
            "ValueError",
            "_load_incident_history",
            "calibrate",
            "dump",
            "ensure_secure_directory",
            "get",
            "isinstance",
            "loads",
            "open",
            "print",
            "read_text",
            "to_dict",
            "write"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 441,
          "lineno": 412,
          "name": "_handle_train_forecast"
        },
        {
          "calls": [
            "FileNotFoundError",
            "exists",
            "print",
            "run_demo_pipeline"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 456,
          "lineno": 444,
          "name": "_handle_demo"
        },
        {
          "calls": [
            "ArgumentParser",
            "add_argument",
            "add_parser",
            "add_subparsers",
            "set_defaults"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 697,
          "lineno": 459,
          "name": "build_parser"
        },
        {
          "calls": [
            "build_parser",
            "func",
            "hasattr",
            "list",
            "parse_args",
            "print",
            "print_help"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 713,
          "lineno": 700,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "apps.api.pipeline",
        "argparse",
        "core.configuration",
        "core.demo_runner",
        "core.paths",
        "core.probabilistic",
        "core.stage_runner",
        "core.storage",
        "csv",
        "json",
        "os",
        "pathlib",
        "src.services",
        "src.services.run_registry",
        "sys",
        "typing"
      ]
    },
    "core/compliance.py": {
      "classes": [
        {
          "docstring": "Evaluate compliance packs using pipeline artefacts.",
          "end_lineno": 89,
          "lineno": 7,
          "methods": [
            {
              "calls": [
                "dict",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 12,
              "lineno": 10,
              "name": "__init__"
            },
            {
              "calls": [
                "bool",
                "get",
                "int",
                "isinstance",
                "str"
              ],
              "cyclomatic_complexity": 18,
              "docstring": null,
              "end_lineno": 45,
              "lineno": 14,
              "name": "_check_requirement"
            },
            {
              "calls": [
                "_check_requirement",
                "all",
                "append",
                "get",
                "isinstance",
                "join"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 89,
              "lineno": 47,
              "name": "evaluate"
            }
          ],
          "name": "ComplianceEvaluator"
        }
      ],
      "docstring": "Opinionated compliance pack evaluation.",
      "functions": [],
      "imports": [
        "__future__",
        "typing"
      ]
    },
    "core/configuration.py": {
      "classes": [
        {
          "docstring": "Pydantic schema for validating overlay documents.",
          "end_lineno": 595,
          "lineno": 561,
          "methods": [],
          "name": "_OverlayDocument"
        },
        {
          "docstring": "Validated overlay configuration with convenience helpers.",
          "end_lineno": 1189,
          "lineno": 626,
          "methods": [
            {
              "calls": [
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 668,
              "lineno": 663,
              "name": "required_inputs"
            },
            {
              "calls": [
                "Path",
                "_ensure_within_allowlist",
                "expanduser",
                "is_absolute",
                "isinstance",
                "items",
                "resolve"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 683,
              "lineno": 671,
              "name": "data_directories"
            },
            {
              "calls": [
                "_mask"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 716,
              "lineno": 685,
              "name": "to_sanitised_dict"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 735,
              "lineno": 719,
              "name": "signing_settings"
            },
            {
              "calls": [
                "any",
                "items",
                "lower"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 757,
              "lineno": 738,
              "name": "_mask"
            },
            {
              "calls": [
                "get",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 763,
              "lineno": 760,
              "name": "guardrail_maturity"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 790,
              "lineno": 766,
              "name": "guardrail_policy"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 803,
              "lineno": 793,
              "name": "context_engine_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 816,
              "lineno": 806,
              "name": "evidence_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 829,
              "lineno": 819,
              "name": "onboarding_settings"
            },
            {
              "calls": [
                "dict",
                "extend",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 845,
              "lineno": 832,
              "name": "compliance_settings"
            },
            {
              "calls": [
                "dict",
                "extend",
                "get",
                "isinstance",
                "list",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 859,
              "lineno": 848,
              "name": "policy_settings"
            },
            {
              "calls": [
                "bool",
                "get",
                "isinstance",
                "setdefault",
                "strip"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 890,
              "lineno": 862,
              "name": "policy_engine_settings"
            },
            {
              "calls": [
                "append",
                "dict",
                "get",
                "isinstance",
                "items",
                "str",
                "strip",
                "update"
              ],
              "cyclomatic_complexity": 19,
              "docstring": null,
              "end_lineno": 940,
              "lineno": 893,
              "name": "ssdlc_settings"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance",
                "items",
                "str",
                "update"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 971,
              "lineno": 943,
              "name": "exploit_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 984,
              "lineno": 974,
              "name": "probabilistic_settings"
            },
            {
              "calls": [
                "append",
                "dict",
                "get",
                "isinstance",
                "items"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 1007,
              "lineno": 987,
              "name": "iac_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 1020,
              "lineno": 1010,
              "name": "analytics_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 1033,
              "lineno": 1023,
              "name": "performance_settings"
            },
            {
              "calls": [
                "_deep_merge",
                "_extend",
                "append",
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 1060,
              "lineno": 1036,
              "name": "tenancy_settings"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance",
                "pop"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 1068,
              "lineno": 1062,
              "name": "module_config"
            },
            {
              "calls": [
                "bool",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 1079,
              "lineno": 1070,
              "name": "is_module_enabled"
            },
            {
              "calls": [
                "append",
                "dict",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 1090,
              "lineno": 1082,
              "name": "custom_module_specs"
            },
            {
              "calls": [
                "isinstance",
                "items"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 1108,
              "lineno": 1093,
              "name": "module_matrix"
            },
            {
              "calls": [
                "append",
                "get",
                "is_module_enabled"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 1138,
              "lineno": 1111,
              "name": "enabled_modules"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 1160,
              "lineno": 1141,
              "name": "pricing_summary"
            },
            {
              "calls": [
                "dict",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 1168,
              "lineno": 1163,
              "name": "evidence_limits"
            },
            {
              "calls": [
                "get",
                "int",
                "isdigit",
                "isinstance"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 1189,
              "lineno": 1170,
              "name": "upload_limit"
            }
          ],
          "name": "OverlayConfig"
        }
      ],
      "docstring": "Overlay configuration loading and validation utilities for FixOps.",
      "functions": [
        {
          "calls": [
            "Path",
            "lru_cache",
            "read_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 31,
          "lineno": 27,
          "name": "_read_text_cached"
        },
        {
          "calls": [
            "_read_text_cached",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 34,
          "name": "_read_text"
        },
        {
          "calls": [
            "TypeError",
            "ValueError",
            "dict",
            "isinstance",
            "loads",
            "safe_load",
            "strip"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 57,
          "lineno": 38,
          "name": "_parse_overlay"
        },
        {
          "calls": [
            "_deep_merge",
            "isinstance",
            "items"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 72,
          "lineno": 60,
          "name": "_deep_merge"
        },
        {
          "calls": [
            "ValueError",
            "isinstance"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 118,
          "lineno": 115,
          "name": "_require_mapping"
        },
        {
          "calls": [
            "ValueError",
            "isinstance",
            "strip"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 127,
          "lineno": 121,
          "name": "_require_string"
        },
        {
          "calls": [
            "ValueError",
            "isinstance",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 136,
          "lineno": 130,
          "name": "_optional_string"
        },
        {
          "calls": [
            "ValueError",
            "append",
            "enumerate",
            "isinstance",
            "strip"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 152,
          "lineno": 139,
          "name": "_string_list"
        },
        {
          "calls": [
            "ValueError",
            "_require_mapping",
            "_require_string",
            "get",
            "isinstance",
            "lower",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 11,
          "docstring": null,
          "end_lineno": 193,
          "lineno": 155,
          "name": "_validate_signing_config"
        },
        {
          "calls": [
            "ValueError",
            "_optional_string",
            "_require_mapping",
            "_require_string",
            "_validate_compliance_controls",
            "append",
            "dict",
            "enumerate",
            "get",
            "isinstance",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 237,
          "lineno": 196,
          "name": "_validate_compliance_frameworks"
        },
        {
          "calls": [
            "ValueError",
            "_optional_string",
            "_require_mapping",
            "_require_string",
            "_string_list",
            "append",
            "dict",
            "enumerate",
            "get",
            "isinstance",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 10,
          "docstring": null,
          "end_lineno": 284,
          "lineno": 240,
          "name": "_validate_compliance_controls"
        },
        {
          "calls": [
            "ValueError",
            "_require_mapping",
            "_require_string",
            "_validate_compliance_frameworks",
            "format",
            "get",
            "items",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 322,
          "lineno": 287,
          "name": "_validate_compliance_config"
        },
        {
          "calls": [
            "ValueError",
            "_require_mapping",
            "_require_string",
            "append",
            "dict",
            "enumerate",
            "get",
            "int",
            "isinstance",
            "lower",
            "set",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 17,
          "docstring": null,
          "end_lineno": 422,
          "lineno": 325,
          "name": "_validate_policy_actions"
        },
        {
          "calls": [
            "ValueError",
            "_require_mapping",
            "_require_string",
            "_validate_policy_actions",
            "format",
            "get",
            "int",
            "isdigit",
            "isinstance",
            "items",
            "set",
            "sorted",
            "strip"
          ],
          "cyclomatic_complexity": 15,
          "docstring": null,
          "end_lineno": 487,
          "lineno": 425,
          "name": "_validate_policy_config"
        },
        {
          "calls": [
            "ValueError",
            "_require_mapping",
            "_require_string",
            "bool",
            "format",
            "get",
            "isinstance",
            "set",
            "setdefault",
            "sorted"
          ],
          "cyclomatic_complexity": 16,
          "docstring": null,
          "end_lineno": 558,
          "lineno": 490,
          "name": "_validate_policy_engine_config"
        },
        {
          "calls": [
            "Path",
            "append",
            "expanduser",
            "getenv",
            "resolve",
            "split",
            "str",
            "strip",
            "tuple"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 608,
          "lineno": 598,
          "name": "_resolve_allowlisted_roots"
        },
        {
          "calls": [
            "ValueError",
            "relative_to",
            "resolve"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 622,
          "lineno": 611,
          "name": "_ensure_within_allowlist"
        },
        {
          "calls": [
            "OverlayConfig",
            "Path",
            "RuntimeError",
            "ValueError",
            "_OverlayDocument",
            "_deep_merge",
            "_parse_overlay",
            "_read_text",
            "_resolve_allowlisted_roots",
            "_validate_compliance_config",
            "_validate_policy_config",
            "_validate_policy_engine_config",
            "_validate_signing_config",
            "append",
            "dict",
            "extend",
            "fromkeys",
            "get",
            "getenv",
            "isinstance",
            "items",
            "keys",
            "lower",
            "setdefault",
            "sorted",
            "str",
            "strip",
            "token_urlsafe",
            "tuple",
            "warning"
          ],
          "cyclomatic_complexity": 59,
          "docstring": "Load the overlay configuration and merge profile overrides.\n\nThe optional ``mode_override`` parameter allows callers to select a\nspecific overlay profile (for example, switching between the bundled\n``demo`` and ``enterprise`` presets) without mutating the source\nconfiguration file on disk. When provided, the override takes\nprecedence over the ``mode`` value declared in the file and ensures\nthe downstream profile merge logic operates on the desired mode.\n\nWhen ``allow_demo_token_fallback`` is set, token-based authentication\nwill generate an ephemeral token if the configured environment\nvariable is missing **and** the overlay mode resolves to ``demo``.\nThis keeps the sample API runnable without secrets while continuing\nto enforce strict checks for enterprise profiles.",
          "end_lineno": 1418,
          "lineno": 1192,
          "name": "load_overlay"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "functools",
        "json",
        "logging",
        "os",
        "pathlib",
        "pydantic",
        "secrets",
        "typing"
      ]
    },
    "core/connectors.py": {
      "classes": [
        {
          "docstring": "Structured response from a connector invocation.",
          "end_lineno": 32,
          "lineno": 23,
          "methods": [
            {
              "calls": [
                "dict",
                "setdefault"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 32,
              "lineno": 29,
              "name": "to_dict"
            }
          ],
          "name": "ConnectorOutcome"
        },
        {
          "docstring": "Utility base class with request helpers.",
          "end_lineno": 43,
          "lineno": 35,
          "methods": [
            {
              "calls": [
                "Session"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 40,
              "lineno": 38,
              "name": "__init__"
            },
            {
              "calls": [
                "request"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 43,
              "lineno": 42,
              "name": "_request"
            }
          ],
          "name": "_BaseConnector"
        },
        {
          "docstring": "Create Jira issues for guardrail automation via `/rest/api/3/issue` (Atlassian Cloud/Server).",
          "end_lineno": 119,
          "lineno": 46,
          "methods": [
            {
              "calls": [
                "__init__",
                "float",
                "get",
                "getenv",
                "rstrip",
                "str",
                "super"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 61,
              "lineno": 49,
              "name": "__init__"
            },
            {
              "calls": [
                "bool"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 65,
              "lineno": 64,
              "name": "configured"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "_request",
                "dumps",
                "get",
                "json",
                "raise_for_status",
                "str",
                "urljoin"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 119,
              "lineno": 67,
              "name": "create_issue"
            }
          ],
          "name": "JiraConnector"
        },
        {
          "docstring": "Publish Confluence pages for audit evidence via `/rest/api/content` (storage representation).",
          "end_lineno": 201,
          "lineno": 122,
          "methods": [
            {
              "calls": [
                "__init__",
                "float",
                "get",
                "getenv",
                "rstrip",
                "str",
                "super"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 137,
              "lineno": 125,
              "name": "__init__"
            },
            {
              "calls": [
                "bool"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 141,
              "lineno": 140,
              "name": "configured"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "_request",
                "append",
                "dumps",
                "get",
                "json",
                "raise_for_status",
                "str",
                "urljoin"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 201,
              "lineno": 143,
              "name": "create_page"
            }
          ],
          "name": "ConfluenceConnector"
        },
        {
          "docstring": "Send Slack notifications via incoming webhook.",
          "end_lineno": 235,
          "lineno": 204,
          "methods": [
            {
              "calls": [
                "__init__",
                "float",
                "get",
                "getenv",
                "str",
                "super"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 214,
              "lineno": 207,
              "name": "__init__"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "_request",
                "get",
                "raise_for_status",
                "str"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 235,
              "lineno": 216,
              "name": "post_message"
            }
          ],
          "name": "SlackConnector"
        },
        {
          "docstring": "Registry that routes actions to configured delivery connectors.",
          "end_lineno": 267,
          "lineno": 238,
          "methods": [
            {
              "calls": [
                "ConfluenceConnector",
                "JiraConnector",
                "SlackConnector",
                "bool",
                "get"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 246,
              "lineno": 241,
              "name": "__init__"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "create_issue",
                "create_page",
                "get",
                "lower",
                "post_message",
                "str"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 267,
              "lineno": 248,
              "name": "deliver"
            }
          ],
          "name": "AutomationConnectors"
        }
      ],
      "docstring": "External automation connectors for delivering policy actions.",
      "functions": [
        {
          "calls": [
            "len"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 14,
          "name": "_mask"
        },
        {
          "calls": [
            "_mask",
            "bool",
            "isinstance",
            "str"
          ],
          "cyclomatic_complexity": 6,
          "docstring": "Return non-sensitive configuration state for diagnostics.",
          "end_lineno": 294,
          "lineno": 270,
          "name": "summarise_connector"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "json",
        "os",
        "requests",
        "typing",
        "urllib.parse"
      ]
    },
    "core/context_engine.py": {
      "classes": [
        {
          "docstring": "Computed context for a design/SBOM component.",
          "end_lineno": 37,
          "lineno": 27,
          "methods": [],
          "name": "ComponentContext"
        },
        {
          "docstring": "Business-aware context derivation using overlay configuration.",
          "end_lineno": 246,
          "lineno": 40,
          "methods": [
            {
              "calls": [
                "_normalise_weights",
                "_parse_playbooks",
                "dict",
                "get",
                "isinstance",
                "str"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 58,
              "lineno": 43,
              "name": "__init__"
            },
            {
              "calls": [
                "int",
                "isinstance",
                "items",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 69,
              "lineno": 61,
              "name": "_normalise_weights"
            },
            {
              "calls": [
                "append",
                "get",
                "int",
                "isinstance",
                "items",
                "sort"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 88,
              "lineno": 72,
              "name": "_parse_playbooks"
            },
            {
              "calls": [
                "index"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 95,
              "lineno": 91,
              "name": "_severity_index"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 103,
              "lineno": 97,
              "name": "_normalise_sarif_severity"
            },
            {
              "calls": [
                "get",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 108,
              "lineno": 105,
              "name": "_normalise_cve_severity"
            },
            {
              "calls": [
                "dict",
                "get"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 114,
              "lineno": 110,
              "name": "_evaluate_playbook"
            },
            {
              "calls": [
                "get",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 119,
              "lineno": 116,
              "name": "_score_value"
            },
            {
              "calls": [
                "_score_value",
                "isinstance",
                "max"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 124,
              "lineno": 121,
              "name": "_score_data_classification"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "strip"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 131,
              "lineno": 126,
              "name": "_extract_component_name"
            },
            {
              "calls": [
                "ComponentContext",
                "_evaluate_playbook",
                "_extract_component_name",
                "_normalise_cve_severity",
                "_normalise_sarif_severity",
                "_score_data_classification",
                "_score_value",
                "_severity_index",
                "bool",
                "get",
                "isinstance",
                "len",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 16,
              "docstring": null,
              "end_lineno": 177,
              "lineno": 133,
              "name": "_derive_component_context"
            },
            {
              "calls": [
                "_bucket",
                "_derive_component_context",
                "append",
                "enumerate",
                "get",
                "isinstance",
                "len",
                "max",
                "round",
                "sum"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 237,
              "lineno": 179,
              "name": "evaluate"
            },
            {
              "calls": [
                "callable",
                "get",
                "key",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 246,
              "lineno": 240,
              "name": "_bucket"
            }
          ],
          "name": "ContextEngine"
        }
      ],
      "docstring": "Context Engine for deriving FixOps business-aware signals.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "core/demo_runner.py": {
      "classes": [],
      "docstring": "Utilities for running the FixOps pipeline with bundled demo fixtures.",
      "functions": [
        {
          "calls": [
            "items",
            "setdefault"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 28,
          "lineno": 26,
          "name": "_ensure_env_defaults"
        },
        {
          "calls": [
            "DictReader",
            "any",
            "open",
            "strip",
            "values"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 31,
          "name": "_read_design"
        },
        {
          "calls": [
            "FileNotFoundError",
            "exists"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 42,
          "lineno": 38,
          "name": "_fixture_path"
        },
        {
          "calls": [
            "Path",
            "get",
            "isinstance"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 59,
          "lineno": 45,
          "name": "_bundle_path"
        },
        {
          "calls": [
            "append",
            "get",
            "isinstance",
            "join",
            "set",
            "sorted",
            "str",
            "title"
          ],
          "cyclomatic_complexity": 18,
          "docstring": null,
          "end_lineno": 115,
          "lineno": 62,
          "name": "_format_summary"
        },
        {
          "calls": [
            "_ensure_env_defaults",
            "ensure_secure_directory",
            "get",
            "isinstance",
            "load_overlay",
            "setdefault",
            "values"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 126,
          "lineno": 118,
          "name": "_prepare_overlay"
        },
        {
          "calls": [
            "InputNormalizer",
            "PipelineOrchestrator",
            "_bundle_path",
            "_fixture_path",
            "_format_summary",
            "_prepare_overlay",
            "_read_design",
            "dump",
            "ensure_secure_directory",
            "load_cve_feed",
            "load_sarif",
            "load_sbom",
            "lower",
            "open",
            "print",
            "read_bytes",
            "run",
            "strip",
            "write"
          ],
          "cyclomatic_complexity": 8,
          "docstring": "Execute the pipeline using bundled demo artefacts.\n\nParameters\n----------\nmode:\n    Overlay profile to load (``\"demo\"`` or ``\"enterprise\"``).\noutput_path:\n    Optional file to persist the raw pipeline response as JSON.\npretty:\n    When persisting to ``output_path``, control whether the JSON is\n    pretty-printed.\ninclude_summary:\n    Print a short human-readable summary when ``True``.",
          "end_lineno": 188,
          "lineno": 129,
          "name": "run_demo_pipeline"
        }
      ],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "apps.api.pipeline",
        "core.configuration",
        "core.evidence",
        "core.paths",
        "csv",
        "json",
        "os",
        "pathlib",
        "typing"
      ]
    },
    "core/design_context_injector.py": {
      "classes": [
        {
          "docstring": "Encapsulates a prior probability derived from SSVC.",
          "end_lineno": 23,
          "lineno": 18,
          "methods": [],
          "name": "PriorProbability"
        },
        {
          "docstring": "Translate design-context CSV data into SSVC derived priors.",
          "end_lineno": 273,
          "lineno": 26,
          "methods": [
            {
              "calls": [
                "_ensure_enum_aliases",
                "_extract_enum_types",
                "_normalise_priority_weights",
                "_resolve_decision_class",
                "_resolve_type_hints",
                "import_module",
                "join",
                "lower",
                "signature",
                "split",
                "update",
                "upper"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 57,
              "lineno": 29,
              "name": "__init__"
            },
            {
              "calls": [
                "Decision",
                "PriorProbability",
                "_build_decision_kwargs",
                "_build_rationale",
                "_build_vector",
                "_iterate_rows",
                "_probability_from_outcome",
                "append",
                "enumerate",
                "evaluate",
                "get",
                "list",
                "strip"
              ],
              "cyclomatic_complexity": 3,
              "docstring": "Read CSV design context and evaluate SSVC priors.",
              "end_lineno": 80,
              "lineno": 59,
              "name": "calculate_priors"
            },
            {
              "calls": [
                "DictReader",
                "Path",
                "hasattr",
                "list",
                "open"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 93,
              "lineno": 85,
              "name": "_iterate_rows"
            },
            {
              "calls": [
                "ValueError",
                "_coerce_parameter",
                "get",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 106,
              "lineno": 95,
              "name": "_build_decision_kwargs"
            },
            {
              "calls": [
                "ValueError",
                "get",
                "isinstance",
                "lower",
                "str",
                "strip",
                "upper"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 135,
              "lineno": 108,
              "name": "_coerce_parameter"
            },
            {
              "calls": [
                "ValueError",
                "getattr",
                "hasattr",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 145,
              "lineno": 137,
              "name": "_probability_from_outcome"
            },
            {
              "calls": [
                "_format_enum",
                "append",
                "getattr"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 156,
              "lineno": 147,
              "name": "_build_rationale"
            },
            {
              "calls": [
                "hasattr",
                "str"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 162,
              "lineno": 159,
              "name": "_format_enum"
            },
            {
              "calls": [
                "ValueError",
                "dir",
                "getattr",
                "isclass",
                "startswith"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 169,
              "lineno": 164,
              "name": "_resolve_decision_class"
            },
            {
              "calls": [
                "_compose_vector",
                "_vector_code",
                "append",
                "getattr",
                "join",
                "split",
                "to_vector"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 194,
              "lineno": 171,
              "name": "_build_vector"
            },
            {
              "calls": [
                "ValueError",
                "_vector_code",
                "append",
                "isoformat",
                "items",
                "join",
                "now",
                "replace",
                "upper"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 208,
              "lineno": 196,
              "name": "_compose_vector"
            },
            {
              "calls": [
                "get",
                "getattr",
                "hasattr",
                "replace",
                "split",
                "str",
                "upper"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 225,
              "lineno": 210,
              "name": "_vector_code"
            },
            {
              "calls": [
                "get_annotations"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 228,
              "lineno": 227,
              "name": "_resolve_type_hints"
            },
            {
              "calls": [
                "_extract_enum",
                "items"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 238,
              "lineno": 230,
              "name": "_extract_enum_types"
            },
            {
              "calls": [
                "get_args",
                "hasattr",
                "isclass",
                "issubclass"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 251,
              "lineno": 241,
              "name": "_extract_enum"
            },
            {
              "calls": [
                "copy",
                "float",
                "items",
                "lower"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 265,
              "lineno": 253,
              "name": "_normalise_priority_weights"
            },
            {
              "calls": [
                "hasattr",
                "isclass",
                "issubclass",
                "lower",
                "setattr",
                "values"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 273,
              "lineno": 267,
              "name": "_ensure_enum_aliases"
            }
          ],
          "name": "DesignContextInjector"
        }
      ],
      "docstring": null,
      "functions": [],
      "imports": [
        "__future__",
        "csv",
        "dataclasses",
        "enum",
        "importlib",
        "inspect",
        "pathlib",
        "ssvc",
        "typing"
      ]
    },
    "core/evidence.py": {
      "classes": [
        {
          "docstring": "Persist evidence bundles derived from pipeline runs.",
          "end_lineno": 193,
          "lineno": 31,
          "methods": [
            {
              "calls": [
                "Fernet",
                "RuntimeError",
                "bool",
                "encode",
                "get",
                "getenv",
                "int",
                "isinstance",
                "str"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 68,
              "lineno": 34,
              "name": "__init__"
            },
            {
              "calls": [
                "Path",
                "ensure_secure_directory",
                "get",
                "resolve"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 79,
              "lineno": 70,
              "name": "_base_directory"
            },
            {
              "calls": [
                "get",
                "str",
                "strip",
                "sub"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 87,
              "lineno": 81,
              "name": "_bundle_name"
            },
            {
              "calls": [
                "ValueError",
                "_atomic_write",
                "_base_directory",
                "_bundle_name",
                "_include",
                "append",
                "compress",
                "dumps",
                "encode",
                "encrypt",
                "ensure_secure_directory",
                "get",
                "keys",
                "len",
                "str",
                "to_sanitised_dict",
                "uuid4",
                "with_suffix"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 193,
              "lineno": 89,
              "name": "persist"
            }
          ],
          "name": "EvidenceHub"
        }
      ],
      "docstring": "Evidence hub responsible for persisting contextual bundles.",
      "functions": [
        {
          "calls": [
            "ensure_secure_directory",
            "replace",
            "uuid4",
            "with_suffix",
            "write_bytes"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 28,
          "lineno": 24,
          "name": "_atomic_write"
        }
      ],
      "imports": [
        "__future__",
        "core.configuration",
        "core.paths",
        "gzip",
        "json",
        "os",
        "pathlib",
        "re",
        "typing",
        "uuid"
      ]
    },
    "core/exploit_signals.py": {
      "classes": [
        {
          "docstring": "Configuration for a specific exploit signal.",
          "end_lineno": 139,
          "lineno": 52,
          "methods": [
            {
              "calls": [
                "cls",
                "float",
                "get",
                "isinstance",
                "lower",
                "str",
                "strip",
                "tuple"
              ],
              "cyclomatic_complexity": 14,
              "docstring": null,
              "end_lineno": 100,
              "lineno": 66,
              "name": "from_mapping"
            },
            {
              "calls": [
                "_extract_value",
                "float",
                "isinstance",
                "lower"
              ],
              "cyclomatic_complexity": 14,
              "docstring": "Return a match description if the record meets the configured condition.",
              "end_lineno": 139,
              "lineno": 102,
              "name": "evaluate"
            }
          ],
          "name": "ExploitSignal"
        },
        {
          "docstring": "Aggregate exploitability insights from CVE feeds.",
          "end_lineno": 244,
          "lineno": 142,
          "methods": [
            {
              "calls": [
                "from_mapping",
                "fromisoformat",
                "get",
                "int",
                "isinstance",
                "items",
                "replace",
                "str"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 172,
              "lineno": 145,
              "name": "__init__"
            },
            {
              "calls": [
                "append",
                "evaluate",
                "get",
                "isoformat",
                "items",
                "len",
                "now",
                "round",
                "timedelta",
                "total_seconds"
              ],
              "cyclomatic_complexity": 16,
              "docstring": null,
              "end_lineno": 244,
              "lineno": 174,
              "name": "evaluate"
            }
          ],
          "name": "ExploitSignalEvaluator"
        },
        {
          "docstring": "Auto-refresh exploit feeds and annotate CVE records when stale.",
          "end_lineno": 517,
          "lineno": 247,
          "methods": [
            {
              "calls": [
                "Path",
                "Session",
                "_configure_session",
                "_normalise_feed_spec",
                "append",
                "bool",
                "ensure_secure_directory",
                "get",
                "int",
                "isinstance",
                "resolve"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 285,
              "lineno": 250,
              "name": "__init__"
            },
            {
              "calls": [
                "HTTPAdapter",
                "Retry",
                "mount"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 296,
              "lineno": 287,
              "name": "_configure_session"
            },
            {
              "calls": [
                "bool",
                "dict",
                "float",
                "get",
                "isinstance",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 328,
              "lineno": 298,
              "name": "_normalise_feed_spec"
            },
            {
              "calls": [
                "now",
                "timedelta"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 336,
              "lineno": 330,
              "name": "_needs_refresh"
            },
            {
              "calls": [
                "_apply_feed",
                "_needs_refresh",
                "any",
                "append",
                "get",
                "isoformat",
                "now",
                "replace",
                "setdefault",
                "update"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 371,
              "lineno": 338,
              "name": "refresh"
            },
            {
              "calls": [
                "Path",
                "ensure_secure_directory",
                "is_absolute",
                "resolve"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 380,
              "lineno": 373,
              "name": "_read_destination"
            },
            {
              "calls": [
                "Path",
                "_read_destination",
                "ensure_secure_directory",
                "exists",
                "get",
                "is_absolute",
                "isinstance",
                "len",
                "loads",
                "raise_for_status",
                "read_text",
                "resolve",
                "str",
                "write_text"
              ],
              "cyclomatic_complexity": 19,
              "docstring": null,
              "end_lineno": 451,
              "lineno": 382,
              "name": "_load_feed_data"
            },
            {
              "calls": [
                "_extract_cve_id",
                "_extract_nested_value",
                "_load_feed_data",
                "bool",
                "get",
                "isinstance",
                "lower",
                "setdefault",
                "str",
                "update"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 490,
              "lineno": 453,
              "name": "_apply_feed"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "split",
                "str"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 506,
              "lineno": 493,
              "name": "_extract_nested_value"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 517,
              "lineno": 509,
              "name": "_extract_cve_id"
            }
          ],
          "name": "ExploitFeedRefresher"
        }
      ],
      "docstring": "Exploit signal evaluation utilities derived from overlay configuration.",
      "functions": [
        {
          "calls": [
            "get",
            "isinstance"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 27,
          "name": "_iter_dict"
        },
        {
          "calls": [
            "_iter_dict",
            "split",
            "str"
          ],
          "cyclomatic_complexity": 6,
          "docstring": "Return the first non-null value for a list of candidate field paths.",
          "end_lineno": 48,
          "lineno": 36,
          "name": "_extract_value"
        },
        {
          "calls": [
            "ExploitFeedRefresher",
            "NormalizedCVEFeed",
            "get",
            "refresh"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 530,
          "lineno": 520,
          "name": "_refresh_named_feed"
        },
        {
          "calls": [
            "_refresh_named_feed",
            "load_overlay"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 535,
          "lineno": 533,
          "name": "load_latest_kev_feed"
        },
        {
          "calls": [
            "_refresh_named_feed",
            "load_overlay"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 540,
          "lineno": 538,
          "name": "load_latest_epss_feed"
        },
        {
          "calls": [
            "exception",
            "info",
            "load_latest_epss_feed",
            "load_latest_kev_feed",
            "load_overlay"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 552,
          "lineno": 543,
          "name": "refresh_exploit_feeds"
        },
        {
          "calls": [
            "BackgroundScheduler",
            "add_job",
            "info",
            "register",
            "shutdown",
            "start",
            "warning"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 568,
          "lineno": 555,
          "name": "_start_scheduler"
        }
      ],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "atexit",
        "core.configuration",
        "core.paths",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "requests",
        "requests.adapters",
        "typing",
        "urllib3.util"
      ]
    },
    "core/feature_matrix.py": {
      "classes": [],
      "docstring": "Feature matrix aggregation utilities for FixOps pipeline runs.",
      "functions": [
        {
          "calls": [
            "dict",
            "isinstance"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 11,
          "lineno": 8,
          "name": "_as_mapping"
        },
        {
          "calls": [
            "isinstance",
            "list"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 17,
          "lineno": 14,
          "name": "_as_sequence"
        },
        {
          "calls": [
            "int"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 24,
          "lineno": 20,
          "name": "_to_int"
        },
        {
          "calls": [
            "float"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 31,
          "lineno": 27,
          "name": "_to_float"
        },
        {
          "calls": [
            "_as_mapping",
            "get"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 34,
          "name": "_guardrail_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_to_float",
            "_to_int",
            "get"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 53,
          "lineno": 43,
          "name": "_context_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_float",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 56,
          "name": "_onboarding_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "get",
            "len",
            "sum"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 80,
          "lineno": 68,
          "name": "_compliance_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 98,
          "lineno": 83,
          "name": "_policy_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "bool",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 111,
          "lineno": 101,
          "name": "_evidence_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_float",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 122,
          "lineno": 114,
          "name": "_analytics_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_to_int",
            "get",
            "isinstance",
            "list"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 138,
          "lineno": 125,
          "name": "_ai_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_int",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 149,
          "lineno": 141,
          "name": "_exploit_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_float",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 166,
          "lineno": 152,
          "name": "_probabilistic_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_int",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 177,
          "lineno": 169,
          "name": "_ssdlc_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 191,
          "lineno": 180,
          "name": "_iac_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_to_int",
            "get"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 201,
          "lineno": 194,
          "name": "_tenancy_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "_to_float",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 213,
          "lineno": 204,
          "name": "_performance_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "get",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 221,
          "lineno": 216,
          "name": "_pricing_metrics"
        },
        {
          "calls": [
            "_as_mapping",
            "_as_sequence",
            "get",
            "items",
            "len",
            "metrics_builder",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 7,
          "docstring": "Return a feature coverage matrix derived from a pipeline run result.",
          "end_lineno": 273,
          "lineno": 243,
          "name": "build_feature_matrix"
        }
      ],
      "imports": [
        "__future__",
        "collections.abc",
        "typing"
      ]
    },
    "core/feedback.py": {
      "classes": [
        {
          "docstring": "Persist feedback decisions to a secure directory.",
          "end_lineno": 224,
          "lineno": 24,
          "methods": [
            {
              "calls": [
                "ConfluenceConnector",
                "FeedbackOutcomeStore",
                "JiraConnector",
                "Path",
                "ensure_secure_directory",
                "get",
                "resolve",
                "update"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 61,
              "lineno": 27,
              "name": "__init__"
            },
            {
              "calls": [
                "ValueError",
                "append",
                "get",
                "int",
                "isinstance",
                "match",
                "strip",
                "time"
              ],
              "cyclomatic_complexity": 22,
              "docstring": null,
              "end_lineno": 106,
              "lineno": 63,
              "name": "_validate_payload"
            },
            {
              "calls": [
                "_forward_to_connectors",
                "_validate_payload",
                "dumps",
                "ensure_secure_directory",
                "exception",
                "open",
                "record",
                "record_feedback_event",
                "setdefault",
                "str",
                "write"
              ],
              "cyclomatic_complexity": 5,
              "docstring": "Write a validated feedback entry to disk.",
              "end_lineno": 135,
              "lineno": 108,
              "name": "record"
            },
            {
              "calls": [
                "_send_to_connector",
                "dict",
                "exception",
                "get",
                "isinstance",
                "items",
                "setdefault",
                "str",
                "to_dict"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 161,
              "lineno": 137,
              "name": "_forward_to_connectors"
            },
            {
              "calls": [
                "create_issue",
                "create_page",
                "escape",
                "format",
                "get",
                "hasattr",
                "isinstance",
                "join",
                "list",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 224,
              "lineno": 163,
              "name": "_send_to_connector"
            }
          ],
          "name": "FeedbackRecorder"
        }
      ],
      "docstring": "Feedback capture utilities respecting overlay configuration.",
      "functions": [],
      "imports": [
        "__future__",
        "core.analytics",
        "core.configuration",
        "core.connectors",
        "core.paths",
        "html",
        "json",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ]
    },
    "core/iac.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 58,
          "lineno": 25,
          "methods": [
            {
              "calls": [
                "ValueError",
                "_normalise_tokens",
                "cls",
                "get",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 58,
              "lineno": 34,
              "name": "from_mapping"
            }
          ],
          "name": "IACTarget"
        },
        {
          "docstring": "Evaluate IaC coverage across multi-cloud and on-prem deployments.",
          "end_lineno": 169,
          "lineno": 61,
          "methods": [
            {
              "calls": [
                "append",
                "dict",
                "from_mapping",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 75,
              "lineno": 64,
              "name": "__init__"
            },
            {
              "calls": [
                "_normalise_tokens",
                "add",
                "any",
                "append",
                "get",
                "isdisjoint",
                "isinstance",
                "set",
                "sorted",
                "str",
                "strip",
                "update"
              ],
              "cyclomatic_complexity": 17,
              "docstring": null,
              "end_lineno": 169,
              "lineno": 77,
              "name": "evaluate"
            }
          ],
          "name": "IaCPostureEvaluator"
        }
      ],
      "docstring": "Infrastructure-as-code posture evaluation utilities.",
      "functions": [
        {
          "calls": [
            "add",
            "isinstance",
            "lower",
            "set",
            "strip"
          ],
          "cyclomatic_complexity": 8,
          "docstring": null,
          "end_lineno": 21,
          "lineno": 8,
          "name": "_normalise_tokens"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "core/modules.py": {
      "classes": [
        {
          "docstring": "Context supplied to custom modules executed by the orchestrator.",
          "end_lineno": 29,
          "lineno": 15,
          "methods": [],
          "name": "PipelineContext"
        }
      ],
      "docstring": "Utility helpers for overlay-driven pipeline modules.",
      "functions": [
        {
          "calls": [
            "ImportError",
            "TypeError",
            "ValueError",
            "callable",
            "getattr",
            "import_module",
            "rsplit",
            "split"
          ],
          "cyclomatic_complexity": 6,
          "docstring": "Import a custom module callable from a string path.",
          "end_lineno": 54,
          "lineno": 32,
          "name": "_resolve_callable"
        },
        {
          "calls": [
            "_resolve_callable",
            "append",
            "get",
            "handler",
            "isinstance",
            "str",
            "strip",
            "update"
          ],
          "cyclomatic_complexity": 15,
          "docstring": "Execute custom modules defined in the overlay and collect outcomes.",
          "end_lineno": 117,
          "lineno": 57,
          "name": "execute_custom_modules"
        }
      ],
      "imports": [
        "__future__",
        "core.configuration",
        "dataclasses",
        "importlib",
        "typing"
      ]
    },
    "core/onboarding.py": {
      "classes": [
        {
          "docstring": "Produce onboarding steps tailored to the active overlay mode.",
          "end_lineno": 43,
          "lineno": 9,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 14,
              "lineno": 12,
              "name": "__init__"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 22,
              "lineno": 16,
              "name": "_iter_steps"
            },
            {
              "calls": [
                "_iter_steps",
                "append",
                "extend",
                "get",
                "upper"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 43,
              "lineno": 24,
              "name": "build"
            }
          ],
          "name": "OnboardingGuide"
        }
      ],
      "docstring": "Overlay-guided onboarding helpers.",
      "functions": [],
      "imports": [
        "__future__",
        "core.configuration",
        "typing"
      ]
    },
    "core/paths.py": {
      "classes": [],
      "docstring": "Path utilities for enforcing secure data directories.",
      "functions": [
        {
          "calls": [
            "getuid"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 14,
          "lineno": 10,
          "name": "_current_uid"
        },
        {
          "calls": [
            "PermissionError",
            "exists",
            "hasattr",
            "stat"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 32,
          "lineno": 17,
          "name": "_validate_directory_security"
        },
        {
          "calls": [
            "PermissionError",
            "chmod",
            "mkdir",
            "resolve",
            "stat"
          ],
          "cyclomatic_complexity": 3,
          "docstring": "Create *path* if needed and enforce restrictive permissions.\n\nDirectories are created with the provided ``mode`` (default ``0o750``). If the\nresulting directory is world-writable the function raises ``PermissionError`` to\nprevent unsafe evidence or artefact storage locations from being used. The\ncaller receives the resolved ``Path`` object for further operations.",
          "end_lineno": 58,
          "lineno": 35,
          "name": "ensure_secure_directory"
        },
        {
          "calls": [
            "PermissionError",
            "_current_uid",
            "_validate_directory_security",
            "exists",
            "expanduser",
            "relative_to",
            "resolve",
            "tuple"
          ],
          "cyclomatic_complexity": 10,
          "docstring": "Resolve *path* and ensure it resides inside a secure allowlisted root.",
          "end_lineno": 95,
          "lineno": 61,
          "name": "verify_allowlisted_path"
        }
      ],
      "imports": [
        "__future__",
        "os",
        "pathlib",
        "stat",
        "typing"
      ]
    },
    "core/performance.py": {
      "classes": [
        {
          "docstring": "Estimate near real-time performance characteristics.",
          "end_lineno": 123,
          "lineno": 10,
          "methods": [
            {
              "calls": [
                "_coerce_mapping",
                "_to_float",
                "_to_int",
                "dict",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 23,
              "lineno": 13,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 29,
              "lineno": 26,
              "name": "_coerce_mapping"
            },
            {
              "calls": [
                "int"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 36,
              "lineno": 32,
              "name": "_to_int"
            },
            {
              "calls": [
                "float"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 43,
              "lineno": 39,
              "name": "_to_float"
            },
            {
              "calls": [
                "_to_int",
                "append",
                "get",
                "int",
                "isinstance",
                "len",
                "max",
                "str"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 123,
              "lineno": 45,
              "name": "simulate"
            }
          ],
          "name": "PerformanceSimulator"
        }
      ],
      "docstring": "Performance simulation utilities for FixOps pipeline runs.",
      "functions": [],
      "imports": [
        "__future__",
        "typing"
      ]
    },
    "core/policy.py": {
      "classes": [
        {
          "docstring": "Persist dispatched actions for auditability and downstream sync.",
          "end_lineno": 44,
          "lineno": 15,
          "methods": [
            {
              "calls": [
                "Path",
                "ensure_secure_directory",
                "get",
                "resolve"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 30,
              "lineno": 18,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "dumps",
                "get",
                "isoformat",
                "str",
                "strftime",
                "utcnow",
                "uuid4",
                "write_text"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 44,
              "lineno": 32,
              "name": "dispatch"
            }
          ],
          "name": "_AutomationDispatcher"
        },
        {
          "docstring": "Determine and execute policy-driven follow-up actions.",
          "end_lineno": 144,
          "lineno": 47,
          "methods": [
            {
              "calls": [
                "AutomationConnectors",
                "_AutomationDispatcher",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 63,
              "lineno": 50,
              "name": "__init__"
            },
            {
              "calls": [
                "get",
                "items",
                "setdefault",
                "uuid4"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 78,
              "lineno": 65,
              "name": "_render_action"
            },
            {
              "calls": [
                "bool",
                "get",
                "int"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 99,
              "lineno": 80,
              "name": "_should_trigger"
            },
            {
              "calls": [
                "_render_action",
                "_should_trigger",
                "append",
                "get",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 116,
              "lineno": 101,
              "name": "plan"
            },
            {
              "calls": [
                "append",
                "deliver",
                "dict",
                "dispatch",
                "get",
                "len",
                "str",
                "to_dict"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 144,
              "lineno": 118,
              "name": "execute"
            }
          ],
          "name": "PolicyAutomation"
        }
      ],
      "docstring": "Policy automation planner for FixOps.",
      "functions": [],
      "imports": [
        "__future__",
        "core.configuration",
        "core.connectors",
        "core.paths",
        "datetime",
        "json",
        "pathlib",
        "typing",
        "uuid"
      ]
    },
    "core/probabilistic.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 180,
          "lineno": 166,
          "methods": [
            {
              "calls": [
                "items",
                "round"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 180,
              "lineno": 172,
              "name": "to_dict"
            }
          ],
          "name": "ComponentForecast"
        },
        {
          "docstring": null,
          "end_lineno": 205,
          "lineno": 184,
          "methods": [
            {
              "calls": [
                "items",
                "round"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 205,
              "lineno": 192,
              "name": "to_dict"
            }
          ],
          "name": "CalibrationResult"
        },
        {
          "docstring": "Combine Bayesian priors and Markov transitions for severity forecasting.",
          "end_lineno": 639,
          "lineno": 208,
          "methods": [
            {
              "calls": [
                "_default_transitions",
                "_normalise_prior",
                "_normalise_transition_row",
                "_severity_index",
                "dict",
                "float",
                "get",
                "int",
                "isinstance",
                "items",
                "lower",
                "max",
                "str"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 235,
              "lineno": 211,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 244,
              "lineno": 238,
              "name": "_default_transitions"
            },
            {
              "calls": [
                "_coerce_severity",
                "abs",
                "append",
                "float",
                "items",
                "round",
                "str"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 272,
              "lineno": 246,
              "name": "validate_transitions"
            },
            {
              "calls": [
                "_coerce_severity",
                "_default_transitions",
                "_normalise_transition_row",
                "dict",
                "float",
                "get",
                "items"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 300,
              "lineno": 274,
              "name": "_calibrate_transitions"
            },
            {
              "calls": [
                "CalibrationResult",
                "ValueError",
                "_calibrate_transitions",
                "_chain_diagnostics",
                "_coerce_severity",
                "_extract_state_sequence",
                "_posterior",
                "get",
                "isinstance",
                "len",
                "setdefault",
                "validate_transitions",
                "zip"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 355,
              "lineno": 302,
              "name": "calibrate"
            },
            {
              "calls": [
                "float",
                "get",
                "items",
                "lower",
                "max",
                "str",
                "sum",
                "values"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 371,
              "lineno": 357,
              "name": "_posterior"
            },
            {
              "calls": [
                "get",
                "items",
                "lower",
                "str",
                "sum",
                "values"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 385,
              "lineno": 373,
              "name": "_forecast_next_state"
            },
            {
              "calls": [
                "_coerce_severity",
                "_default_transitions",
                "append",
                "enumerate",
                "float",
                "get",
                "isinstance",
                "items",
                "len",
                "list",
                "sum"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 412,
              "lineno": 387,
              "name": "_transition_matrix"
            },
            {
              "calls": [
                "abs",
                "len",
                "max",
                "range",
                "sum",
                "zip"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 439,
              "lineno": 414,
              "name": "_stationary_distribution"
            },
            {
              "calls": [
                "abs",
                "len",
                "range",
                "sqrt",
                "sum"
              ],
              "cyclomatic_complexity": 20,
              "docstring": null,
              "end_lineno": 480,
              "lineno": 441,
              "name": "_second_eigenvalue"
            },
            {
              "calls": [
                "ceil",
                "int",
                "len",
                "log",
                "max",
                "min",
                "values"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 488,
              "lineno": 482,
              "name": "_mixing_time"
            },
            {
              "calls": [
                "float",
                "get",
                "len",
                "max",
                "range",
                "sum"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 516,
              "lineno": 490,
              "name": "_multi_step_projection"
            },
            {
              "calls": [
                "_mixing_time",
                "_second_eigenvalue",
                "_stationary_distribution",
                "_transition_matrix",
                "items",
                "max",
                "min",
                "round"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 531,
              "lineno": 518,
              "name": "_chain_diagnostics"
            },
            {
              "calls": [
                "ComponentForecast",
                "_highest_severity",
                "_severity_index",
                "append",
                "dict",
                "get",
                "isinstance",
                "items",
                "sort",
                "str",
                "sum"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 559,
              "lineno": 533,
              "name": "_component_forecasts"
            },
            {
              "calls": [
                "_component_forecasts",
                "_entropy",
                "_forecast_next_state",
                "_mixing_time",
                "_multi_step_projection",
                "_posterior",
                "_second_eigenvalue",
                "_severity_index",
                "_stationary_distribution",
                "_transition_matrix",
                "append",
                "get",
                "isinstance",
                "items",
                "join",
                "max",
                "min",
                "pow",
                "round",
                "sum",
                "to_dict"
              ],
              "cyclomatic_complexity": 22,
              "docstring": null,
              "end_lineno": 639,
              "lineno": 561,
              "name": "evaluate"
            }
          ],
          "name": "ProbabilisticForecastEngine"
        }
      ],
      "docstring": "Probabilistic risk forecasting utilities for FixOps.",
      "functions": [
        {
          "calls": [
            "get",
            "lower",
            "str",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 11,
          "name": "_coerce_severity"
        },
        {
          "calls": [
            "_coerce_severity",
            "append",
            "get",
            "isinstance"
          ],
          "cyclomatic_complexity": 14,
          "docstring": null,
          "end_lineno": 67,
          "lineno": 32,
          "name": "_extract_state_sequence"
        },
        {
          "calls": [
            "index"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 74,
          "lineno": 70,
          "name": "_severity_index"
        },
        {
          "calls": [
            "float",
            "items",
            "lower",
            "str"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 91,
          "lineno": 77,
          "name": "_normalise_transition_row"
        },
        {
          "calls": [
            "float",
            "items",
            "lower",
            "str",
            "values"
          ],
          "cyclomatic_complexity": 10,
          "docstring": null,
          "end_lineno": 112,
          "lineno": 94,
          "name": "_normalise_prior"
        },
        {
          "calls": [
            "log2",
            "values"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 121,
          "lineno": 115,
          "name": "_entropy"
        },
        {
          "calls": [
            "_severity_index",
            "get",
            "isinstance",
            "lower",
            "str"
          ],
          "cyclomatic_complexity": 18,
          "docstring": null,
          "end_lineno": 162,
          "lineno": 124,
          "name": "_highest_severity"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "math",
        "typing"
      ]
    },
    "core/ssdlc.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 18,
          "lineno": 14,
          "methods": [],
          "name": "RequirementResult"
        },
        {
          "docstring": null,
          "end_lineno": 27,
          "lineno": 22,
          "methods": [],
          "name": "StageResult"
        },
        {
          "docstring": "Evaluate overlay-defined SSDLC requirements against pipeline artefacts.",
          "end_lineno": 382,
          "lineno": 30,
          "methods": [
            {
              "calls": [
                "_parse_stages",
                "dict",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 35,
              "lineno": 33,
              "name": "__init__"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 14,
              "docstring": null,
              "end_lineno": 68,
              "lineno": 38,
              "name": "_parse_stages"
            },
            {
              "calls": [
                "RequirementResult",
                "StageResult",
                "_build_summary",
                "_check_requirement",
                "_serialise_stage",
                "append",
                "get"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 130,
              "lineno": 70,
              "name": "evaluate"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 148,
              "lineno": 133,
              "name": "_serialise_stage"
            },
            {
              "calls": [
                "append",
                "len"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 170,
              "lineno": 151,
              "name": "_build_summary"
            },
            {
              "calls": [
                "evaluator",
                "get",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 216,
              "lineno": 172,
              "name": "_check_requirement"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "sum"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 224,
              "lineno": 219,
              "name": "_check_design"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "items",
                "lower",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 238,
              "lineno": 227,
              "name": "_check_threat_model"
            },
            {
              "calls": [
                "get",
                "join"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 246,
              "lineno": 241,
              "name": "_check_ai_register"
            },
            {
              "calls": [
                "get",
                "getattr",
                "hasattr",
                "int",
                "len"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 258,
              "lineno": 249,
              "name": "_check_sbom"
            },
            {
              "calls": [
                "get",
                "getattr",
                "len"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 277,
              "lineno": 261,
              "name": "_check_dependency_pinning"
            },
            {
              "calls": [
                "get",
                "getattr",
                "hasattr",
                "len"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 289,
              "lineno": 280,
              "name": "_check_sarif"
            },
            {
              "calls": [
                "get"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 299,
              "lineno": 292,
              "name": "_check_guardrails"
            },
            {
              "calls": [
                "get",
                "getattr",
                "len",
                "sum"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 308,
              "lineno": 302,
              "name": "_check_cve"
            },
            {
              "calls": [
                "get",
                "int",
                "isinstance"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 326,
              "lineno": 311,
              "name": "_check_policy_automation"
            },
            {
              "calls": [
                "all",
                "any",
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 339,
              "lineno": 329,
              "name": "_check_compliance"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "join",
                "sorted",
                "str"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 354,
              "lineno": 342,
              "name": "_check_deploy_approvals"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 362,
              "lineno": 357,
              "name": "_check_evidence"
            },
            {
              "calls": [
                "get",
                "intersection",
                "isinstance",
                "set"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 375,
              "lineno": 365,
              "name": "_check_observability"
            },
            {
              "calls": [
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 382,
              "lineno": 378,
              "name": "_check_feedback_loop"
            }
          ],
          "name": "SSDLCEvaluator"
        }
      ],
      "docstring": "Lifecycle evaluation across Secure SDLC stages.",
      "functions": [],
      "imports": [
        "__future__",
        "core.configuration",
        "dataclasses",
        "typing"
      ]
    },
    "core/stage_runner.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 32,
          "lineno": 23,
          "methods": [],
          "name": "StageSummary"
        },
        {
          "docstring": "Coordinate canonical IO handling for the FixOps stages.",
          "end_lineno": 848,
          "lineno": 35,
          "methods": [
            {
              "calls": [
                "InputNormalizer"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 69,
              "lineno": 65,
              "name": "__init__"
            },
            {
              "calls": [
                "FileNotFoundError",
                "StageSummary",
                "ValueError",
                "_load_design_payload",
                "_resolve_identity",
                "_signing_available",
                "append",
                "append_transparency_index",
                "copy2",
                "dumps",
                "encode",
                "ensure_ids",
                "ensure_run",
                "exists",
                "expanduser",
                "get",
                "getattr",
                "lower",
                "mkdir",
                "print",
                "processor",
                "read_bytes",
                "resolve",
                "save_input",
                "sign_manifest",
                "startswith",
                "str",
                "strip",
                "verify_manifest",
                "write_output",
                "write_signed_manifest"
              ],
              "cyclomatic_complexity": 27,
              "docstring": null,
              "end_lineno": 180,
              "lineno": 72,
              "name": "run_stage"
            },
            {
              "calls": [
                "BytesIO",
                "_assign_requirement_ids",
                "_derive_ssvc_anchor",
                "_parse_requirements"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 202,
              "lineno": 183,
              "name": "_process_requirements"
            },
            {
              "calls": [
                "_component_token",
                "_design_risk_score",
                "dict",
                "get",
                "isinstance",
                "setdefault"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 223,
              "lineno": 204,
              "name": "_process_design"
            },
            {
              "calls": [
                "Path",
                "ValueError",
                "_read_optional_json",
                "append",
                "exists",
                "get",
                "getattr",
                "isinstance",
                "len",
                "load_sbom",
                "lower",
                "min",
                "read_bytes",
                "relative_to",
                "round",
                "save_input",
                "split",
                "str",
                "to_dict"
              ],
              "cyclomatic_complexity": 16,
              "docstring": null,
              "end_lineno": 274,
              "lineno": 225,
              "name": "_process_build"
            },
            {
              "calls": [
                "Counter",
                "_load_test_inputs",
                "_read_optional_json",
                "float",
                "get",
                "isinstance",
                "len",
                "min",
                "round"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 309,
              "lineno": 276,
              "name": "_process_test"
            },
            {
              "calls": [
                "ValueError",
                "_analyse_posture",
                "_control_evidence",
                "_extract_digests",
                "_load_deploy_payload",
                "get",
                "min",
                "round"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 338,
              "lineno": 311,
              "name": "_process_deploy"
            },
            {
              "calls": [
                "Path",
                "_read_optional_json",
                "append",
                "decode",
                "get",
                "isinstance",
                "list",
                "loads",
                "lower",
                "max",
                "min",
                "round",
                "str"
              ],
              "cyclomatic_complexity": 19,
              "docstring": null,
              "end_lineno": 381,
              "lineno": 340,
              "name": "_process_operate"
            },
            {
              "calls": [
                "ZipFile",
                "_bundle_manifest",
                "_collect_documents",
                "_compliance_rollup",
                "_decision_factors",
                "_marketplace_recommendations",
                "_write_evidence_bundle",
                "decode",
                "dumps",
                "encode",
                "get",
                "isinstance",
                "len",
                "loads",
                "lower",
                "min",
                "round",
                "write_binary_output",
                "writestr"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 432,
              "lineno": 383,
              "name": "_process_decision"
            },
            {
              "calls": [
                "bool",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 436,
              "lineno": 435,
              "name": "_signing_available"
            },
            {
              "calls": [
                "DictReader",
                "StringIO",
                "any",
                "decode",
                "loads",
                "lower",
                "strip",
                "values"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 448,
              "lineno": 438,
              "name": "_load_design_payload"
            },
            {
              "calls": [
                "DictReader",
                "TextIOWrapper",
                "_normalise_requirement",
                "any",
                "append",
                "decode",
                "get",
                "getvalue",
                "isinstance",
                "loads",
                "seek",
                "startswith",
                "strip",
                "values"
              ],
              "cyclomatic_complexity": 8,
              "docstring": null,
              "end_lineno": 464,
              "lineno": 450,
              "name": "_parse_requirements"
            },
            {
              "calls": [
                "add",
                "append",
                "dict",
                "get",
                "set",
                "setdefault",
                "startswith",
                "str",
                "strip",
                "upper"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 487,
              "lineno": 466,
              "name": "_assign_requirement_ids"
            },
            {
              "calls": [
                "_as_bool",
                "get",
                "isinstance",
                "lower",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 505,
              "lineno": 489,
              "name": "_normalise_requirement"
            },
            {
              "calls": [
                "any",
                "get"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 516,
              "lineno": 507,
              "name": "_derive_ssvc_anchor"
            },
            {
              "calls": [
                "isalnum",
                "join",
                "lower",
                "replace",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 521,
              "lineno": 518,
              "name": "_component_token"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower",
                "min",
                "round",
                "str"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 534,
              "lineno": 523,
              "name": "_design_risk_score"
            },
            {
              "calls": [
                "append",
                "decode",
                "exists",
                "get",
                "isinstance",
                "load_sarif",
                "loads",
                "lower",
                "read_bytes",
                "read_text",
                "save_input"
              ],
              "cyclomatic_complexity": 17,
              "docstring": null,
              "end_lineno": 577,
              "lineno": 536,
              "name": "_load_test_inputs"
            },
            {
              "calls": [
                "ValueError",
                "decode",
                "isinstance",
                "loads",
                "lstrip",
                "safe_load",
                "startswith"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 604,
              "lineno": 579,
              "name": "_load_deploy_payload"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "str"
              ],
              "cyclomatic_complexity": 24,
              "docstring": null,
              "end_lineno": 641,
              "lineno": 606,
              "name": "_analyse_posture"
            },
            {
              "calls": [
                "append",
                "exists",
                "get",
                "isinstance",
                "loads",
                "read_text"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 654,
              "lineno": 643,
              "name": "_extract_digests"
            },
            {
              "calls": [
                "append",
                "get"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 674,
              "lineno": 656,
              "name": "_control_evidence"
            },
            {
              "calls": [
                "exists",
                "get",
                "isinstance",
                "items",
                "loads",
                "read_text",
                "split"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 698,
              "lineno": 676,
              "name": "_collect_documents"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "title"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 751,
              "lineno": 700,
              "name": "_decision_factors"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "items",
                "len",
                "round",
                "setdefault",
                "sorted",
                "split",
                "str",
                "sum"
              ],
              "cyclomatic_complexity": 15,
              "docstring": null,
              "end_lineno": 783,
              "lineno": 753,
              "name": "_compliance_rollup"
            },
            {
              "calls": [
                "list",
                "str"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 794,
              "lineno": 785,
              "name": "_marketplace_recommendations"
            },
            {
              "calls": [
                "ZipFile",
                "dumps",
                "get",
                "isinstance",
                "items",
                "writestr"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 803,
              "lineno": 796,
              "name": "_write_evidence_bundle"
            },
            {
              "calls": [
                "dumps",
                "encode",
                "get",
                "hexdigest",
                "isinstance",
                "isoformat",
                "items",
                "sha256",
                "utcnow"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 817,
              "lineno": 805,
              "name": "_bundle_manifest"
            },
            {
              "calls": [
                "loads",
                "read_text"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 827,
              "lineno": 819,
              "name": "_read_optional_json"
            },
            {
              "calls": [
                "bool",
                "isinstance",
                "lower",
                "strip"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 834,
              "lineno": 829,
              "name": "_as_bool"
            },
            {
              "calls": [
                "isinstance",
                "match",
                "strip",
                "upper"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 848,
              "lineno": 836,
              "name": "_resolve_identity"
            }
          ],
          "name": "StageRunner"
        }
      ],
      "docstring": "Unified per-stage processor used by the CLI and ingest API.",
      "functions": [],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "collections",
        "csv",
        "dataclasses",
        "datetime",
        "hashlib",
        "io",
        "json",
        "os",
        "pathlib",
        "re",
        "shutil",
        "typing",
        "zipfile"
      ]
    },
    "core/storage.py": {
      "classes": [
        {
          "docstring": "Persist normalised artefacts on disk for post-run analysis.",
          "end_lineno": 95,
          "lineno": 27,
          "methods": [
            {
              "calls": [
                "Path",
                "ensure_secure_directory",
                "resolve",
                "tuple",
                "verify_allowlisted_path"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 40,
              "lineno": 30,
              "name": "__init__"
            },
            {
              "calls": [
                "ensure_secure_directory",
                "verify_allowlisted_path"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 46,
              "lineno": 42,
              "name": "_stage_directory"
            },
            {
              "calls": [
                "_serialise_payload",
                "_stage_directory",
                "dict",
                "dumps",
                "isoformat",
                "replace",
                "str",
                "utcnow",
                "uuid4",
                "write_bytes",
                "write_text"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 83,
              "lineno": 48,
              "name": "persist"
            },
            {
              "calls": [
                "items"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 95,
              "lineno": 86,
              "name": "summarise"
            }
          ],
          "name": "ArtefactArchive"
        }
      ],
      "docstring": "Artefact archival utilities for persisting uploaded inputs.",
      "functions": [
        {
          "calls": [
            "_serialise_payload",
            "callable",
            "getattr",
            "hasattr",
            "isinstance",
            "items",
            "str",
            "to_dict"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 24,
          "lineno": 13,
          "name": "_serialise_payload"
        }
      ],
      "imports": [
        "__future__",
        "core.paths",
        "datetime",
        "json",
        "pathlib",
        "typing",
        "uuid"
      ]
    },
    "core/tenancy.py": {
      "classes": [
        {
          "docstring": "Summarise tenant health and lifecycle status.",
          "end_lineno": 136,
          "lineno": 11,
          "methods": [
            {
              "calls": [
                "_coerce_mapping",
                "_parse_tenants",
                "dict",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 18,
              "lineno": 14,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 24,
              "lineno": 21,
              "name": "_coerce_mapping"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "lower",
                "str",
                "strip",
                "title"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 58,
              "lineno": 26,
              "name": "_parse_tenants"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "set",
                "str",
                "update"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 73,
              "lineno": 60,
              "name": "_resolve_required_modules"
            },
            {
              "calls": [
                "Counter",
                "_resolve_required_modules",
                "append",
                "dict",
                "get",
                "isinstance",
                "len",
                "sorted",
                "str",
                "title"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 136,
              "lineno": 75,
              "name": "evaluate"
            }
          ],
          "name": "TenantLifecycleManager"
        }
      ],
      "docstring": "Multi-tenant lifecycle evaluation helpers for FixOps.",
      "functions": [],
      "imports": [
        "__future__",
        "collections",
        "typing"
      ]
    },
    "create_minimal_tables.py": {
      "classes": [],
      "docstring": "Create minimal database tables for testing FixOps Enterprise",
      "functions": [
        {
          "calls": [
            "begin",
            "close",
            "execute",
            "health_check",
            "initialize",
            "print",
            "str",
            "text"
          ],
          "cyclomatic_complexity": 4,
          "docstring": "Create minimal database tables for testing",
          "end_lineno": 144,
          "lineno": 16,
          "name": "create_minimal_tables"
        }
      ],
      "imports": [
        "asyncio",
        "pathlib",
        "sqlalchemy",
        "src.db.session",
        "sys"
      ]
    },
    "create_tables.py": {
      "classes": [],
      "docstring": "Simple script to create database tables for FixOps Enterprise",
      "functions": [
        {
          "calls": [
            "begin",
            "close",
            "health_check",
            "initialize",
            "print",
            "run_sync",
            "str"
          ],
          "cyclomatic_complexity": 4,
          "docstring": "Create all database tables",
          "end_lineno": 40,
          "lineno": 16,
          "name": "create_tables"
        }
      ],
      "imports": [
        "asyncio",
        "pathlib",
        "src.db.session",
        "src.models.base_sqlite",
        "sys"
      ]
    },
    "enterprise/frontend/node_modules/flatted/python/flatted.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 22,
          "lineno": 19,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 22,
              "lineno": 20,
              "name": "__init__"
            }
          ],
          "name": "_Known"
        },
        {
          "docstring": null,
          "end_lineno": 26,
          "lineno": 24,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 26,
              "lineno": 25,
              "name": "__init__"
            }
          ],
          "name": "_String"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "append"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 29,
          "name": "_array_keys"
        },
        {
          "calls": [
            "append"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 41,
          "lineno": 37,
          "name": "_object_keys"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 44,
          "lineno": 43,
          "name": "_is_array"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 47,
          "lineno": 46,
          "name": "_is_object"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 50,
          "lineno": 49,
          "name": "_is_string"
        },
        {
          "calls": [
            "append",
            "len",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 57,
          "lineno": 52,
          "name": "_index"
        },
        {
          "calls": [
            "_ref",
            "int",
            "isinstance"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 59,
          "name": "_loop"
        },
        {
          "calls": [
            "_array_keys",
            "_is_array",
            "_is_object",
            "_loop",
            "_object_keys",
            "append"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 75,
          "lineno": 67,
          "name": "_ref"
        },
        {
          "calls": [
            "_index",
            "_is_array",
            "_is_object",
            "_is_string",
            "index"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 84,
          "lineno": 77,
          "name": "_relate"
        },
        {
          "calls": [
            "_is_array",
            "_is_object",
            "_relate",
            "append"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 99,
          "lineno": 86,
          "name": "_transform"
        },
        {
          "calls": [
            "_String",
            "_is_array",
            "_is_object",
            "_is_string",
            "_wrap"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 115,
          "lineno": 101,
          "name": "_wrap"
        },
        {
          "calls": [
            "_array_keys",
            "_is_array",
            "_is_object",
            "_loop",
            "_object_keys",
            "_wrap",
            "append",
            "isinstance",
            "loads"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 138,
          "lineno": 117,
          "name": "parse"
        },
        {
          "calls": [
            "_Known",
            "_index",
            "_transform",
            "append",
            "dumps",
            "int",
            "len"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 149,
          "lineno": 141,
          "name": "stringify"
        }
      ],
      "imports": [
        "json"
      ]
    },
    "fixops-enterprise/src/__init__.py": {
      "classes": [],
      "docstring": null,
      "functions": [],
      "imports": []
    },
    "fixops-enterprise/src/api/__init__.py": {
      "classes": [],
      "docstring": "FastAPI routers for FixOps blended backend.",
      "functions": [],
      "imports": []
    },
    "fixops-enterprise/src/api/dependencies.py": {
      "classes": [],
      "docstring": "Common FastAPI dependencies (auth, payload validation).",
      "functions": [
        {
          "calls": [
            "HTTPException",
            "get",
            "get_settings",
            "lower",
            "split",
            "startswith",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": "Ensure the request carries a valid bearer token.",
          "end_lineno": 22,
          "lineno": 13,
          "name": "authenticate"
        },
        {
          "calls": [
            "HTTPException",
            "body",
            "decode",
            "get",
            "get_settings",
            "isinstance",
            "len",
            "loads",
            "split",
            "str",
            "strip"
          ],
          "cyclomatic_complexity": 6,
          "docstring": "Validate request payload size and MIME type, returning parsed JSON.",
          "end_lineno": 44,
          "lineno": 25,
          "name": "validated_payload"
        },
        {
          "calls": [
            "Depends"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Compound dependency returning validated payload after authentication.",
          "end_lineno": 50,
          "lineno": 47,
          "name": "authenticated_payload"
        }
      ],
      "imports": [
        "__future__",
        "fastapi",
        "json",
        "src.config.settings",
        "typing"
      ]
    },
    "fixops-enterprise/src/api/v1/__init__.py": {
      "classes": [],
      "docstring": "Versioned API routers.",
      "functions": [],
      "imports": [
        "",
        "fastapi"
      ]
    },
    "fixops-enterprise/src/api/v1/artefacts.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 29,
          "lineno": 20,
          "methods": [],
          "name": "ArtefactSummary"
        }
      ],
      "docstring": "Unified artefact ingestion endpoint backed by the stage runner.",
      "functions": [
        {
          "calls": [
            "isinstance",
            "lower"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 37,
          "lineno": 32,
          "name": "_bool_from_form"
        },
        {
          "calls": [
            "ArtefactSummary",
            "Depends",
            "File",
            "Form",
            "HTTPException",
            "NamedTemporaryFile",
            "Path",
            "RunRegistry",
            "StageRunner",
            "_bool_from_form",
            "close",
            "lower",
            "post",
            "read",
            "run_stage",
            "str",
            "strip",
            "unlink",
            "write"
          ],
          "cyclomatic_complexity": 13,
          "docstring": null,
          "end_lineno": 100,
          "lineno": 41,
          "name": "ingest_artefact"
        }
      ],
      "imports": [
        "__future__",
        "core.stage_runner",
        "fastapi",
        "pathlib",
        "pydantic",
        "src.api.dependencies",
        "src.services",
        "src.services.run_registry",
        "tempfile",
        "typing"
      ]
    },
    "fixops-enterprise/src/api/v1/cicd.py": {
      "classes": [],
      "docstring": "CI/CD integration routes.",
      "functions": [
        {
          "calls": [
            "Depends",
            "HTTPException",
            "get",
            "handle_webhook",
            "lower",
            "post",
            "str"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 27,
          "lineno": 19,
          "name": "github_webhook"
        },
        {
          "calls": [
            "Depends",
            "ingest",
            "post"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 31,
          "name": "jenkins_ingest"
        },
        {
          "calls": [
            "Depends",
            "ingest",
            "post"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 39,
          "lineno": 37,
          "name": "sonarqube_ingest"
        }
      ],
      "imports": [
        "__future__",
        "fastapi",
        "src.api.dependencies",
        "src.services.ci_adapters",
        "src.services.runtime"
      ]
    },
    "fixops-enterprise/src/api/v1/evidence.py": {
      "classes": [],
      "docstring": "Evidence verification endpoints.",
      "functions": [
        {
          "calls": [
            "Depends",
            "HTTPException",
            "get",
            "isinstance",
            "verify_manifest"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 15,
          "name": "verify_evidence"
        }
      ],
      "imports": [
        "__future__",
        "fastapi",
        "src.api.dependencies",
        "src.services",
        "src.services.runtime"
      ]
    },
    "fixops-enterprise/src/api/v1/marketplace.py": {
      "classes": [],
      "docstring": "Marketplace API exposing remediation packs.",
      "functions": [
        {
          "calls": [
            "Depends",
            "HTTPException",
            "dict",
            "get",
            "get_pack"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 14,
          "name": "fetch_pack"
        }
      ],
      "imports": [
        "__future__",
        "fastapi",
        "src.api.dependencies",
        "src.services.marketplace"
      ]
    },
    "fixops-enterprise/src/config/__init__.py": {
      "classes": [],
      "docstring": null,
      "functions": [],
      "imports": []
    },
    "fixops-enterprise/src/config/settings.py": {
      "classes": [
        {
          "docstring": "Application configuration with environment overrides.",
          "end_lineno": 55,
          "lineno": 37,
          "methods": [
            {
              "calls": [
                "_coerce_origins"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 55,
              "lineno": 54,
              "name": "__post_init__"
            }
          ],
          "name": "Settings"
        }
      ],
      "docstring": "Minimal settings loader without external dependencies.",
      "functions": [
        {
          "calls": [
            "isinstance",
            "split",
            "str",
            "strip"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 16,
          "lineno": 11,
          "name": "_coerce_origins"
        },
        {
          "calls": [
            "get",
            "lower",
            "strip"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 23,
          "lineno": 19,
          "name": "_env_bool"
        },
        {
          "calls": [
            "get",
            "int"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 26,
          "name": "_env_int"
        },
        {
          "calls": [
            "Settings",
            "_coerce_origins",
            "_env_bool",
            "_env_int",
            "get",
            "lru_cache"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 75,
          "lineno": 59,
          "name": "get_settings"
        },
        {
          "calls": [
            "RuntimeError",
            "lower"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 81,
          "lineno": 78,
          "name": "resolve_allowed_origins"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "functools",
        "os",
        "typing"
      ]
    },
    "fixops-enterprise/src/core/__init__.py": {
      "classes": [],
      "docstring": null,
      "functions": [],
      "imports": []
    },
    "fixops-enterprise/src/core/middleware.py": {
      "classes": [
        {
          "docstring": "Attach simple performance headers to responses.",
          "end_lineno": 25,
          "lineno": 17,
          "methods": [
            {
              "calls": [
                "call_next",
                "perf_counter"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 25,
              "lineno": 20,
              "name": "dispatch"
            }
          ],
          "name": "PerformanceMiddleware"
        },
        {
          "docstring": "Add a conservative set of security headers to each response.",
          "end_lineno": 42,
          "lineno": 28,
          "methods": [
            {
              "calls": [
                "call_next",
                "items",
                "setdefault"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 42,
              "lineno": 38,
              "name": "dispatch"
            }
          ],
          "name": "SecurityHeadersMiddleware"
        },
        {
          "docstring": "Minimal token bucket rate limiter keyed by client IP.",
          "end_lineno": 92,
          "lineno": 45,
          "methods": [
            {
              "calls": [
                "Lock",
                "__init__",
                "bool",
                "get_settings",
                "getattr",
                "int",
                "max",
                "resolve_allowed_origins",
                "super"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 57,
              "lineno": 48,
              "name": "__init__"
            },
            {
              "calls": [
                "PlainTextResponse",
                "_client_ip",
                "_consume_token",
                "call_next",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 70,
              "lineno": 59,
              "name": "dispatch"
            },
            {
              "calls": [
                "get",
                "split",
                "strip"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 78,
              "lineno": 72,
              "name": "_client_ip"
            },
            {
              "calls": [
                "float",
                "get",
                "int",
                "max",
                "min",
                "monotonic"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 92,
              "lineno": 80,
              "name": "_consume_token"
            }
          ],
          "name": "RateLimitMiddleware"
        }
      ],
      "docstring": "Runtime middleware used by the FastAPI application.",
      "functions": [],
      "imports": [
        "__future__",
        "asyncio",
        "src.config.settings",
        "starlette.middleware.base",
        "starlette.requests",
        "starlette.responses",
        "starlette.types",
        "time",
        "typing"
      ]
    },
    "fixops-enterprise/src/main.py": {
      "classes": [],
      "docstring": "Application factory for FixOps blended backend.",
      "functions": [
        {
          "calls": [
            "_run_scheduler",
            "cancel",
            "create_task",
            "get_settings",
            "scheduler",
            "suppress"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 21,
          "name": "lifespan"
        },
        {
          "calls": [
            "FastAPI",
            "RuntimeError",
            "add_middleware",
            "error",
            "get_settings",
            "include_router",
            "lower"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 57,
          "lineno": 38,
          "name": "create_app"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "contextlib",
        "fastapi",
        "fastapi.middleware.cors",
        "src.api.v1",
        "src.config.settings",
        "src.core.middleware",
        "src.services.feeds_service",
        "structlog"
      ]
    },
    "fixops-enterprise/src/services/__init__.py": {
      "classes": [],
      "docstring": "Service exports for FixOps blended backend.",
      "functions": [],
      "imports": [
        "__future__",
        "run_registry"
      ]
    },
    "fixops-enterprise/src/services/ci_adapters/__init__.py": {
      "classes": [],
      "docstring": "CI adapter compatibility shims that route to the top-level integrations package.",
      "functions": [],
      "imports": [
        "__future__",
        "integrations.github.adapter",
        "integrations.jenkins.adapter",
        "integrations.sonarqube.adapter"
      ]
    },
    "fixops-enterprise/src/services/compliance.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 15,
          "lineno": 10,
          "methods": [],
          "name": "ControlRollup"
        },
        {
          "docstring": "Derive compliance posture from normalized controls.",
          "end_lineno": 117,
          "lineno": 18,
          "methods": [
            {
              "calls": [
                "ControlRollup",
                "append",
                "evaluate_opa",
                "get",
                "items",
                "keys",
                "len",
                "list",
                "lower",
                "max",
                "round",
                "setdefault",
                "str",
                "sum"
              ],
              "cyclomatic_complexity": 17,
              "docstring": null,
              "end_lineno": 83,
              "lineno": 23,
              "name": "evaluate"
            },
            {
              "calls": [
                "NamedTemporaryFile",
                "append",
                "decode",
                "dumps",
                "encode",
                "flush",
                "get",
                "isinstance",
                "loads",
                "run",
                "str",
                "which",
                "write"
              ],
              "cyclomatic_complexity": 8,
              "docstring": "Attempt to run inline Rego rules using local OPA CLI if available.",
              "end_lineno": 117,
              "lineno": 85,
              "name": "evaluate_opa"
            }
          ],
          "name": "ComplianceEngine"
        }
      ],
      "docstring": "Compliance evaluation utilities.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/decision_engine.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 24,
          "lineno": 17,
          "methods": [],
          "name": "DecisionOutcome"
        },
        {
          "docstring": "Derive risk verdicts from normalized findings.",
          "end_lineno": 286,
          "lineno": 27,
          "methods": [
            {
              "calls": [
                "ComplianceEngine",
                "EvidenceStore",
                "get_logger"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 40,
              "lineno": 37,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 44,
              "lineno": 43,
              "name": "evidence_store"
            },
            {
              "calls": [
                "DecisionOutcome",
                "_apply_signature",
                "_compliance_rollup",
                "_failing_controls",
                "_score_findings",
                "_top_factors",
                "create",
                "evaluate",
                "get",
                "get_recommendations",
                "isinstance",
                "list",
                "setdefault"
              ],
              "cyclomatic_complexity": 9,
              "docstring": null,
              "end_lineno": 98,
              "lineno": 46,
              "name": "evaluate"
            },
            {
              "calls": [
                "_weight",
                "len",
                "max",
                "min",
                "sum"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 109,
              "lineno": 100,
              "name": "_score_findings"
            },
            {
              "calls": [
                "get",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 113,
              "lineno": 111,
              "name": "_weight"
            },
            {
              "calls": [
                "attach_signature",
                "debug",
                "get",
                "get_active_kid",
                "info",
                "isinstance",
                "sign_manifest"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 129,
              "lineno": 115,
              "name": "_apply_signature"
            },
            {
              "calls": [
                "_compliance_factor",
                "_exploit_factor",
                "_severity_factor",
                "append",
                "sort"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 166,
              "lineno": 131,
              "name": "_top_factors"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "len",
                "list",
                "lower",
                "max",
                "round",
                "str",
                "title"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 193,
              "lineno": 168,
              "name": "_severity_factor"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "items",
                "join",
                "sorted",
                "str"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 224,
              "lineno": 195,
              "name": "_compliance_factor"
            },
            {
              "calls": [
                "append",
                "float",
                "get",
                "isinstance",
                "join",
                "len",
                "max"
              ],
              "cyclomatic_complexity": 13,
              "docstring": null,
              "end_lineno": 249,
              "lineno": 226,
              "name": "_exploit_factor"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "items",
                "len",
                "lower",
                "round",
                "setdefault",
                "sorted",
                "split",
                "str",
                "sum"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 271,
              "lineno": 251,
              "name": "_compliance_rollup"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "lower",
                "sorted",
                "str"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 286,
              "lineno": 273,
              "name": "_failing_controls"
            }
          ],
          "name": "DecisionEngine"
        }
      ],
      "docstring": "Simplified decision engine used by CI adapters.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "src.services",
        "src.services.compliance",
        "src.services.evidence",
        "src.services.marketplace",
        "structlog",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/evidence.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 23,
          "lineno": 17,
          "methods": [],
          "name": "EvidenceRecord"
        },
        {
          "docstring": "Simple in-memory evidence registry.",
          "end_lineno": 53,
          "lineno": 26,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 30,
              "lineno": 29,
              "name": "__init__"
            },
            {
              "calls": [
                "EvidenceRecord",
                "_canonicalize",
                "upper",
                "uuid4"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 36,
              "lineno": 32,
              "name": "create"
            },
            {
              "calls": [
                "get"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 39,
              "lineno": 38,
              "name": "get"
            },
            {
              "calls": [
                "KeyError",
                "get"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 53,
              "lineno": 41,
              "name": "attach_signature"
            }
          ],
          "name": "EvidenceStore"
        }
      ],
      "docstring": "In-memory evidence bundle store used for CI integrations.",
      "functions": [
        {
          "calls": [
            "dumps",
            "loads"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 13,
          "lineno": 12,
          "name": "_canonicalize"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "json",
        "time",
        "typing",
        "uuid"
      ]
    },
    "fixops-enterprise/src/services/feeds_service.py": {
      "classes": [
        {
          "docstring": "Lightweight shim replacing the legacy scheduler.",
          "end_lineno": 16,
          "lineno": 9,
          "methods": [
            {
              "calls": [
                "int",
                "max",
                "sleep"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 16,
              "lineno": 13,
              "name": "scheduler"
            }
          ],
          "name": "FeedsService"
        }
      ],
      "docstring": "Background feed refresh scheduler used by the demo application.",
      "functions": [],
      "imports": [
        "__future__",
        "asyncio",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/id_allocator.py": {
      "classes": [],
      "docstring": "Helpers for minting deterministic application and component identifiers.",
      "functions": [
        {
          "calls": [
            "_mint_app_id",
            "_mint_component_id",
            "deepcopy",
            "dict",
            "get",
            "isinstance",
            "setdefault",
            "str"
          ],
          "cyclomatic_complexity": 7,
          "docstring": "Return a copy of the design document with guaranteed identifiers.",
          "end_lineno": 27,
          "lineno": 13,
          "name": "ensure_ids"
        },
        {
          "calls": [
            "encode",
            "hexdigest",
            "int",
            "sha1"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 30,
          "name": "_mint_app_id"
        },
        {
          "calls": [
            "isalnum",
            "join",
            "lower",
            "split",
            "strip"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 36,
          "name": "_mint_component_id"
        }
      ],
      "imports": [
        "__future__",
        "copy",
        "hashlib",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/marketplace.py": {
      "classes": [],
      "docstring": "Marketplace helper utilities for demo remediation packs.",
      "functions": [
        {
          "calls": [
            "_load_pack",
            "append",
            "get"
          ],
          "cyclomatic_complexity": 4,
          "docstring": "Return remediation pack recommendations for failing controls.",
          "end_lineno": 36,
          "lineno": 20,
          "name": "get_recommendations"
        },
        {
          "calls": [
            "FileNotFoundError",
            "_load_pack",
            "startswith",
            "upper"
          ],
          "cyclomatic_complexity": 5,
          "docstring": "Return the pack metadata for the requested framework/control pair.",
          "end_lineno": 52,
          "lineno": 39,
          "name": "get_pack"
        },
        {
          "calls": [
            "exists",
            "get",
            "loads",
            "lru_cache",
            "read_text",
            "setdefault"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 67,
          "lineno": 56,
          "name": "_load_pack"
        }
      ],
      "imports": [
        "__future__",
        "functools",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/metrics.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 30,
          "lineno": 8,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 14,
              "lineno": 13,
              "name": "request_started"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 18,
              "lineno": 17,
              "name": "request_finished"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 22,
              "lineno": 21,
              "name": "record_request"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 26,
              "lineno": 25,
              "name": "rate_limit_triggered"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 30,
              "lineno": 29,
              "name": "get_rate_limit_triggers"
            }
          ],
          "name": "FixOpsMetrics"
        }
      ],
      "docstring": "Minimal metrics facade used by middleware.",
      "functions": [],
      "imports": [
        "__future__",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/run_registry.py": {
      "classes": [
        {
          "docstring": "Represents a materialised run folder for an application.",
          "end_lineno": 53,
          "lineno": 27,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 37,
              "lineno": 36,
              "name": "run_path"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 41,
              "lineno": 40,
              "name": "inputs_dir"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 45,
              "lineno": 44,
              "name": "outputs_dir"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 49,
              "lineno": 48,
              "name": "signed_outputs_dir"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 53,
              "lineno": 52,
              "name": "transparency_index"
            }
          ],
          "name": "RunContext"
        },
        {
          "docstring": "Persist stage inputs/outputs under ``artefacts/<app>/<run_id>``.",
          "end_lineno": 255,
          "lineno": 56,
          "methods": [
            {
              "calls": [
                "Path",
                "get",
                "mkdir",
                "resolve"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 63,
              "lineno": 59,
              "name": "__init__"
            },
            {
              "calls": [
                "_make_context",
                "_prepare_directories",
                "_write_latest_marker"
              ],
              "cyclomatic_complexity": 1,
              "docstring": "Create a brand new run directory for *app_id*.",
              "end_lineno": 73,
              "lineno": 67,
              "name": "create_run"
            },
            {
              "calls": [
                "FileNotFoundError",
                "RunContext",
                "_normalise_app_id",
                "_prepare_directories",
                "_write_latest_marker",
                "exists"
              ],
              "cyclomatic_complexity": 2,
              "docstring": "Re-open an existing run directory.",
              "end_lineno": 86,
              "lineno": 75,
              "name": "reopen_run"
            },
            {
              "calls": [
                "RunContext",
                "_latest_marker",
                "_normalise_app_id",
                "exists",
                "get",
                "isinstance",
                "loads",
                "read_text"
              ],
              "cyclomatic_complexity": 5,
              "docstring": "Return the most recent run for *app_id* if available.",
              "end_lineno": 105,
              "lineno": 88,
              "name": "active_run"
            },
            {
              "calls": [
                "RunContext",
                "_prepare_directories",
                "_write_latest_marker",
                "active_run",
                "create_run",
                "exists",
                "lower",
                "strip"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Return a run context, recycling runs only when appropriate.",
              "end_lineno": 144,
              "lineno": 107,
              "name": "ensure_run"
            },
            {
              "calls": [
                "_json_dumps",
                "bytes",
                "isinstance",
                "mkdir",
                "str",
                "write_bytes",
                "write_text"
              ],
              "cyclomatic_complexity": 5,
              "docstring": "Persist an input payload beneath the run's inputs directory.",
              "end_lineno": 165,
              "lineno": 146,
              "name": "save_input"
            },
            {
              "calls": [
                "ValueError",
                "_json_dumps",
                "mkdir",
                "write_text"
              ],
              "cyclomatic_complexity": 2,
              "docstring": "Persist *document* to the outputs directory and return the file path.",
              "end_lineno": 178,
              "lineno": 167,
              "name": "write_output"
            },
            {
              "calls": [
                "mkdir",
                "write_bytes"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 184,
              "lineno": 180,
              "name": "write_binary_output"
            },
            {
              "calls": [
                "_json_dumps",
                "mkdir",
                "write_text"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 192,
              "lineno": 186,
              "name": "write_signed_manifest"
            },
            {
              "calls": [
                "isoformat",
                "mkdir",
                "open",
                "utcnow",
                "write"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 202,
              "lineno": 194,
              "name": "append_transparency_index"
            },
            {
              "calls": [
                "_normalise_app_id",
                "exists",
                "is_dir",
                "iterdir",
                "sort"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 211,
              "lineno": 204,
              "name": "list_runs"
            },
            {
              "calls": [
                "RunContext",
                "_normalise_app_id",
                "exists",
                "strftime",
                "utcnow"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 225,
              "lineno": 215,
              "name": "_make_context"
            },
            {
              "calls": [
                "mkdir"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 229,
              "lineno": 227,
              "name": "_prepare_directories"
            },
            {
              "calls": [
                "_json_dumps",
                "_latest_marker",
                "isoformat",
                "mkdir",
                "utcnow",
                "write_text"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 238,
              "lineno": 231,
              "name": "_write_latest_marker"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 241,
              "lineno": 240,
              "name": "_latest_marker"
            },
            {
              "calls": [
                "dumps"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 245,
              "lineno": 244,
              "name": "_json_dumps"
            },
            {
              "calls": [
                "isalnum",
                "join",
                "strip"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 255,
              "lineno": 248,
              "name": "_normalise_app_id"
            }
          ],
          "name": "RunRegistry"
        }
      ],
      "docstring": "Lightweight artefact registry used by the unified stage runner.",
      "functions": [
        {
          "calls": [
            "create_run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 262,
          "lineno": 261,
          "name": "resolve_run"
        },
        {
          "calls": [
            "reopen_run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 266,
          "lineno": 265,
          "name": "reopen_run"
        },
        {
          "calls": [
            "list_runs"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 270,
          "lineno": 269,
          "name": "list_runs"
        }
      ],
      "imports": [
        "__future__",
        "dataclasses",
        "datetime",
        "json",
        "os",
        "pathlib",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/runtime.py": {
      "classes": [],
      "docstring": "Singleton services reused across API modules.",
      "functions": [],
      "imports": [
        "__future__",
        "src.services.compliance",
        "src.services.decision_engine",
        "src.services.evidence"
      ]
    },
    "fixops-enterprise/src/services/signing.py": {
      "classes": [
        {
          "docstring": "Raised when signing or verification fails.",
          "end_lineno": 21,
          "lineno": 20,
          "methods": [],
          "name": "SigningError"
        }
      ],
      "docstring": "Evidence signing helpers.",
      "functions": [
        {
          "calls": [
            "SigningError",
            "encode",
            "get_settings",
            "load_pem_private_key",
            "lru_cache"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 25,
          "name": "_load_private_key"
        },
        {
          "calls": [
            "dumps",
            "encode"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 37,
          "lineno": 36,
          "name": "_canonical_bytes"
        },
        {
          "calls": [
            "PKCS1v15",
            "SHA256",
            "_canonical_bytes",
            "_load_private_key",
            "b64encode",
            "decode",
            "get_active_kid",
            "hexdigest",
            "sha256",
            "sign"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Return a signing envelope for the manifest.\n\nThe returned mapping matches the demo contract by including the algorithm,\nconfigured key identifier, detached signature, and canonical digest of the\nunsigned document. Callers are expected to persist the envelope alongside\nthe manifest.",
          "end_lineno": 59,
          "lineno": 40,
          "name": "sign_manifest"
        },
        {
          "calls": [
            "PKCS1v15",
            "SHA256",
            "_canonical_bytes",
            "_load_private_key",
            "b64decode",
            "encode",
            "get",
            "hexdigest",
            "isinstance",
            "public_key",
            "sha256",
            "verify"
          ],
          "cyclomatic_complexity": 11,
          "docstring": "Verify signature using the configured signing key's public component.",
          "end_lineno": 100,
          "lineno": 62,
          "name": "verify_manifest"
        },
        {
          "calls": [
            "get_settings"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Expose configured key identifier for API responses.",
          "end_lineno": 106,
          "lineno": 103,
          "name": "get_active_kid"
        }
      ],
      "imports": [
        "__future__",
        "base64",
        "cryptography.hazmat.primitives",
        "cryptography.hazmat.primitives.asymmetric",
        "cryptography.hazmat.primitives.serialization",
        "functools",
        "hashlib",
        "json",
        "src.config.settings",
        "typing"
      ]
    },
    "fixops-enterprise/src/services/vex_ingestion.py": {
      "classes": [
        {
          "docstring": "Minimal placeholder that records ingested advisories.",
          "end_lineno": 21,
          "lineno": 8,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 12,
              "lineno": 11,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "extend",
                "len"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 17,
              "lineno": 14,
              "name": "ingest"
            },
            {
              "calls": [
                "list"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 21,
              "lineno": 20,
              "name": "advisories"
            }
          ],
          "name": "VEXIngestor"
        }
      ],
      "docstring": "Stub VEX ingestion service for test compatibility.",
      "functions": [],
      "imports": [
        "__future__",
        "typing"
      ]
    },
    "fixops-enterprise/src/utils/__init__.py": {
      "classes": [],
      "docstring": null,
      "functions": [],
      "imports": []
    },
    "fixops-enterprise/src/utils/logger.py": {
      "classes": [
        {
          "docstring": "Helpers for emitting latency and throughput signals.",
          "end_lineno": 101,
          "lineno": 58,
          "methods": [
            {
              "calls": [
                "bind",
                "get_logger",
                "getattr",
                "isoformat",
                "update",
                "utcnow"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 81,
              "lineno": 62,
              "name": "log_hot_path_performance"
            },
            {
              "calls": [
                "bind",
                "get_logger",
                "getattr",
                "isoformat",
                "update",
                "utcnow"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 101,
              "lineno": 84,
              "name": "log_database_operation"
            }
          ],
          "name": "PerformanceLogger"
        }
      ],
      "docstring": "Structured logging helpers for the FixOps runtime.",
      "functions": [
        {
          "calls": [
            "LoggerFactory",
            "StackInfoRenderer",
            "TimeStamper",
            "UnicodeDecoder",
            "configure"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Initialise a predictable structlog pipeline.",
          "end_lineno": 29,
          "lineno": 12,
          "name": "setup_structured_logging"
        },
        {
          "calls": [
            "bind",
            "dict",
            "get_logger",
            "info",
            "isoformat",
            "utcnow"
          ],
          "cyclomatic_complexity": 3,
          "docstring": "Emit a structured security audit record.",
          "end_lineno": 55,
          "lineno": 32,
          "name": "log_security_event"
        },
        {
          "calls": [
            "bind",
            "get_logger",
            "info"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 106,
          "lineno": 104,
          "name": "_log_background"
        },
        {
          "calls": [
            "_log_background",
            "create_task"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Fire and forget background log emission.",
          "end_lineno": 112,
          "lineno": 109,
          "name": "log_background_event"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "datetime",
        "structlog",
        "typing"
      ]
    },
    "frontend-akido-public/node_modules/flatted/python/flatted.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 22,
          "lineno": 19,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 22,
              "lineno": 20,
              "name": "__init__"
            }
          ],
          "name": "_Known"
        },
        {
          "docstring": null,
          "end_lineno": 26,
          "lineno": 24,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 26,
              "lineno": 25,
              "name": "__init__"
            }
          ],
          "name": "_String"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "append"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 29,
          "name": "_array_keys"
        },
        {
          "calls": [
            "append"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 41,
          "lineno": 37,
          "name": "_object_keys"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 44,
          "lineno": 43,
          "name": "_is_array"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 47,
          "lineno": 46,
          "name": "_is_object"
        },
        {
          "calls": [
            "isinstance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 50,
          "lineno": 49,
          "name": "_is_string"
        },
        {
          "calls": [
            "append",
            "len",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 57,
          "lineno": 52,
          "name": "_index"
        },
        {
          "calls": [
            "_ref",
            "int",
            "isinstance"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 59,
          "name": "_loop"
        },
        {
          "calls": [
            "_array_keys",
            "_is_array",
            "_is_object",
            "_loop",
            "_object_keys",
            "append"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 75,
          "lineno": 67,
          "name": "_ref"
        },
        {
          "calls": [
            "_index",
            "_is_array",
            "_is_object",
            "_is_string",
            "index"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 84,
          "lineno": 77,
          "name": "_relate"
        },
        {
          "calls": [
            "_is_array",
            "_is_object",
            "_relate",
            "append"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 99,
          "lineno": 86,
          "name": "_transform"
        },
        {
          "calls": [
            "_String",
            "_is_array",
            "_is_object",
            "_is_string",
            "_wrap"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 115,
          "lineno": 101,
          "name": "_wrap"
        },
        {
          "calls": [
            "_array_keys",
            "_is_array",
            "_is_object",
            "_loop",
            "_object_keys",
            "_wrap",
            "append",
            "isinstance",
            "loads"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 138,
          "lineno": 117,
          "name": "parse"
        },
        {
          "calls": [
            "_Known",
            "_index",
            "_transform",
            "append",
            "dumps",
            "int",
            "len"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 149,
          "lineno": 141,
          "name": "stringify"
        }
      ],
      "imports": [
        "json"
      ]
    },
    "integrations/__init__.py": {
      "classes": [],
      "docstring": "External system integrations used by FixOps.",
      "functions": [],
      "imports": []
    },
    "integrations/github/__init__.py": {
      "classes": [],
      "docstring": "GitHub integration adapters and webhooks.",
      "functions": [],
      "imports": [
        "adapter"
      ]
    },
    "integrations/github/adapter.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 19,
          "lineno": 16,
          "methods": [],
          "name": "GitHubComment"
        },
        {
          "docstring": "Handle GitHub webhook events and produce decision comments.",
          "end_lineno": 98,
          "lineno": 22,
          "methods": [
            {
              "calls": [
                "DecisionEngine"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 26,
              "lineno": 25,
              "name": "__init__"
            },
            {
              "calls": [
                "_build_submission",
                "_extract_pr",
                "_extract_repo",
                "_render_comment",
                "evaluate",
                "info"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 53,
              "lineno": 28,
              "name": "handle_webhook"
            },
            {
              "calls": [
                "ValueError",
                "get",
                "isinstance",
                "str"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 61,
              "lineno": 55,
              "name": "_extract_repo"
            },
            {
              "calls": [
                "ValueError",
                "get",
                "int",
                "isinstance"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 78,
              "lineno": 63,
              "name": "_extract_pr"
            },
            {
              "calls": [
                "get",
                "list"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 83,
              "lineno": 80,
              "name": "_build_submission"
            },
            {
              "calls": [
                "GitHubComment",
                "append",
                "get",
                "join",
                "upper"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 98,
              "lineno": 85,
              "name": "_render_comment"
            }
          ],
          "name": "GitHubCIAdapter"
        }
      ],
      "docstring": "GitHub push-model adapter for FixOps decisions.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "src.services.decision_engine",
        "structlog",
        "typing"
      ]
    },
    "integrations/jenkins/__init__.py": {
      "classes": [],
      "docstring": "Jenkins integration adapters and webhooks.",
      "functions": [],
      "imports": [
        "adapter"
      ]
    },
    "integrations/jenkins/adapter.py": {
      "classes": [
        {
          "docstring": "Accept SARIF/SBOM payloads from Jenkins and return signed verdicts.",
          "end_lineno": 72,
          "lineno": 15,
          "methods": [
            {
              "calls": [
                "DecisionEngine"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 19,
              "lineno": 18,
              "name": "__init__"
            },
            {
              "calls": [
                "_normalize",
                "evaluate",
                "info",
                "sign_manifest",
                "update"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 44,
              "lineno": 21,
              "name": "ingest"
            },
            {
              "calls": [
                "append",
                "get",
                "isinstance",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 15,
              "docstring": null,
              "end_lineno": 72,
              "lineno": 46,
              "name": "_normalize"
            }
          ],
          "name": "JenkinsCIAdapter"
        }
      ],
      "docstring": "Jenkins push ingest adapter.",
      "functions": [],
      "imports": [
        "__future__",
        "src.services",
        "src.services.decision_engine",
        "structlog",
        "typing"
      ]
    },
    "integrations/sonarqube/__init__.py": {
      "classes": [],
      "docstring": "SonarQube integration adapters and webhooks.",
      "functions": [],
      "imports": [
        "adapter"
      ]
    },
    "integrations/sonarqube/adapter.py": {
      "classes": [
        {
          "docstring": "Normalize SonarQube issues and forward them to the decision engine.",
          "end_lineno": 50,
          "lineno": 14,
          "methods": [
            {
              "calls": [
                "DecisionEngine"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 18,
              "lineno": 17,
              "name": "__init__"
            },
            {
              "calls": [
                "_normalize",
                "evaluate",
                "get",
                "info",
                "len",
                "list"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 38,
              "lineno": 20,
              "name": "ingest"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "lower",
                "str"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 50,
              "lineno": 40,
              "name": "_normalize"
            }
          ],
          "name": "SonarQubeAdapter"
        }
      ],
      "docstring": "SonarQube adapter translating issues into FixOps decisions.",
      "functions": [],
      "imports": [
        "__future__",
        "src.services.decision_engine",
        "structlog",
        "typing"
      ]
    },
    "lib4sbom/__init__.py": {
      "classes": [],
      "docstring": "Compat package exposing the :mod:`parser` shim.",
      "functions": [],
      "imports": [
        ""
      ]
    },
    "lib4sbom/parser.py": {
      "classes": [
        {
          "docstring": "Tiny subset of :mod:`lib4sbom` used in the tests.",
          "end_lineno": 55,
          "lineno": 8,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 13,
              "lineno": 11,
              "name": "__init__"
            },
            {
              "calls": [
                "isinstance",
                "loads"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 24,
              "lineno": 15,
              "name": "parse_string"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 34,
              "lineno": 26,
              "name": "get_packages"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 38,
              "lineno": 36,
              "name": "get_relationships"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 42,
              "lineno": 40,
              "name": "get_services"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 46,
              "lineno": 44,
              "name": "get_vulnerabilities"
            },
            {
              "calls": [
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 49,
              "lineno": 48,
              "name": "get_document"
            },
            {
              "calls": [
                "get",
                "isinstance"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 55,
              "lineno": 51,
              "name": "get_type"
            }
          ],
          "name": "SBOMParser"
        }
      ],
      "docstring": "Minimal parser shim used for tests when lib4sbom is unavailable.",
      "functions": [],
      "imports": [
        "__future__",
        "json",
        "typing"
      ]
    },
    "pydantic_settings/__init__.py": {
      "classes": [
        {
          "docstring": "Tiny drop-in replacement that reads values from environment variables.",
          "end_lineno": 85,
          "lineno": 11,
          "methods": [
            {
              "calls": [
                "_coerce",
                "_default_for",
                "getattr",
                "getenv",
                "items",
                "setattr",
                "upper"
              ],
              "cyclomatic_complexity": 7,
              "docstring": null,
              "end_lineno": 33,
              "lineno": 18,
              "name": "__init__"
            },
            {
              "calls": [
                "dict",
                "getattr",
                "isinstance",
                "list"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 46,
              "lineno": 36,
              "name": "_default_for"
            },
            {
              "calls": [
                "ValueError",
                "_coerce",
                "_unwrap_optional",
                "float",
                "get_args",
                "get_origin",
                "int",
                "lower",
                "split",
                "strip"
              ],
              "cyclomatic_complexity": 12,
              "docstring": null,
              "end_lineno": 70,
              "lineno": 49,
              "name": "_coerce"
            },
            {
              "calls": [
                "get_args",
                "get_origin",
                "len",
                "type"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 79,
              "lineno": 73,
              "name": "_unwrap_optional"
            },
            {
              "calls": [
                "getattr"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 82,
              "lineno": 81,
              "name": "model_dump"
            },
            {
              "calls": [
                "model_dump"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 85,
              "lineno": 84,
              "name": "dict"
            }
          ],
          "name": "BaseSettings"
        }
      ],
      "docstring": "Minimal shim for :mod:`pydantic_settings` compatible with in-repo stubs.",
      "functions": [],
      "imports": [
        "__future__",
        "os",
        "pydantic",
        "types",
        "typing"
      ]
    },
    "real_components_test.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 537,
          "lineno": 29,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 34,
              "lineno": 30,
              "name": "__init__"
            },
            {
              "calls": [
                "append",
                "print"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Log test result",
              "end_lineno": 48,
              "lineno": 36,
              "name": "log_result"
            },
            {
              "calls": [
                "log_result",
                "print",
                "run",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Test Real Vector Store Integration (ChromaDB)",
              "end_lineno": 117,
              "lineno": 50,
              "name": "test_real_vector_store_integration"
            },
            {
              "calls": [
                "log_result",
                "print",
                "run",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 11,
              "docstring": "Test Real OPA Policy Engine",
              "end_lineno": 223,
              "lineno": 119,
              "name": "test_real_opa_policy_engine"
            },
            {
              "calls": [
                "log_result",
                "print",
                "run",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 8,
              "docstring": "Test Real Evidence Lake Storage",
              "end_lineno": 312,
              "lineno": 225,
              "name": "test_real_evidence_lake_storage"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "json",
                "keys",
                "len",
                "log_result",
                "print",
                "str"
              ],
              "cyclomatic_complexity": 20,
              "docstring": "Test Real Database Operations",
              "end_lineno": 377,
              "lineno": 314,
              "name": "test_real_database_operations"
            },
            {
              "calls": [
                "get",
                "isinstance",
                "json",
                "keys",
                "len",
                "list",
                "log_result",
                "post",
                "print",
                "str"
              ],
              "cyclomatic_complexity": 9,
              "docstring": "Test Decision Engine Integration with all real components",
              "end_lineno": 465,
              "lineno": 379,
              "name": "test_decision_engine_integration"
            },
            {
              "calls": [
                "log_result",
                "print",
                "run",
                "split",
                "str",
                "strip"
              ],
              "cyclomatic_complexity": 7,
              "docstring": "Test dual-mode functionality (demo vs production)",
              "end_lineno": 506,
              "lineno": 467,
              "name": "test_dual_mode_functionality"
            },
            {
              "calls": [
                "enumerate",
                "len",
                "print",
                "test_decision_engine_integration",
                "test_dual_mode_functionality",
                "test_real_database_operations",
                "test_real_evidence_lake_storage",
                "test_real_opa_policy_engine",
                "test_real_vector_store_integration"
              ],
              "cyclomatic_complexity": 4,
              "docstring": "Run all real components tests",
              "end_lineno": 537,
              "lineno": 508,
              "name": "run_all_tests"
            }
          ],
          "name": "RealComponentsTester"
        }
      ],
      "docstring": "Focused testing for Real Components Implementation\nTests the newly implemented real components as specified in the review request",
      "functions": [
        {
          "calls": [
            "RealComponentsTester",
            "run_all_tests"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 542,
          "lineno": 539,
          "name": "main"
        }
      ],
      "imports": [
        "asyncio",
        "datetime",
        "json",
        "os",
        "pytest",
        "subprocess",
        "sys"
      ]
    },
    "sarif_om.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 13,
          "lineno": 9,
          "methods": [],
          "name": "SarifLog"
        }
      ],
      "docstring": "Minimal SARIF model stub for tests.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "scripts/deep_review.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 33,
          "lineno": 27,
          "methods": [],
          "name": "FunctionReport"
        },
        {
          "docstring": null,
          "end_lineno": 42,
          "lineno": 37,
          "methods": [],
          "name": "ClassReport"
        },
        {
          "docstring": null,
          "end_lineno": 51,
          "lineno": 46,
          "methods": [],
          "name": "ModuleReport"
        }
      ],
      "docstring": "Generate repository-wide code intelligence and duplication reports.",
      "functions": [
        {
          "calls": [
            "rglob"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 60,
          "lineno": 54,
          "name": "iter_python_files"
        },
        {
          "calls": [
            "isinstance",
            "walk"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 85,
          "lineno": 80,
          "name": "cyclomatic_complexity"
        },
        {
          "calls": [
            "append",
            "isinstance",
            "set",
            "sorted",
            "walk"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 97,
          "lineno": 88,
          "name": "collect_calls"
        },
        {
          "calls": [
            "ClassReport",
            "FunctionReport",
            "ModuleReport",
            "append",
            "collect_calls",
            "cyclomatic_complexity",
            "get_docstring",
            "getattr",
            "isinstance",
            "parse",
            "read_text",
            "set",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 10,
          "docstring": null,
          "end_lineno": 153,
          "lineno": 100,
          "name": "module_report"
        },
        {
          "calls": [],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 191,
          "lineno": 156,
          "name": "serialise_module"
        },
        {
          "calls": [
            "add",
            "as_posix",
            "defaultdict",
            "relative_to",
            "replace",
            "rsplit"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 202,
          "lineno": 194,
          "name": "build_import_graph"
        },
        {
          "calls": [
            "append",
            "items",
            "join",
            "mkdir",
            "set",
            "sorted",
            "write_text"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 212,
          "lineno": 205,
          "name": "write_import_graph"
        },
        {
          "calls": [
            "append",
            "as_posix",
            "defaultdict",
            "relative_to"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 230,
          "lineno": 215,
          "name": "build_callgraph"
        },
        {
          "calls": [
            "append",
            "items",
            "join",
            "mkdir",
            "write_text"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 241,
          "lineno": 233,
          "name": "write_callgraph"
        },
        {
          "calls": [
            "append",
            "as_posix",
            "defaultdict",
            "dump",
            "enumerate",
            "items",
            "len",
            "parse",
            "read_text",
            "relative_to"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 260,
          "lineno": 244,
          "name": "detect_duplicates"
        },
        {
          "calls": [
            "append",
            "dict",
            "get",
            "getattr",
            "items",
            "len"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 272,
          "lineno": 263,
          "name": "stage_runner_overview"
        },
        {
          "calls": [
            "read_text",
            "set",
            "sorted",
            "values"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 298,
          "lineno": 275,
          "name": "detect_gaps"
        },
        {
          "calls": [
            "dumps",
            "mkdir",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 303,
          "lineno": 301,
          "name": "write_json"
        },
        {
          "calls": [
            "ArgumentParser",
            "add_argument",
            "append",
            "as_posix",
            "build_callgraph",
            "build_import_graph",
            "detect_duplicates",
            "detect_gaps",
            "isoformat",
            "iter_python_files",
            "mkdir",
            "module_report",
            "parse_args",
            "print",
            "relative_to",
            "serialise_module",
            "stage_runner_overview",
            "utcnow",
            "write_callgraph",
            "write_import_graph",
            "write_json"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 345,
          "lineno": 306,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "ast",
        "collections",
        "dataclasses",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "typing"
      ]
    },
    "scripts/generate_analysis.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 65,
          "lineno": 59,
          "methods": [],
          "name": "ModuleSummary"
        }
      ],
      "docstring": "Produce lightweight analysis artefacts for the FixOps repository.\n\nThe goal of this module is not to replace full security reviews but to\ncollect reproducible evidence that supports the accompanying documentation.\n\nOutputs\n=======\n\n``analysis/FILE_SUMMARIES.csv``\n    High level per-file metadata covering the inferred role, top-level\n    symbols, external imports and heuristic risk flags.\n\n``analysis/DATA_CONTROL_FLOWS.md``\n    Markdown narrative that explains how data moves through the platform.\n    The file combines static templates with extracted interface details so\n    reviewers can trace the paths cited in the main report.\n\n``analysis/TRACEABILITY.csv``\n    Traceability matrix that connects platform capabilities with the\n    underlying source files.\n\nThe script only relies on the Python standard library to keep the execution\nenvironment simple.",
      "functions": [
        {
          "calls": [
            "exists",
            "rglob"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 47,
          "name": "iter_python_files"
        },
        {
          "calls": [
            "as_posix",
            "relative_to",
            "replace"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 73,
          "lineno": 68,
          "name": "load_module_map"
        },
        {
          "calls": [
            "startswith"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 89,
          "lineno": 76,
          "name": "infer_role"
        },
        {
          "calls": [
            "append",
            "isinstance"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 101,
          "lineno": 92,
          "name": "extract_symbols"
        },
        {
          "calls": [
            "add",
            "all",
            "isinstance",
            "set",
            "sorted",
            "split",
            "startswith",
            "walk"
          ],
          "cyclomatic_complexity": 8,
          "docstring": null,
          "end_lineno": 114,
          "lineno": 104,
          "name": "collect_external_imports"
        },
        {
          "calls": [
            "add",
            "isinstance",
            "set",
            "sorted",
            "walk"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 128,
          "lineno": 117,
          "name": "detect_risks"
        },
        {
          "calls": [
            "add",
            "set",
            "sorted"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 139,
          "lineno": 131,
          "name": "detect_flags"
        },
        {
          "calls": [
            "ModuleSummary",
            "append",
            "as_posix",
            "collect_external_imports",
            "detect_flags",
            "detect_risks",
            "extract_symbols",
            "infer_role",
            "iter_python_files",
            "join",
            "list",
            "load_module_map",
            "parse",
            "read_text",
            "relative_to",
            "sort",
            "str"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 161,
          "lineno": 142,
          "name": "summarise_files"
        },
        {
          "calls": [
            "mkdir",
            "open",
            "writer",
            "writerow"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 177,
          "lineno": 164,
          "name": "write_file_summaries"
        },
        {
          "calls": [
            "open",
            "write"
          ],
          "cyclomatic_complexity": 12,
          "docstring": null,
          "end_lineno": 207,
          "lineno": 180,
          "name": "write_data_control_flows"
        },
        {
          "calls": [
            "append",
            "items",
            "open",
            "writer",
            "writerow"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 227,
          "lineno": 210,
          "name": "write_traceability_matrix"
        },
        {
          "calls": [
            "list",
            "summarise_files",
            "write_data_control_flows",
            "write_file_summaries",
            "write_traceability_matrix"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 235,
          "lineno": 230,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "ast",
        "csv",
        "dataclasses",
        "pathlib",
        "typing"
      ]
    },
    "scripts/generate_file_usage_inventory.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 53,
          "lineno": 46,
          "methods": [
            {
              "calls": [
                "any",
                "fnmatch"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 53,
              "lineno": 52,
              "name": "matches"
            }
          ],
          "name": "Rule"
        },
        {
          "docstring": null,
          "end_lineno": 126,
          "lineno": 120,
          "methods": [],
          "name": "InventoryEntry"
        }
      ],
      "docstring": "Generate file usage inventory with heuristic classifications.\n\nThis module scans the Git repository and produces three artefacts under\n``analysis/``:\n\n* ``file_usage_summary.csv`` \u2013 per-file line counts with usage status\n* ``file_usage_totals.json`` \u2013 aggregate counts grouped by status\n* ``file_usage_report.md`` \u2013 human readable overview with highlights\n\nThe heuristics are intentionally transparent: the script records the rule and\nreason that determined each classification so reviewers can challenge or amend\nit. Override entries in ``analysis/file_usage_overrides.json`` take precedence\nwhen present. The override file accepts a JSON object of the following shape:\n\n```\n{\n  \"overrides\": {\n    \"relative/path.py\": {\n      \"status\": \"not_needed\",\n      \"category\": \"generated\",\n      \"reason\": \"Generated artefact; regenerate on demand\"\n    }\n  }\n}\n```",
      "functions": [
        {
          "calls": [
            "run",
            "splitlines",
            "strip"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 137,
          "lineno": 129,
          "name": "git_tracked_files"
        },
        {
          "calls": [
            "open",
            "sum"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 145,
          "lineno": 140,
          "name": "count_lines"
        },
        {
          "calls": [
            "RuntimeError",
            "exists",
            "get",
            "items",
            "loads",
            "read_text",
            "str"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 156,
          "lineno": 148,
          "name": "load_overrides"
        },
        {
          "calls": [
            "InventoryEntry",
            "count_lines",
            "get",
            "matches",
            "next"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 179,
          "lineno": 159,
          "name": "classify"
        },
        {
          "calls": [
            "mkdir",
            "open",
            "writer",
            "writerow"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 188,
          "lineno": 182,
          "name": "write_summary"
        },
        {
          "calls": [
            "dumps",
            "setdefault",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 197,
          "lineno": 191,
          "name": "write_totals"
        },
        {
          "calls": [
            "get",
            "join",
            "loads",
            "read_text",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 233,
          "lineno": 200,
          "name": "write_report"
        },
        {
          "calls": [
            "classify",
            "git_tracked_files",
            "load_overrides",
            "write_report",
            "write_summary",
            "write_totals"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 241,
          "lineno": 236,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "csv",
        "dataclasses",
        "fnmatch",
        "json",
        "pathlib",
        "subprocess",
        "typing"
      ]
    },
    "scripts/generate_index.py": {
      "classes": [],
      "docstring": "Generate repository inventory, import graph, and tree snapshot.\n\nThe original repository snapshot script only produced the inventory and\nimport graph that downstream tooling relied on.  For the broader analysis\nworkstream we also need a lightweight tree view so that the review package\ncan be consumed without needing access to the repository itself.\n\nRunning this script creates/updates the following artefacts under ``index/``:\n\n``INVENTORY.csv``\n    File level statistics including an inferred role.  Currently focused on\n    Python modules because that is where the majority of the execution logic\n    lives.\n\n``graph.json``\n    A simple import adjacency map that helps visualise coupling between\n    modules.\n\n``TREE.txt``\n    Collapsed tree view of the repository (depth up to six levels) with noisy\n    directories such as virtual environments removed so that reviewers can\n    quickly understand the structure.\n\nThe script intentionally keeps the dependencies to the Python standard\nlibrary so that it can run inside constrained CI environments.",
      "functions": [
        {
          "calls": [
            "any",
            "as_posix",
            "exists",
            "relative_to",
            "rglob",
            "startswith"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 94,
          "lineno": 85,
          "name": "iter_python_files"
        },
        {
          "calls": [
            "read_text",
            "splitlines",
            "startswith",
            "strip"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 104,
          "lineno": 97,
          "name": "count_sloc"
        },
        {
          "calls": [
            "get"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 108,
          "lineno": 107,
          "name": "detect_role"
        },
        {
          "calls": [
            "add",
            "as_posix",
            "defaultdict",
            "isinstance",
            "parse",
            "read_text",
            "relative_to",
            "replace",
            "set",
            "sorted",
            "str",
            "walk"
          ],
          "cyclomatic_complexity": 10,
          "docstring": null,
          "end_lineno": 137,
          "lineno": 111,
          "name": "build_import_graph"
        },
        {
          "calls": [
            "any",
            "append",
            "as_posix",
            "enumerate",
            "is_dir",
            "iterdir",
            "join",
            "len",
            "relative_to",
            "rstrip",
            "should_skip",
            "sorted",
            "startswith",
            "walk",
            "write_text"
          ],
          "cyclomatic_complexity": 10,
          "docstring": "Write a compact tree representation to ``destination``.\n\nThe implementation intentionally avoids relying on ``tree`` being\navailable on the host system.  It mirrors the behaviour of ``tree -L``\nand skips a set of noisy directories defined in ``TREE_SKIP``.",
          "end_lineno": 168,
          "lineno": 140,
          "name": "write_tree"
        },
        {
          "calls": [
            "append",
            "as_posix",
            "build_import_graph",
            "count_sloc",
            "detect_role",
            "dump",
            "iter_python_files",
            "list",
            "mkdir",
            "open",
            "relative_to",
            "sort",
            "write_tree",
            "writer",
            "writerow",
            "writerows"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 191,
          "lineno": 171,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "ast",
        "collections",
        "csv",
        "json",
        "os",
        "pathlib",
        "typing"
      ]
    },
    "scripts/run_real_cve_playbook.py": {
      "classes": [],
      "docstring": "Run a FixOps CVE playbook and highlight severity reclassification.",
      "functions": [
        {
          "calls": [
            "load",
            "open"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 54,
          "lineno": 50,
          "name": "load_context"
        },
        {
          "calls": [
            "Table",
            "add_column",
            "add_row",
            "get",
            "join"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 80,
          "lineno": 57,
          "name": "build_table"
        },
        {
          "calls": [
            "ComplianceEngine",
            "_evaluate_framework",
            "get",
            "print",
            "upper"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 94,
          "lineno": 83,
          "name": "print_compliance_results"
        },
        {
          "calls": [
            "ArgumentParser",
            "Console",
            "ContextualRiskScorer",
            "add_argument",
            "apply",
            "build_table",
            "get",
            "load_context",
            "parse_args",
            "print",
            "print_compliance_results"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 118,
          "lineno": 97,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "rich.console",
        "rich.table",
        "src.services.compliance_engine",
        "src.services.risk_scorer",
        "sys",
        "typing"
      ]
    },
    "simulations/cve_scenario/__init__.py": {
      "classes": [],
      "docstring": "Helpers for running the CVE-2021-44228 simulation from tests or scripts.",
      "functions": [],
      "imports": [
        "runner"
      ]
    },
    "simulations/cve_scenario/runner.py": {
      "classes": [
        {
          "docstring": "Outcome of executing the CVE simulation.",
          "end_lineno": 68,
          "lineno": 48,
          "methods": [
            {
              "calls": [
                "str"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 68,
              "lineno": 59,
              "name": "to_dict"
            }
          ],
          "name": "RunResult"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ContextualRiskScorer",
            "Path",
            "exists",
            "insert",
            "resolve",
            "str"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 41,
          "lineno": 32,
          "name": "_resolve_risk_scorer"
        },
        {
          "calls": [
            "Path",
            "loads",
            "read_text",
            "with_name"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 73,
          "lineno": 71,
          "name": "_load_contexts"
        },
        {
          "calls": [
            "CVERecordSummary",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "SBOMComponent",
            "SarifFinding"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 136,
          "lineno": 76,
          "name": "_build_artifacts"
        },
        {
          "calls": [
            "OverlayConfig",
            "Path",
            "ValueError",
            "_merge_overlay",
            "_parse_overlay_config",
            "_read_overlay_text",
            "dict",
            "get",
            "isinstance",
            "keys",
            "lower",
            "setdefault",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 10,
          "docstring": null,
          "end_lineno": 215,
          "lineno": 139,
          "name": "_ensure_overlay_for_mode"
        },
        {
          "calls": [
            "get",
            "join",
            "keys",
            "mkdir",
            "open",
            "sorted",
            "str",
            "write"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 229,
          "lineno": 218,
          "name": "_write_design_context"
        },
        {
          "calls": [
            "Path",
            "PipelineOrchestrator",
            "RunResult",
            "ValueError",
            "_build_artifacts",
            "_ensure_overlay_for_mode",
            "_load_contexts",
            "_resolve_risk_scorer",
            "_write_design_context",
            "apply",
            "dumps",
            "get",
            "keys",
            "list",
            "load_overlay",
            "mkdir",
            "next",
            "run",
            "sorted",
            "str",
            "to_sanitised_dict",
            "write_text"
          ],
          "cyclomatic_complexity": 14,
          "docstring": "Execute the CVE-2021-44228 simulation for the requested overlay mode.",
          "end_lineno": 360,
          "lineno": 232,
          "name": "run_simulation"
        },
        {
          "calls": [
            "ArgumentParser",
            "add_argument"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 378,
          "lineno": 363,
          "name": "_build_cli"
        },
        {
          "calls": [
            "_build_cli",
            "dumps",
            "parse_args",
            "print",
            "run_simulation",
            "to_dict"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 387,
          "lineno": 381,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "apps.api.pipeline",
        "argparse",
        "core.configuration",
        "dataclasses",
        "json",
        "pathlib",
        "sys",
        "typing"
      ]
    },
    "simulations/ssdlc/run.py": {
      "classes": [
        {
          "docstring": "Raised when required inputs are missing or malformed.",
          "end_lineno": 22,
          "lineno": 21,
          "methods": [],
          "name": "StageValidationError"
        },
        {
          "docstring": null,
          "end_lineno": 28,
          "lineno": 26,
          "methods": [],
          "name": "StageResult"
        }
      ],
      "docstring": "Command line runner for deterministic SSDLC simulations.",
      "functions": [
        {
          "calls": [
            "StageValidationError",
            "exists",
            "join"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 38,
          "lineno": 31,
          "name": "_ensure_inputs"
        },
        {
          "calls": [
            "StageValidationError",
            "exists",
            "isinstance",
            "loads",
            "lower",
            "read_text",
            "safe_load"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 41,
          "name": "_load_overlay"
        },
        {
          "calls": [
            "_deep_merge",
            "copy",
            "dict",
            "get",
            "isinstance",
            "pop"
          ],
          "cyclomatic_complexity": 5,
          "docstring": "Return overlay section relevant for the requested stage.",
          "end_lineno": 69,
          "lineno": 58,
          "name": "_overlay_for_stage"
        },
        {
          "calls": [
            "_deep_merge",
            "isinstance",
            "items"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 82,
          "lineno": 72,
          "name": "_deep_merge"
        },
        {
          "calls": [
            "DictReader",
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "get",
            "items",
            "lower",
            "open",
            "sorted",
            "strip"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 101,
          "lineno": 85,
          "name": "_design_stage"
        },
        {
          "calls": [
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "append",
            "get",
            "isinstance",
            "loads",
            "read_text",
            "sorted"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 116,
          "lineno": 104,
          "name": "_requirements_stage"
        },
        {
          "calls": [
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "append",
            "get",
            "isinstance",
            "len",
            "loads",
            "read_text",
            "sorted"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 141,
          "lineno": 119,
          "name": "_build_stage"
        },
        {
          "calls": [
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "append",
            "get",
            "isinstance",
            "loads",
            "lower",
            "read_text",
            "set",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 14,
          "docstring": null,
          "end_lineno": 174,
          "lineno": 144,
          "name": "_test_stage"
        },
        {
          "calls": [
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "any",
            "get",
            "int",
            "isinstance",
            "loads",
            "read_text",
            "sorted",
            "values"
          ],
          "cyclomatic_complexity": 11,
          "docstring": null,
          "end_lineno": 204,
          "lineno": 177,
          "name": "_deploy_stage"
        },
        {
          "calls": [
            "StageResult",
            "_deep_merge",
            "_ensure_inputs",
            "get",
            "isinstance",
            "loads",
            "read_text",
            "str"
          ],
          "cyclomatic_complexity": 14,
          "docstring": null,
          "end_lineno": 231,
          "lineno": 207,
          "name": "_operate_stage"
        },
        {
          "calls": [
            "dumps",
            "mkdir",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 248,
          "lineno": 244,
          "name": "_write_output"
        },
        {
          "calls": [
            "ArgumentParser",
            "add_argument",
            "keys",
            "sorted"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 271,
          "lineno": 251,
          "name": "build_parser"
        },
        {
          "calls": [
            "_load_overlay",
            "_overlay_for_stage",
            "_write_output",
            "build_parser",
            "dumps",
            "error",
            "items",
            "list",
            "parse_args",
            "print",
            "runner",
            "stage_runner",
            "str"
          ],
          "cyclomatic_complexity": 6,
          "docstring": null,
          "end_lineno": 300,
          "lineno": 274,
          "name": "main"
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "csv",
        "dataclasses",
        "json",
        "pathlib",
        "sys",
        "typing"
      ]
    },
    "ssvc/__init__.py": {
      "classes": [
        {
          "docstring": "Represents the result of evaluating an SSVC decision.",
          "end_lineno": 16,
          "lineno": 10,
          "methods": [],
          "name": "DecisionOutcome"
        },
        {
          "docstring": "Facade that dispatches to methodology specific implementations.",
          "end_lineno": 53,
          "lineno": 19,
          "methods": [
            {
              "calls": [
                "ValueError",
                "decision_cls",
                "dir",
                "getattr",
                "import_module",
                "isinstance",
                "lower",
                "startswith"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 41,
              "lineno": 22,
              "name": "__init__"
            },
            {
              "calls": [
                "TypeError",
                "evaluate",
                "isinstance"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 48,
              "lineno": 43,
              "name": "evaluate"
            },
            {
              "calls": [
                "NotImplementedError",
                "hasattr",
                "to_vector"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 53,
              "lineno": 50,
              "name": "to_vector"
            }
          ],
          "name": "Decision"
        }
      ],
      "docstring": "Lightweight SSVC stub tailored for the FixOps test-suite.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "importlib",
        "typing"
      ]
    },
    "ssvc/plugins/__init__.py": {
      "classes": [],
      "docstring": "SSVC plugin namespace.",
      "functions": [],
      "imports": []
    },
    "ssvc/plugins/deployer.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 15,
          "lineno": 12,
          "methods": [],
          "name": "ExploitationStatus"
        },
        {
          "docstring": null,
          "end_lineno": 21,
          "lineno": 18,
          "methods": [],
          "name": "SystemExposureLevel"
        },
        {
          "docstring": null,
          "end_lineno": 27,
          "lineno": 24,
          "methods": [],
          "name": "UtilityLevel"
        },
        {
          "docstring": null,
          "end_lineno": 33,
          "lineno": 30,
          "methods": [],
          "name": "HumanImpactLevel"
        },
        {
          "docstring": null,
          "end_lineno": 40,
          "lineno": 36,
          "methods": [],
          "name": "Priority"
        },
        {
          "docstring": null,
          "end_lineno": 47,
          "lineno": 43,
          "methods": [],
          "name": "Action"
        },
        {
          "docstring": null,
          "end_lineno": 151,
          "lineno": 91,
          "methods": [
            {
              "calls": [
                "_coerce_enum"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 101,
              "lineno": 97,
              "name": "__post_init__"
            },
            {
              "calls": [
                "TypeError",
                "ValueError",
                "isinstance",
                "lower",
                "strip",
                "type"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 113,
              "lineno": 104,
              "name": "_coerce_enum"
            },
            {
              "calls": [
                "DecisionOutcome",
                "_timestamp",
                "to_vector"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 135,
              "lineno": 115,
              "name": "evaluate"
            },
            {
              "calls": [
                "_timestamp",
                "join",
                "upper"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 147,
              "lineno": 137,
              "name": "to_vector"
            },
            {
              "calls": [
                "isoformat",
                "utcnow"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 151,
              "lineno": 150,
              "name": "_timestamp"
            }
          ],
          "name": "DecisionDeployer"
        }
      ],
      "docstring": "Simplified SSVC deployer methodology used in tests.",
      "functions": [],
      "imports": [
        "__future__",
        "dataclasses",
        "datetime",
        "enum",
        "ssvc",
        "typing"
      ]
    },
    "test_frontend.py": {
      "classes": [],
      "docstring": "Simple test script to verify frontend is accessible and working.",
      "functions": [
        {
          "calls": [
            "get",
            "json",
            "print"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 17,
          "name": "test_frontend"
        }
      ],
      "imports": [
        "os",
        "pytest"
      ]
    },
    "tests/__init__.py": {
      "classes": [],
      "docstring": null,
      "functions": [],
      "imports": []
    },
    "tests/conftest.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 124,
          "lineno": 41,
          "methods": [
            {
              "calls": [
                "Path",
                "add",
                "exists",
                "is_absolute",
                "is_dir",
                "is_file",
                "replace",
                "resolve",
                "rglob",
                "set",
                "str"
              ],
              "cyclomatic_complexity": 11,
              "docstring": null,
              "end_lineno": 63,
              "lineno": 42,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 66,
              "lineno": 65,
              "name": "_should_track"
            },
            {
              "calls": [
                "_should_track",
                "add",
                "set",
                "setdefault"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 74,
              "lineno": 68,
              "name": "_trace"
            },
            {
              "calls": [
                "settrace"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 77,
              "lineno": 76,
              "name": "start"
            },
            {
              "calls": [
                "settrace"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 80,
              "lineno": 79,
              "name": "stop"
            },
            {
              "calls": [
                "append",
                "enumerate",
                "get",
                "len",
                "open",
                "set",
                "sorted",
                "startswith",
                "strip"
              ],
              "cyclomatic_complexity": 10,
              "docstring": null,
              "end_lineno": 105,
              "lineno": 82,
              "name": "_compute"
            },
            {
              "calls": [
                "_compute",
                "set",
                "sorted",
                "write"
              ],
              "cyclomatic_complexity": 6,
              "docstring": null,
              "end_lineno": 117,
              "lineno": 107,
              "name": "report"
            },
            {
              "calls": [
                "_compute",
                "open",
                "write"
              ],
              "cyclomatic_complexity": 3,
              "docstring": null,
              "end_lineno": 124,
              "lineno": 119,
              "name": "xml_report"
            }
          ],
          "name": "SimpleCoverage"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "NoEncryption",
            "cache_clear",
            "decode",
            "generate_private_key",
            "pop",
            "private_bytes",
            "setenv"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 38,
          "lineno": 21,
          "name": "signing_env"
        },
        {
          "calls": [
            "addoption",
            "getgroup"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 132,
          "lineno": 127,
          "name": "pytest_addoption"
        },
        {
          "calls": [
            "SimpleCoverage",
            "getoption",
            "start"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 138,
          "lineno": 135,
          "name": "pytest_configure"
        },
        {
          "calls": [
            "UsageError",
            "getattr",
            "getoption",
            "lower",
            "open",
            "report",
            "stop",
            "str",
            "xml_report"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 158,
          "lineno": 141,
          "name": "pytest_unconfigure"
        }
      ],
      "imports": [
        "__future__",
        "cryptography.hazmat.primitives",
        "cryptography.hazmat.primitives.asymmetric",
        "os",
        "pathlib",
        "pytest",
        "src.config.settings",
        "sys",
        "typing"
      ]
    },
    "tests/sample_modules.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "append",
            "get",
            "isinstance",
            "setdefault"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 9,
          "lineno": 6,
          "name": "record_outcome"
        }
      ],
      "imports": [
        "core.modules",
        "typing"
      ]
    },
    "tests/test_ai_agents.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "AIAgentAdvisor",
            "analyse"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 4,
          "name": "test_ai_agent_advisor_detects_frameworks"
        }
      ],
      "imports": [
        "core.ai_agents"
      ]
    },
    "tests/test_analytics_store.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "AnalyticsStore",
            "glob",
            "list",
            "load_dashboard",
            "load_run",
            "loads",
            "read_text",
            "record_exploit_snapshot",
            "record_feedback_event",
            "record_feedback_outcomes",
            "record_forecast",
            "record_ticket_metrics"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 76,
          "lineno": 7,
          "name": "test_analytics_store_persist_and_load"
        }
      ],
      "imports": [
        "core.analytics",
        "json",
        "pathlib"
      ]
    },
    "tests/test_api_artefacts.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "TestClient",
            "create_app",
            "fixture",
            "import_module",
            "reload",
            "setenv",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 16,
          "name": "api_client"
        },
        {
          "calls": [
            "json",
            "post",
            "read_bytes"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 28,
          "name": "_post_stage"
        },
        {
          "calls": [
            "Path",
            "_post_stage",
            "exists",
            "get",
            "loads",
            "read_text",
            "startswith"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 54,
          "lineno": 43,
          "name": "test_artefact_ingest_persists_outputs"
        }
      ],
      "imports": [
        "__future__",
        "fastapi.testclient",
        "importlib",
        "json",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_api_dependencies.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 20,
          "lineno": 13,
          "methods": [
            {
              "calls": [
                "SimpleNamespace"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 17,
              "lineno": 14,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 20,
              "lineno": 19,
              "name": "body"
            }
          ],
          "name": "StubRequest"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "StubRequest",
            "authenticate",
            "authenticated_payload",
            "cache_clear",
            "invoke",
            "run",
            "setenv",
            "usefixtures",
            "validated_payload"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 42,
          "lineno": 24,
          "name": "test_authenticated_payload_roundtrip"
        },
        {
          "calls": [
            "StubRequest",
            "_StubSettings",
            "cache_clear",
            "invoke",
            "raises",
            "run",
            "setattr",
            "setenv",
            "usefixtures",
            "validated_payload"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 62,
          "lineno": 46,
          "name": "test_validated_payload_size_guard"
        },
        {
          "calls": [
            "StubRequest",
            "authenticate",
            "cache_clear",
            "get_settings",
            "invoke",
            "raises",
            "run",
            "setattr",
            "setenv",
            "usefixtures"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 78,
          "lineno": 66,
          "name": "test_authenticate_invalid_token"
        },
        {
          "calls": [
            "StubRequest",
            "authenticate",
            "cache_clear",
            "invoke",
            "raises",
            "run",
            "setattr",
            "usefixtures"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 92,
          "lineno": 82,
          "name": "test_authenticate_missing_header"
        },
        {
          "calls": [
            "StubRequest",
            "invoke",
            "raises",
            "run",
            "setattr",
            "usefixtures",
            "validated_payload"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 105,
          "lineno": 96,
          "name": "test_validated_payload_content_type"
        },
        {
          "calls": [
            "StubRequest",
            "invoke",
            "raises",
            "run",
            "setattr",
            "usefixtures",
            "validated_payload"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 118,
          "lineno": 109,
          "name": "test_validated_payload_requires_object"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "fastapi",
        "pytest",
        "src.api",
        "src.config.settings",
        "types"
      ]
    },
    "tests/test_backend_security.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "OverlayConfig"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 16,
          "lineno": 10,
          "name": "_make_overlay"
        },
        {
          "calls": [
            "_make_overlay",
            "chmod",
            "create_app",
            "mkdir",
            "raises",
            "setattr"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 19,
          "name": "test_create_app_rejects_insecure_allowlisted_root"
        }
      ],
      "imports": [
        "apps.api",
        "core.configuration",
        "os",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_ci_adapters.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ComplianceEngine",
            "DecisionEngine",
            "EvidenceStore"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 11,
          "lineno": 10,
          "name": "_engine"
        },
        {
          "calls": [
            "GitHubCIAdapter",
            "_engine",
            "get",
            "handle_webhook",
            "verify_manifest"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 38,
          "lineno": 14,
          "name": "test_github_webhook_comment"
        },
        {
          "calls": [
            "JenkinsCIAdapter",
            "_engine",
            "ingest",
            "items",
            "verify_manifest"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 62,
          "lineno": 41,
          "name": "test_jenkins_signed_response"
        },
        {
          "calls": [
            "SonarQubeAdapter",
            "_engine",
            "ingest",
            "len",
            "sorted"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 78,
          "lineno": 65,
          "name": "test_sonarqube_ingest_top_factors"
        }
      ],
      "imports": [
        "__future__",
        "src.services",
        "src.services.ci_adapters",
        "src.services.compliance",
        "src.services.decision_engine",
        "src.services.evidence"
      ]
    },
    "tests/test_cicd_signature.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 30,
          "lineno": 18,
          "methods": [
            {
              "calls": [
                "callable",
                "get",
                "isinstance",
                "items",
                "setattr",
                "startswith"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 23,
              "lineno": 19,
              "name": "__init__"
            },
            {
              "calls": [
                "dir",
                "getattr",
                "isupper"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 30,
              "lineno": 25,
              "name": "model_dump"
            }
          ],
          "name": "_BaseSettings"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "EnvKeyProvider",
            "NoEncryption",
            "decode",
            "fixture",
            "generate_private_key",
            "private_bytes",
            "public_bytes",
            "public_key"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 62,
          "lineno": 46,
          "name": "signing_provider"
        },
        {
          "calls": [
            "SimpleNamespace",
            "b64encode",
            "decode",
            "dumps",
            "encode",
            "fingerprint",
            "run",
            "sign",
            "verify_signature"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 78,
          "lineno": 65,
          "name": "test_verify_signature_success"
        },
        {
          "calls": [
            "SimpleNamespace",
            "b64encode",
            "decode",
            "dumps",
            "encode",
            "fingerprint",
            "lower",
            "raises",
            "run",
            "sign",
            "str",
            "verify_signature"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 96,
          "lineno": 81,
          "name": "test_verify_signature_failure"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "base64",
        "cryptography.hazmat.primitives",
        "cryptography.hazmat.primitives.asymmetric",
        "fastapi",
        "json",
        "pytest",
        "src.api.v1.cicd",
        "src.utils",
        "src.utils.crypto",
        "sys",
        "types",
        "typing"
      ]
    },
    "tests/test_cli.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "dumps",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 11,
          "lineno": 10,
          "name": "_write_json"
        },
        {
          "calls": [
            "Path",
            "_write_json",
            "delenv",
            "get",
            "getenv",
            "iterdir",
            "list",
            "loads",
            "main",
            "read_text",
            "readouterr",
            "setenv",
            "str",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 165,
          "lineno": 14,
          "name": "test_cli_run_pipeline"
        },
        {
          "calls": [
            "Path",
            "loads",
            "main",
            "readouterr",
            "setenv",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 183,
          "lineno": 168,
          "name": "test_cli_show_overlay"
        },
        {
          "calls": [
            "_write_json",
            "loads",
            "main",
            "read_text",
            "readouterr",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 213,
          "lineno": 186,
          "name": "test_cli_train_forecast"
        },
        {
          "calls": [
            "exists",
            "get",
            "loads",
            "main",
            "read_text",
            "readouterr",
            "setenv",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 238,
          "lineno": 216,
          "name": "test_cli_demo_command"
        }
      ],
      "imports": [
        "core.cli",
        "json",
        "os",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_cli_stage_run.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "append",
            "copy",
            "get",
            "join",
            "str"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 44,
          "lineno": 36,
          "name": "_pythonpath_env"
        },
        {
          "calls": [
            "extend",
            "run",
            "str"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 67,
          "lineno": 47,
          "name": "_invoke_stage"
        },
        {
          "calls": [
            "is_dir",
            "iterdir",
            "loads",
            "read_text",
            "startswith"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 77,
          "lineno": 70,
          "name": "_latest_run"
        },
        {
          "calls": [
            "_invoke_stage",
            "_latest_run",
            "_pythonpath_env",
            "exists",
            "get",
            "isinstance",
            "loads",
            "read_text",
            "startswith"
          ],
          "cyclomatic_complexity": 9,
          "docstring": null,
          "end_lineno": 109,
          "lineno": 81,
          "name": "test_stage_run_materialises_canonical_outputs"
        },
        {
          "calls": [
            "_invoke_stage",
            "_latest_run",
            "_pythonpath_env"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 122,
          "lineno": 112,
          "name": "test_requirements_stage_starts_new_run"
        },
        {
          "calls": [
            "_invoke_stage",
            "_latest_run",
            "_pythonpath_env"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 136,
          "lineno": 125,
          "name": "test_design_stage_reuses_current_run"
        }
      ],
      "imports": [
        "__future__",
        "json",
        "os",
        "pathlib",
        "pytest",
        "subprocess",
        "sys"
      ]
    },
    "tests/test_compliance.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "evaluate_compliance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 13,
          "lineno": 4,
          "name": "test_evaluate_compliance_mapping"
        }
      ],
      "imports": [
        "apps.api.pipeline"
      ]
    },
    "tests/test_compliance_rollup.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ComplianceEngine",
            "evaluate",
            "keys",
            "set"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 18,
          "lineno": 6,
          "name": "test_compliance_rollup_counts"
        },
        {
          "calls": [
            "ComplianceEngine",
            "evaluate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 21,
          "name": "test_opa_bridge_skips_without_binary"
        }
      ],
      "imports": [
        "__future__",
        "src.services.compliance"
      ]
    },
    "tests/test_cors_jwt.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "create_app",
            "setenv"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 16,
          "lineno": 9,
          "name": "test_cors_origins_applied"
        },
        {
          "calls": [
            "decode",
            "fromtimestamp",
            "generate_access_token",
            "setattr",
            "timedelta",
            "utcnow"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 27,
          "lineno": 19,
          "name": "test_generate_access_token_expiry"
        }
      ],
      "imports": [
        "apps.api",
        "datetime",
        "fastapi.middleware.cors",
        "jwt"
      ]
    },
    "tests/test_crypto_signing.py": {
      "classes": [],
      "docstring": "Tests covering RSA signing helpers for the evidence lake.",
      "functions": [
        {
          "calls": [
            "NoEncryption",
            "decode",
            "generate_private_key",
            "private_bytes",
            "public_bytes",
            "public_key"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 32,
          "lineno": 21,
          "name": "_generate_rsa_keypair"
        },
        {
          "calls": [
            "_generate_rsa_keypair",
            "fixture",
            "reset_key_provider_cache",
            "setenv"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 43,
          "lineno": 36,
          "name": "signing_env"
        },
        {
          "calls": [
            "dumps",
            "encode",
            "rsa_sign",
            "rsa_verify"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 50,
          "lineno": 46,
          "name": "test_rsa_sign_round_trip"
        },
        {
          "calls": [
            "dumps",
            "encode",
            "rsa_sign",
            "rsa_verify"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 58,
          "lineno": 53,
          "name": "test_rsa_verify_rejects_tampered_payload"
        },
        {
          "calls": [
            "get_key_provider",
            "rotate",
            "rsa_sign",
            "rsa_verify"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 72,
          "lineno": 61,
          "name": "test_rsa_verify_handles_rotated_fingerprints"
        }
      ],
      "imports": [
        "cryptography.hazmat.primitives",
        "cryptography.hazmat.primitives.asymmetric",
        "json",
        "pytest",
        "src.utils.crypto",
        "typing"
      ]
    },
    "tests/test_cve_simulation.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "Path",
            "dumps",
            "join",
            "resolve",
            "str",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 94,
          "lineno": 10,
          "name": "_build_overlay"
        },
        {
          "calls": [
            "_build_overlay",
            "exists",
            "loads",
            "read_text",
            "run_simulation"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 113,
          "lineno": 97,
          "name": "test_demo_mode_downgrades_severity"
        },
        {
          "calls": [
            "_build_overlay",
            "exists",
            "loads",
            "read_text",
            "run_simulation"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 131,
          "lineno": 116,
          "name": "test_enterprise_mode_escalates_severity"
        }
      ],
      "imports": [
        "__future__",
        "json",
        "os",
        "pathlib",
        "simulations.cve_scenario"
      ]
    },
    "tests/test_decision_top_factors.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "DecisionEngine",
            "evaluate",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 6,
          "name": "test_top_factors_and_marketplace_recommendations"
        }
      ],
      "imports": [
        "__future__",
        "src.services.decision_engine"
      ]
    },
    "tests/test_demo_runner.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "exists",
            "get",
            "run_demo_pipeline"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 11,
          "lineno": 6,
          "name": "test_run_demo_pipeline_demo_mode"
        },
        {
          "calls": [
            "exists",
            "get",
            "run_demo_pipeline"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 23,
          "lineno": 14,
          "name": "test_run_demo_pipeline_enterprise_mode"
        }
      ],
      "imports": [
        "core.demo_runner",
        "pathlib"
      ]
    },
    "tests/test_design_context_injector.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "hasattr",
            "replace",
            "split",
            "str",
            "upper"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 16,
          "lineno": 13,
          "name": "_code"
        },
        {
          "calls": [
            "Decision",
            "DesignContextInjector",
            "DictReader",
            "_code",
            "calculate_priors",
            "endswith",
            "evaluate",
            "next",
            "open",
            "search",
            "split",
            "startswith",
            "zip"
          ],
          "cyclomatic_complexity": 7,
          "docstring": null,
          "end_lineno": 73,
          "lineno": 19,
          "name": "test_calculate_priors_matches_ssvc_outcomes"
        }
      ],
      "imports": [
        "core",
        "csv",
        "pathlib",
        "re",
        "ssvc",
        "ssvc.plugins"
      ]
    },
    "tests/test_end_to_end.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "BytesIO",
            "DictReader",
            "InputNormalizer",
            "PipelineOrchestrator",
            "SpooledTemporaryFile",
            "StringIO",
            "TestClient",
            "ZipFile",
            "all",
            "any",
            "close",
            "compress",
            "create_app",
            "dumps",
            "encode",
            "get",
            "getvalue",
            "isinstance",
            "json",
            "len",
            "list",
            "load_cve_feed",
            "load_sarif",
            "load_sbom",
            "pop",
            "post",
            "run",
            "seek",
            "write",
            "writestr"
          ],
          "cyclomatic_complexity": 15,
          "docstring": null,
          "end_lineno": 270,
          "lineno": 29,
          "name": "test_end_to_end_demo_pipeline"
        },
        {
          "calls": [
            "TestClient",
            "create_app",
            "pop",
            "post"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 287,
          "lineno": 273,
          "name": "test_api_rejects_missing_token"
        },
        {
          "calls": [
            "Path",
            "TestClient",
            "create_app",
            "delenv",
            "dumps",
            "json",
            "lower",
            "mkdir",
            "post",
            "resolve",
            "rmtree",
            "setenv",
            "str",
            "write_text"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 324,
          "lineno": 290,
          "name": "test_feedback_endpoint_rejects_invalid_payload"
        },
        {
          "calls": [
            "BytesIO",
            "InputNormalizer",
            "Path",
            "SpooledTemporaryFile",
            "TestClient",
            "ZipFile",
            "append",
            "b64encode",
            "close",
            "compress",
            "create_app",
            "decode",
            "delenv",
            "dumps",
            "encode",
            "getvalue",
            "json",
            "len",
            "load_cve_feed",
            "load_sarif",
            "load_sbom",
            "mkdir",
            "post",
            "range",
            "resolve",
            "rmtree",
            "seek",
            "setenv",
            "str",
            "urandom",
            "write",
            "write_text",
            "writestr"
          ],
          "cyclomatic_complexity": 16,
          "docstring": null,
          "end_lineno": 525,
          "lineno": 327,
          "name": "test_large_compressed_uploads_stream_to_disk"
        }
      ],
      "imports": [
        "apps.api.normalizers",
        "apps.api.pipeline",
        "base64",
        "csv",
        "gzip",
        "inspect",
        "io",
        "json",
        "os",
        "pathlib",
        "shutil",
        "tempfile",
        "zipfile"
      ]
    },
    "tests/test_enterprise_compliance.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ComplianceEngine",
            "evaluate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 21,
          "lineno": 6,
          "name": "test_compliance_engine_evaluates_frameworks"
        }
      ],
      "imports": [
        "__future__",
        "src.services.compliance_engine"
      ]
    },
    "tests/test_evidence.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 14,
          "lineno": 7,
          "name": "_minimal_pipeline_result"
        },
        {
          "calls": [
            "EvidenceHub",
            "OverlayConfig",
            "Path",
            "_minimal_pipeline_result",
            "persist",
            "resolve",
            "startswith"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 17,
          "name": "test_evidence_hub_uses_allowlisted_root_and_sanitises_name"
        },
        {
          "calls": [
            "EvidenceHub",
            "OverlayConfig",
            "Path",
            "_minimal_pipeline_result",
            "persist",
            "resolve",
            "startswith"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 42,
          "lineno": 32,
          "name": "test_evidence_hub_falls_back_to_default_bundle_name"
        },
        {
          "calls": [
            "EvidenceHub",
            "OverlayConfig",
            "_minimal_pipeline_result",
            "endswith",
            "persist",
            "resolve"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 56,
          "lineno": 45,
          "name": "test_evidence_hub_compresses_when_limit_configured"
        }
      ],
      "imports": [
        "core.configuration",
        "core.evidence",
        "pathlib"
      ]
    },
    "tests/test_evidence_export.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "BytesIO",
            "EvidenceExportService",
            "ZipFile",
            "_run",
            "build_bundle",
            "dict",
            "issubset",
            "loads",
            "namelist",
            "read",
            "run",
            "set",
            "setattr",
            "staticmethod",
            "type"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 44,
          "lineno": 15,
          "name": "test_evidence_export_creates_signed_bundle"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "io",
        "json",
        "pytest",
        "src.services",
        "src.services.evidence_export",
        "typing",
        "zipfile"
      ]
    },
    "tests/test_evidence_retrieval_fastpath.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 20,
          "lineno": 15,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 17,
              "lineno": 16,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 20,
              "lineno": 19,
              "name": "fetchone"
            }
          ],
          "name": "_FakeResult"
        },
        {
          "docstring": null,
          "end_lineno": 28,
          "lineno": 23,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 25,
              "lineno": 24,
              "name": "__init__"
            },
            {
              "calls": [
                "_FakeResult"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 28,
              "lineno": 27,
              "name": "execute"
            }
          ],
          "name": "_FakeSession"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "_FakeSession",
            "copy",
            "dumps",
            "encode",
            "get",
            "hexdigest",
            "pop",
            "retrieve_evidence",
            "run",
            "setattr",
            "sha256"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 31,
          "name": "test_evidence_retrieval_validates_integrity"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "contextlib",
        "hashlib",
        "json",
        "pytest",
        "src.db.session",
        "src.services.evidence_lake",
        "typing"
      ]
    },
    "tests/test_explainability.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ComplianceEngine",
            "DecisionEngine",
            "EvidenceStore",
            "evaluate",
            "sorted",
            "startswith"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 8,
          "name": "test_top_factors_deterministic"
        },
        {
          "calls": [
            "ComplianceEngine",
            "DecisionEngine",
            "EvidenceStore",
            "any",
            "evaluate"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 56,
          "lineno": 32,
          "name": "test_decision_engine_compliance_rollup_and_marketplace"
        }
      ],
      "imports": [
        "__future__",
        "src.services.compliance",
        "src.services.decision_engine",
        "src.services.evidence"
      ]
    },
    "tests/test_explainability_service.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ExplainabilityService",
            "approx",
            "enrich_findings",
            "explain",
            "prime_baseline"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 22,
          "lineno": 8,
          "name": "test_explainability_service_generates_contributions"
        }
      ],
      "imports": [
        "__future__",
        "pytest",
        "src.services.explainability"
      ]
    },
    "tests/test_exploit_refresh.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "append",
            "refresh_exploit_feeds",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 4,
          "name": "test_refresh_exploit_feeds"
        }
      ],
      "imports": [
        "core"
      ]
    },
    "tests/test_exploit_signals.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "CVERecordSummary",
            "ExploitSignalEvaluator",
            "NormalizedCVEFeed",
            "any",
            "evaluate",
            "get"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 59,
          "lineno": 11,
          "name": "test_exploit_signal_evaluator_matches_boolean_and_probability"
        },
        {
          "calls": [
            "ExploitSignalEvaluator",
            "NormalizedCVEFeed",
            "evaluate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 62,
          "name": "test_exploit_signal_evaluator_returns_none_without_signals"
        },
        {
          "calls": [
            "CVERecordSummary",
            "ExploitFeedRefresher",
            "NormalizedCVEFeed",
            "OverlayConfig",
            "dumps",
            "exists",
            "refresh",
            "str",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 129,
          "lineno": 68,
          "name": "test_exploit_feed_refresher_enriches_records"
        }
      ],
      "imports": [
        "apps.api.normalizers",
        "core.configuration",
        "core.exploit_signals",
        "json",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_feature_matrix.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "CVERecordSummary",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "Path",
            "PipelineOrchestrator",
            "SBOMComponent",
            "SarifFinding",
            "all",
            "get",
            "is_file",
            "issubset",
            "keys",
            "len",
            "load_overlay",
            "parametrize",
            "run",
            "set",
            "setdefault",
            "setenv",
            "str",
            "values"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 259,
          "lineno": 21,
          "name": "test_feature_matrix_alignment"
        }
      ],
      "imports": [
        "apps.api.normalizers",
        "apps.api.pipeline",
        "core.configuration",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_feedback.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 64,
          "lineno": 58,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 60,
              "lineno": 59,
              "name": "__init__"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "append",
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 64,
              "lineno": 62,
              "name": "create_issue"
            }
          ],
          "name": "_StubJira"
        },
        {
          "docstring": null,
          "end_lineno": 73,
          "lineno": 67,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 69,
              "lineno": 68,
              "name": "__init__"
            },
            {
              "calls": [
                "ConnectorOutcome",
                "append",
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 73,
              "lineno": 71,
              "name": "create_page"
            }
          ],
          "name": "_StubConfluence"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "FeedbackRecorder",
            "OverlayConfig",
            "exists",
            "read_text",
            "record",
            "resolve",
            "str",
            "strip"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 38,
          "lineno": 11,
          "name": "test_feedback_recorder_writes_entries"
        },
        {
          "calls": [
            "FeedbackRecorder",
            "OverlayConfig",
            "raises",
            "record",
            "resolve"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 41,
          "name": "test_feedback_recorder_rejects_path_traversal"
        },
        {
          "calls": [
            "FeedbackRecorder",
            "OverlayConfig",
            "_StubConfluence",
            "_StubJira",
            "exists",
            "loads",
            "read_text",
            "record",
            "resolve",
            "splitlines",
            "str",
            "strip"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 112,
          "lineno": 76,
          "name": "test_feedback_forwarding_records_connector_outcomes"
        }
      ],
      "imports": [
        "core.configuration",
        "core.connectors",
        "core.feedback",
        "json",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_feeds_enrichment.py": {
      "classes": [],
      "docstring": "Regression tests for EPSS/KEV enrichment in the decision engine hot path.",
      "functions": [
        {
          "calls": [
            "_path",
            "approx",
            "dumps",
            "enrich_findings",
            "get",
            "len",
            "parametrize",
            "reload",
            "setenv",
            "str",
            "write_text"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 78,
          "lineno": 14,
          "name": "test_enrich_findings_populates_epss_and_kev"
        }
      ],
      "imports": [
        "__future__",
        "importlib",
        "json",
        "pathlib",
        "pytest",
        "typing"
      ]
    },
    "tests/test_golden_regression.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "fixture",
            "reset_instance"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 118,
          "lineno": 115,
          "name": "reset_golden_regression_store"
        },
        {
          "calls": [
            "get_instance",
            "lookup_cases"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 136,
          "lineno": 121,
          "name": "test_store_lookup_matches_service_and_cve"
        },
        {
          "calls": [
            "DecisionContext",
            "DecisionEngine",
            "_real_golden_regression_validation",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 155,
          "lineno": 139,
          "name": "test_regression_validation_passes_with_historical_support"
        },
        {
          "calls": [
            "DecisionContext",
            "DecisionEngine",
            "_real_golden_regression_validation",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 174,
          "lineno": 158,
          "name": "test_regression_validation_surfaces_failures"
        },
        {
          "calls": [
            "DecisionContext",
            "DecisionEngine",
            "_real_golden_regression_validation",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 192,
          "lineno": 177,
          "name": "test_regression_validation_handles_missing_coverage"
        }
      ],
      "imports": [
        "asyncio",
        "pathlib",
        "pytest",
        "src.services.decision_engine",
        "src.services.golden_regression_store",
        "sys",
        "types"
      ]
    },
    "tests/test_golden_regression_store.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 43,
          "lineno": 21,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 25,
              "lineno": 22,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 28,
              "lineno": 27,
              "name": "initialize"
            },
            {
              "calls": [
                "SimpleNamespace",
                "append",
                "get"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 43,
              "lineno": 30,
              "name": "make_decision"
            }
          ],
          "name": "FakeDecisionEngine"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "FakeDecisionEngine",
            "GoldenRegressionStore",
            "approx",
            "dumps",
            "evaluate",
            "run",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 119,
          "lineno": 46,
          "name": "test_evaluate_with_mock_engine"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "json",
        "pathlib",
        "pytest",
        "src.services.golden_regression_store",
        "sys"
      ]
    },
    "tests/test_http_metrics.py": {
      "classes": [],
      "docstring": "Regression tests for HTTP observability instrumentation.",
      "functions": [
        {
          "calls": [
            "fixture",
            "reset_runtime_stats"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Ensure every test runs with a clean metrics slate.",
          "end_lineno": 44,
          "lineno": 39,
          "name": "reset_metrics"
        },
        {
          "calls": [
            "SimpleNamespace"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 52,
          "lineno": 47,
          "name": "_build_request"
        },
        {
          "calls": [
            "PerformanceMiddleware",
            "Response",
            "_build_request",
            "dispatch",
            "get_error_ratio",
            "get_hot_path_latency_us",
            "get_inflight",
            "run"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "Successful decision requests should publish hot path latency without errors.",
          "end_lineno": 71,
          "lineno": 55,
          "name": "test_successful_hot_path_updates_latency_and_ratio"
        },
        {
          "calls": [
            "HTTPException",
            "PerformanceMiddleware",
            "_build_request",
            "dispatch",
            "get_error_ratio",
            "get_hot_path_latency_us",
            "get_inflight",
            "raises",
            "run"
          ],
          "cyclomatic_complexity": 3,
          "docstring": "Failing policy evaluations must be tracked as errors for observability dashboards.",
          "end_lineno": 90,
          "lineno": 74,
          "name": "test_policy_errors_drive_error_ratio"
        },
        {
          "calls": [
            "PerformanceMiddleware",
            "Response",
            "_build_request",
            "dispatch",
            "get_error_ratio",
            "get_hot_path_latency_us",
            "get_inflight",
            "run"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "Evidence retrieval should register under the evidence family for ratios.",
          "end_lineno": 109,
          "lineno": 93,
          "name": "test_evidence_requests_are_classified_correctly"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "fastapi",
        "pytest",
        "src.core.middleware",
        "src.services.metrics",
        "starlette.responses",
        "sys",
        "types",
        "typing"
      ]
    },
    "tests/test_id_allocator.py": {
      "classes": [],
      "docstring": "Tests for deterministic ID allocation in design documents.",
      "functions": [
        {
          "calls": [],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 17,
          "lineno": 10,
          "name": "_sample_design"
        },
        {
          "calls": [
            "_sample_design",
            "ensure_ids",
            "startswith"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 20,
          "name": "test_ensure_ids_mints_app_and_component_ids"
        },
        {
          "calls": [
            "_sample_design",
            "deepcopy",
            "ensure_ids",
            "get"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 28,
          "name": "test_ensure_ids_is_deterministic"
        }
      ],
      "imports": [
        "__future__",
        "copy",
        "src.services.id_allocator"
      ]
    },
    "tests/test_key_management.py": {
      "classes": [
        {
          "docstring": "Lightweight AWS KMS stub for exercising the provider logic.",
          "end_lineno": 87,
          "lineno": 22,
          "methods": [
            {
              "calls": [
                "_create_key"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 30,
              "lineno": 25,
              "name": "__init__"
            },
            {
              "calls": [
                "generate_private_key",
                "len",
                "now",
                "timedelta"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 41,
              "lineno": 32,
              "name": "_create_key"
            },
            {
              "calls": [
                "startswith"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 46,
              "lineno": 43,
              "name": "_resolve"
            },
            {
              "calls": [
                "_resolve",
                "dict",
                "public_bytes",
                "public_key"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 57,
              "lineno": 48,
              "name": "get_public_key"
            },
            {
              "calls": [
                "_resolve",
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 63,
              "lineno": 59,
              "name": "describe_key"
            },
            {
              "calls": [
                "PKCS1v15",
                "SHA256",
                "_resolve",
                "sign"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 72,
              "lineno": 65,
              "name": "sign"
            },
            {
              "calls": [
                "_create_key",
                "get_public_key",
                "now",
                "startswith"
              ],
              "cyclomatic_complexity": 4,
              "docstring": null,
              "end_lineno": 80,
              "lineno": 74,
              "name": "rotate_key"
            },
            {
              "calls": [
                "get",
                "now",
                "timedelta"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 87,
              "lineno": 82,
              "name": "age_current_key"
            }
          ],
          "name": "StubKMSClient"
        },
        {
          "docstring": "Minimal Azure Key Vault stub with rotate/get support.",
          "end_lineno": 139,
          "lineno": 90,
          "methods": [
            {
              "calls": [
                "_create_version"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 98,
              "lineno": 93,
              "name": "__init__"
            },
            {
              "calls": [
                "generate_private_key",
                "len",
                "now",
                "timedelta"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 106,
              "lineno": 100,
              "name": "_create_version"
            },
            {
              "calls": [
                "SimpleNamespace",
                "ValueError",
                "_encode_b64url",
                "public_key",
                "public_numbers"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 121,
              "lineno": 108,
              "name": "get_key"
            },
            {
              "calls": [
                "ValueError",
                "_create_version",
                "get_key"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 127,
              "lineno": 123,
              "name": "rotate_key"
            },
            {
              "calls": [
                "_Poller",
                "rotate_key"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 136,
              "lineno": 129,
              "name": "begin_rotate_key"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 139,
              "lineno": 138,
              "name": "private_key"
            }
          ],
          "name": "StubAzureKeyClient"
        },
        {
          "docstring": "Crypto client that signs using the stub key client.",
          "end_lineno": 156,
          "lineno": 142,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 148,
              "lineno": 147,
              "name": "__init__"
            },
            {
              "calls": [
                "PKCS1v15",
                "SHA256",
                "SimpleNamespace",
                "private_key",
                "sign"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 156,
              "lineno": 150,
              "name": "sign"
            }
          ],
          "name": "StubAzureCryptoClient"
        }
      ],
      "docstring": "Key management regression tests for remote signing providers.",
      "functions": [
        {
          "calls": [
            "bit_length",
            "decode",
            "rstrip",
            "to_bytes",
            "urlsafe_b64encode"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 17,
          "name": "_encode_b64url"
        },
        {
          "calls": [
            "AWSKMSProvider",
            "StubKMSClient",
            "age_current_key",
            "attestation",
            "fingerprint",
            "rotate",
            "sign",
            "verify"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 182,
          "lineno": 159,
          "name": "test_aws_kms_provider_signs_and_rotates"
        },
        {
          "calls": [
            "AzureKeyVaultProvider",
            "StubAzureCryptoClient",
            "StubAzureKeyClient",
            "attestation",
            "fingerprint",
            "rotate",
            "sign",
            "verify"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 210,
          "lineno": 185,
          "name": "test_azure_key_vault_provider_signs_and_rotates"
        },
        {
          "calls": [
            "AWSKMSProvider",
            "StubKMSClient",
            "evaluate_rotation_health",
            "get_key_rotation_age",
            "get_key_rotation_health",
            "reset_runtime_stats"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 239,
          "lineno": 213,
          "name": "test_rotation_health_flags_breach"
        }
      ],
      "imports": [
        "base64",
        "cryptography.hazmat.primitives",
        "cryptography.hazmat.primitives.asymmetric",
        "datetime",
        "src.services.metrics",
        "src.utils.crypto",
        "types"
      ]
    },
    "tests/test_marketplace_recos.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "endswith",
            "get_recommendations"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 10,
          "lineno": 6,
          "name": "test_marketplace_returns_pack_for_ac2"
        }
      ],
      "imports": [
        "__future__",
        "src.services.marketplace"
      ]
    },
    "tests/test_new_backend_api.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "TestClient",
            "create_app",
            "fixture"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 10,
          "lineno": 8,
          "name": "client"
        },
        {
          "calls": [
            "json",
            "post"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 27,
          "lineno": 13,
          "name": "test_make_decision_success"
        },
        {
          "calls": [
            "any",
            "json",
            "post"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 43,
          "lineno": 30,
          "name": "test_make_decision_validation_error"
        },
        {
          "calls": [
            "json",
            "post"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 60,
          "lineno": 46,
          "name": "test_submit_feedback_success"
        },
        {
          "calls": [
            "json",
            "post"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 74,
          "lineno": 63,
          "name": "test_submit_feedback_mismatch"
        },
        {
          "calls": [
            "get",
            "json"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 80,
          "lineno": 77,
          "name": "test_healthcheck"
        }
      ],
      "imports": [
        "fastapi.testclient",
        "new_backend.api",
        "pytest"
      ]
    },
    "tests/test_new_backend_processing.py": {
      "classes": [],
      "docstring": "Tests for the modernised processing utilities.",
      "functions": [
        {
          "calls": [
            "fixture",
            "list",
            "pop",
            "startswith"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 17,
          "lineno": 13,
          "name": "clear_processing_modules"
        },
        {
          "calls": [
            "KnowledgeGraphProcessor",
            "ModuleType",
            "append",
            "build_graph",
            "extend",
            "import_module",
            "isinstance",
            "list",
            "setitem"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 72,
          "lineno": 20,
          "name": "test_knowledge_graph_processor_invokes_ctinexus"
        },
        {
          "calls": [
            "DummyLimiter",
            "ExplanationGenerator",
            "ModuleType",
            "_build_prompt",
            "_ensure_client",
            "append",
            "generate",
            "import_module",
            "setattr",
            "setitem",
            "startswith"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 123,
          "lineno": 75,
          "name": "test_explanation_generator_uses_sentinel_gpt"
        },
        {
          "calls": [
            "ModuleType",
            "SarifAnalyzer",
            "analyze",
            "cls",
            "get",
            "import_module",
            "setattr",
            "setitem"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 191,
          "lineno": 126,
          "name": "test_sarif_analyzer_clusters_and_scores"
        },
        {
          "calls": [
            "approx",
            "attach_component_posterior",
            "get",
            "import_module",
            "update_probabilities"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 237,
          "lineno": 194,
          "name": "test_bayesian_network_inference_produces_posteriors"
        }
      ],
      "imports": [
        "__future__",
        "importlib",
        "pytest",
        "sys",
        "types"
      ]
    },
    "tests/test_new_modules.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "SimpleNamespace"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 9,
          "lineno": 8,
          "name": "_overlay_stub"
        },
        {
          "calls": [
            "ROIDashboard",
            "_overlay_stub",
            "any",
            "evaluate"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 48,
          "lineno": 12,
          "name": "test_roi_dashboard_calculates_value"
        },
        {
          "calls": [
            "TenantLifecycleManager",
            "_overlay_stub",
            "evaluate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 81,
          "lineno": 51,
          "name": "test_tenant_lifecycle_summary"
        },
        {
          "calls": [
            "PerformanceSimulator",
            "_overlay_stub",
            "simulate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 106,
          "lineno": 84,
          "name": "test_performance_simulation_estimates_latency"
        }
      ],
      "imports": [
        "core.analytics",
        "core.performance",
        "core.tenancy",
        "types"
      ]
    },
    "tests/test_no_wip_imports.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "read_text",
            "rglob"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 18,
          "lineno": 13,
          "name": "test_no_wip_imports"
        }
      ],
      "imports": [
        "__future__",
        "pathlib"
      ]
    },
    "tests/test_normalizers.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "fixture",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "Ensure tests control the optional Snyk converter.",
          "end_lineno": 13,
          "lineno": 10,
          "name": "_reset_converter"
        },
        {
          "calls": [],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 16,
          "name": "_build_sarif_document"
        },
        {
          "calls": [
            "InputNormalizer",
            "_build_sarif_document",
            "dumps",
            "load_sarif"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 43,
          "name": "test_load_sarif_uses_embedded_payload_when_converter_missing"
        },
        {
          "calls": [
            "InputNormalizer",
            "at_level",
            "dumps",
            "load_sarif",
            "raises"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 67,
          "lineno": 58,
          "name": "test_load_sarif_logs_actionable_error_without_converter"
        }
      ],
      "imports": [
        "apps.api.normalizers",
        "json",
        "logging",
        "pytest"
      ]
    },
    "tests/test_ops_hardening.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "RateLimitMiddleware",
            "_consume_token",
            "cache_clear",
            "run",
            "sequence",
            "setenv"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 13,
          "name": "test_rate_limit_enforced"
        },
        {
          "calls": [
            "cache_clear",
            "create_app",
            "delenv",
            "raises",
            "setenv"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 35,
          "lineno": 28,
          "name": "test_production_requires_allowed_origins"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "fastapi.testclient",
        "pytest",
        "src.config.settings",
        "src.core.middleware",
        "src.main"
      ]
    },
    "tests/test_overlay_configuration.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "dumps",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 10,
          "name": "overlay_file"
        },
        {
          "calls": [
            "isinstance",
            "load_overlay",
            "to_sanitised_dict"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 46,
          "lineno": 28,
          "name": "test_load_overlay_merges_profile_and_defaults"
        },
        {
          "calls": [
            "delenv",
            "load_overlay",
            "setenv",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 55,
          "lineno": 49,
          "name": "test_environment_variable_override"
        },
        {
          "calls": [
            "OverlayConfig",
            "is_module_enabled"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 58,
          "name": "test_guardrail_defaults_when_missing"
        },
        {
          "calls": [
            "OverlayConfig",
            "is_module_enabled"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 85,
          "lineno": 68,
          "name": "test_module_defaults_and_custom_specs"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 92,
          "lineno": 88,
          "name": "test_overlay_rejects_unknown_keys"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 103,
          "lineno": 95,
          "name": "test_overlay_rejects_outside_data_directory"
        },
        {
          "calls": [
            "delenv",
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 115,
          "lineno": 106,
          "name": "test_token_strategy_requires_environment"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 138,
          "lineno": 118,
          "name": "test_compliance_controls_reject_unknown_fields"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 156,
          "lineno": 141,
          "name": "test_policy_actions_reject_unknown_fields"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 175,
          "lineno": 159,
          "name": "test_policy_action_triggers_normalised"
        },
        {
          "calls": [
            "dumps",
            "get",
            "load_overlay",
            "to_sanitised_dict",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 200,
          "lineno": 178,
          "name": "test_policy_engine_overlay_round_trip"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "to_sanitised_dict",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 228,
          "lineno": 203,
          "name": "test_overlay_toggles_round_trip"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 243,
          "lineno": 231,
          "name": "test_policy_engine_rejects_invalid_timeout"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 259,
          "lineno": 246,
          "name": "test_policy_engine_rejects_unknown_fields"
        },
        {
          "calls": [
            "dumps",
            "load_overlay",
            "to_sanitised_dict",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 281,
          "lineno": 262,
          "name": "test_signing_configuration_round_trip"
        }
      ],
      "imports": [
        "core.configuration",
        "json",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_pipeline_integration.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "InputNormalizer",
            "PipelineOrchestrator",
            "any",
            "dumps",
            "encode",
            "load_cve_feed",
            "load_overlay",
            "load_sarif",
            "load_sbom",
            "run",
            "setdefault"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 29,
          "lineno": 8,
          "name": "test_pipeline_emits_compliance_results"
        }
      ],
      "imports": [
        "apps.api.normalizers",
        "apps.api.pipeline",
        "core.configuration",
        "json"
      ]
    },
    "tests/test_pipeline_matching.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "CVERecordSummary",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "SBOMComponent",
            "SarifFinding"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 92,
          "lineno": 23,
          "name": "build_orchestrator_payload"
        },
        {
          "calls": [
            "CVERecordSummary",
            "ImportError",
            "InputNormalizer",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "PipelineOrchestrator",
            "SarifFinding",
            "load_sbom",
            "read_text",
            "run",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 161,
          "lineno": 95,
          "name": "test_provider_specific_sbom_parser_enables_pipeline"
        },
        {
          "calls": [
            "ImportError",
            "InputNormalizer",
            "load_sbom",
            "read_text",
            "setattr"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 179,
          "lineno": 164,
          "name": "test_provider_specific_syft_parser"
        },
        {
          "calls": [
            "ImportError",
            "InputNormalizer",
            "load_sbom",
            "raises",
            "setattr",
            "str"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 194,
          "lineno": 182,
          "name": "test_provider_parser_surfaces_error_code"
        },
        {
          "calls": [
            "PipelineOrchestrator",
            "build_orchestrator_payload",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 221,
          "lineno": 197,
          "name": "test_pipeline_crosswalk_reuses_precomputed_matches"
        },
        {
          "calls": [
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "PipelineOrchestrator",
            "SBOMComponent",
            "get",
            "run"
          ],
          "cyclomatic_complexity": 3,
          "docstring": null,
          "end_lineno": 263,
          "lineno": 224,
          "name": "test_crosswalk_retains_design_indices_for_duplicates"
        },
        {
          "calls": [
            "OverlayConfig",
            "PipelineOrchestrator",
            "build_orchestrator_payload",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 289,
          "lineno": 266,
          "name": "test_pipeline_guardrail_evaluation_uses_overlay_policy"
        },
        {
          "calls": [
            "OverlayConfig",
            "PipelineOrchestrator",
            "build_orchestrator_payload",
            "get",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 319,
          "lineno": 292,
          "name": "test_pipeline_emits_ai_agent_analysis_when_enabled"
        },
        {
          "calls": [
            "CVERecordSummary",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "OverlayConfig",
            "PipelineOrchestrator",
            "SBOMComponent",
            "any",
            "get",
            "run"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 381,
          "lineno": 322,
          "name": "test_pipeline_emits_exploitability_summary"
        },
        {
          "calls": [
            "CVERecordSummary",
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "PipelineOrchestrator",
            "SBOMComponent",
            "SarifFinding",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 441,
          "lineno": 384,
          "name": "test_pipeline_supports_design_rows_with_name_column"
        },
        {
          "calls": [
            "OverlayConfig",
            "PipelineOrchestrator",
            "build_orchestrator_payload",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 465,
          "lineno": 444,
          "name": "test_pipeline_respects_module_toggles"
        },
        {
          "calls": [
            "OverlayConfig",
            "PipelineOrchestrator",
            "build_orchestrator_payload",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 494,
          "lineno": 468,
          "name": "test_pipeline_executes_custom_modules"
        },
        {
          "calls": [
            "NormalizedCVEFeed",
            "NormalizedSARIF",
            "NormalizedSBOM",
            "OverlayConfig",
            "PipelineOrchestrator",
            "get",
            "next",
            "run"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 561,
          "lineno": 497,
          "name": "test_pipeline_emits_iac_posture_summary"
        }
      ],
      "imports": [
        "__future__",
        "apps.api.normalizers",
        "apps.api.pipeline",
        "core.configuration",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_policy_connectors.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 22,
          "lineno": 11,
          "methods": [
            {
              "calls": [
                "dumps"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 16,
              "lineno": 12,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 19,
              "lineno": 18,
              "name": "raise_for_status"
            },
            {
              "calls": [
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 22,
              "lineno": 21,
              "name": "json"
            }
          ],
          "name": "DummyResponse"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "DummyResponse",
            "OverlayConfig",
            "Path",
            "PolicyAutomation",
            "all",
            "any",
            "append",
            "execute",
            "glob",
            "len",
            "list",
            "plan",
            "setattr",
            "setenv",
            "startswith"
          ],
          "cyclomatic_complexity": 8,
          "docstring": null,
          "end_lineno": 96,
          "lineno": 25,
          "name": "test_policy_automation_executes_connectors"
        }
      ],
      "imports": [
        "core.configuration",
        "core.policy",
        "json",
        "pathlib",
        "pytest",
        "typing"
      ]
    },
    "tests/test_policy_kevs.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 32,
          "lineno": 19,
          "methods": [
            {
              "calls": [
                "callable",
                "get",
                "isinstance",
                "items",
                "setattr",
                "startswith"
              ],
              "cyclomatic_complexity": 5,
              "docstring": null,
              "end_lineno": 25,
              "lineno": 20,
              "name": "__init__"
            },
            {
              "calls": [
                "dir",
                "getattr",
                "isupper"
              ],
              "cyclomatic_complexity": 2,
              "docstring": null,
              "end_lineno": 32,
              "lineno": 27,
              "name": "model_dump"
            }
          ],
          "name": "_BaseSettings"
        }
      ],
      "docstring": "Tests for KEV waiver enforcement in the policy API.",
      "functions": [
        {
          "calls": [
            "SessionLocal",
            "begin",
            "create_async_engine",
            "dispose",
            "run_sync",
            "sessionmaker",
            "test_fn"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 54,
          "lineno": 44,
          "name": "_execute_with_session"
        },
        {
          "calls": [
            "_execute_with_session",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 58,
          "lineno": 57,
          "name": "run_with_session"
        },
        {
          "calls": [
            "GateRequest",
            "any",
            "evaluate_gate",
            "lower",
            "run_with_session"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "KEV findings without waivers must trigger a hard block.",
          "end_lineno": 78,
          "lineno": 61,
          "name": "test_kevs_block_without_waiver"
        },
        {
          "calls": [
            "GateRequest",
            "WaiverCreate",
            "create_waiver",
            "evaluate_gate",
            "now",
            "run_with_session",
            "timedelta"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "An approved, active waiver should allow the deployment to proceed.",
          "end_lineno": 110,
          "lineno": 81,
          "name": "test_kevs_allow_with_active_waiver"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "datetime",
        "pydantic",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.orm",
        "src.api.v1.policy",
        "src.models",
        "src.models.base_sqlite",
        "sys",
        "types",
        "typing"
      ]
    },
    "tests/test_policy_opa.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 23,
          "lineno": 13,
          "methods": [
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 16,
              "lineno": 14,
              "name": "__init__"
            },
            {
              "calls": [],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 19,
              "lineno": 18,
              "name": "health_check"
            },
            {
              "calls": [
                "append",
                "dict"
              ],
              "cyclomatic_complexity": 1,
              "docstring": null,
              "end_lineno": 23,
              "lineno": 21,
              "name": "evaluate_policy"
            }
          ],
          "name": "_StubEngine"
        }
      ],
      "docstring": "OPA integration tests for the policy evaluation endpoint.",
      "functions": [
        {
          "calls": [
            "GateRequest",
            "evaluate_gate",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 53,
          "lineno": 26,
          "name": "_evaluate_with_stub"
        },
        {
          "calls": [
            "_StubEngine",
            "_evaluate_with_stub",
            "run_with_session"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "OPA block responses should fail the gate even when local checks pass.",
          "end_lineno": 66,
          "lineno": 56,
          "name": "test_policy_blocks_when_opa_denies"
        },
        {
          "calls": [
            "_StubEngine",
            "_evaluate_with_stub",
            "run_with_session"
          ],
          "cyclomatic_complexity": 1,
          "docstring": "OPA allow responses should permit the deployment when no other guardrail blocks it.",
          "end_lineno": 79,
          "lineno": 69,
          "name": "test_policy_allows_when_opa_passes"
        }
      ],
      "imports": [
        "__future__",
        "pytest",
        "src.api.v1",
        "tests.test_policy_kevs",
        "typing"
      ]
    },
    "tests/test_postman_ci_sync.py": {
      "classes": [],
      "docstring": "Ensure Postman CI/CD suites stay aligned with hard-block, evidence, and signature scenarios.",
      "functions": [
        {
          "calls": [
            "Path",
            "endswith",
            "get",
            "isinstance",
            "loads",
            "read_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 30,
          "lineno": 9,
          "name": "test_postman_collection_contains_alignment_scenarios"
        }
      ],
      "imports": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "tests/test_postman_phase_collections.py": {
      "classes": [],
      "docstring": "Validate Postman assets that power the multi-phase bank validation flow.",
      "functions": [
        {
          "calls": [
            "Path",
            "exists",
            "loads",
            "read_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 12,
          "lineno": 9,
          "name": "_load_json"
        },
        {
          "calls": [
            "_load_json",
            "endswith",
            "get",
            "isinstance",
            "items",
            "next"
          ],
          "cyclomatic_complexity": 5,
          "docstring": null,
          "end_lineno": 47,
          "lineno": 15,
          "name": "test_phase_one_health_collection_targets_core_probes"
        },
        {
          "calls": [
            "_load_json",
            "get",
            "isinstance",
            "items"
          ],
          "cyclomatic_complexity": 4,
          "docstring": null,
          "end_lineno": 78,
          "lineno": 50,
          "name": "test_phase_two_cicd_collection_covers_allow_block_defer"
        },
        {
          "calls": [
            "_load_json",
            "endswith",
            "extend",
            "get",
            "isinstance",
            "join"
          ],
          "cyclomatic_complexity": 8,
          "docstring": null,
          "end_lineno": 110,
          "lineno": 81,
          "name": "test_phase_three_performance_collection_targets_hot_path"
        },
        {
          "calls": [
            "Path",
            "exists",
            "read_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 128,
          "lineno": 113,
          "name": "test_bank_api_script_references_all_collections"
        }
      ],
      "imports": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "tests/test_probabilistic.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ProbabilisticForecastEngine",
            "abs",
            "any",
            "evaluate",
            "keys",
            "set",
            "sum",
            "values"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 42,
          "lineno": 4,
          "name": "test_probabilistic_engine_generates_posterior_and_forecast"
        },
        {
          "calls": [
            "ProbabilisticForecastEngine",
            "evaluate",
            "len"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 54,
          "lineno": 45,
          "name": "test_probabilistic_engine_respects_component_limit"
        },
        {
          "calls": [
            "ProbabilisticForecastEngine",
            "calibrate"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 85,
          "lineno": 57,
          "name": "test_probabilistic_calibration_updates_priors_and_transitions"
        },
        {
          "calls": [
            "ProbabilisticForecastEngine",
            "validate_transitions"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 93,
          "lineno": 88,
          "name": "test_probabilistic_transition_validation_detects_invalid"
        }
      ],
      "imports": [
        "core.probabilistic"
      ]
    },
    "tests/test_processing_layer_fallbacks.py": {
      "classes": [],
      "docstring": "Validate Processing Layer fallbacks when scientific libraries are unavailable.",
      "functions": [
        {
          "calls": [
            "BayesianPriorMapping",
            "SSVCContext",
            "approx",
            "compute_priors",
            "import_module",
            "reload",
            "run",
            "set",
            "sum",
            "values"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 31,
          "lineno": 12,
          "name": "test_bayesian_mapping_fallback_returns_distribution"
        },
        {
          "calls": [
            "MarkovState",
            "MarkovTransitionMatrixBuilder",
            "approx",
            "datetime",
            "import_module",
            "predict_state_evolution",
            "reload",
            "run",
            "sum",
            "values"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 54,
          "lineno": 34,
          "name": "test_markov_builder_fallback_uses_epss_and_kev_bias"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "datetime",
        "importlib",
        "pytest"
      ]
    },
    "tests/test_rate_limit.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "RateLimitMiddleware",
            "cache_clear",
            "fixture",
            "import_module",
            "reload",
            "setenv"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 21,
          "lineno": 10,
          "name": "fixture_rate_limiter"
        },
        {
          "calls": [
            "_consume_token",
            "all",
            "append",
            "range",
            "run"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 36,
          "lineno": 24,
          "name": "test_rate_limit_blocks_after_threshold"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "importlib",
        "pytest"
      ]
    },
    "tests/test_real_opa_engine_factory.py": {
      "classes": [
        {
          "docstring": null,
          "end_lineno": 16,
          "lineno": 9,
          "methods": [],
          "name": "_Settings"
        }
      ],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "_Settings",
            "create",
            "isinstance",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 22,
          "lineno": 19,
          "name": "test_factory_uses_production_engine"
        },
        {
          "calls": [
            "DemoSettings",
            "create",
            "isinstance",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 31,
          "lineno": 25,
          "name": "test_factory_returns_demo_when_flag_enabled"
        }
      ],
      "imports": [
        "__future__",
        "pytest",
        "src.services",
        "src.services.real_opa_engine"
      ]
    },
    "tests/test_risk_adjustment.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "ContextualRiskScorer",
            "fixture"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 34,
          "lineno": 33,
          "name": "scorer"
        },
        {
          "calls": [
            "apply"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 53,
          "lineno": 37,
          "name": "test_contextual_risk_scorer_downgrades_low_impact"
        },
        {
          "calls": [
            "apply"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 72,
          "lineno": 56,
          "name": "test_contextual_risk_scorer_upgrades_high_impact"
        },
        {
          "calls": [
            "ComplianceEngine",
            "_evaluate_framework"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 91,
          "lineno": 75,
          "name": "test_compliance_engine_uses_adjusted_severity"
        }
      ],
      "imports": [
        "pathlib",
        "pytest",
        "src.services.compliance_engine",
        "src.services.risk_scorer",
        "sys",
        "types"
      ]
    },
    "tests/test_rl_controller.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "Experience",
            "_run",
            "export_policy",
            "get",
            "get_instance",
            "recommend_action",
            "record_experience",
            "reset_instance",
            "run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 31,
          "lineno": 8,
          "name": "test_rl_controller_updates_q_values"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "src.services.rl_controller"
      ]
    },
    "tests/test_run_registry.py": {
      "classes": [],
      "docstring": "Tests for the run registry service.",
      "functions": [
        {
          "calls": [
            "resolve_run",
            "setattr"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 15,
          "lineno": 13,
          "name": "_prepare"
        },
        {
          "calls": [
            "_prepare",
            "exists"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 24,
          "lineno": 18,
          "name": "test_resolve_run_creates_expected_structure"
        },
        {
          "calls": [
            "_prepare",
            "loads",
            "raises",
            "read_text",
            "save_input",
            "write_output"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 40,
          "lineno": 27,
          "name": "test_save_input_and_write_output"
        },
        {
          "calls": [
            "_prepare",
            "exists",
            "reopen_run"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 48,
          "lineno": 43,
          "name": "test_reopen_run"
        },
        {
          "calls": [
            "_prepare",
            "exists",
            "loads",
            "read_text",
            "strip",
            "verify_manifest",
            "write_output"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 65,
          "lineno": 51,
          "name": "test_signed_outputs_create_transparency_index"
        }
      ],
      "imports": [
        "__future__",
        "json",
        "pathlib",
        "pytest",
        "src.services"
      ]
    },
    "tests/test_secure_defaults.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "cache_clear",
            "delenv",
            "get_settings",
            "raises",
            "resolve_allowed_origins",
            "setenv"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 25,
          "lineno": 6,
          "name": "test_production_requires_allowed_origins"
        }
      ],
      "imports": [
        "__future__",
        "pytest"
      ]
    },
    "tests/test_signing_verify.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "sign_manifest",
            "verify_manifest"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 12,
          "lineno": 9,
          "name": "test_sign_verify_roundtrip"
        },
        {
          "calls": [
            "sign_manifest",
            "verify_manifest"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 19,
          "lineno": 15,
          "name": "test_verify_failure_on_tamper"
        },
        {
          "calls": [
            "cache_clear",
            "delenv",
            "raises",
            "sign_manifest"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 27,
          "lineno": 22,
          "name": "test_signing_disabled"
        }
      ],
      "imports": [
        "__future__",
        "pytest",
        "src.config.settings",
        "src.services"
      ]
    },
    "tests/test_ssdlc_runner.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "_load_overlay",
            "_overlay_for_stage",
            "write_text"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 20,
          "lineno": 10,
          "name": "test_overlay_merge"
        },
        {
          "calls": [
            "_load_overlay",
            "raises",
            "write_text"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 27,
          "lineno": 23,
          "name": "test_overlay_requires_mapping"
        },
        {
          "calls": [
            "_ensure_inputs",
            "raises",
            "setattr"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 33,
          "lineno": 30,
          "name": "test_ensure_inputs_missing"
        },
        {
          "calls": [
            "exists",
            "keys",
            "main",
            "mkdir",
            "parametrize",
            "sorted",
            "str"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 51,
          "lineno": 46,
          "name": "test_individual_stage_outputs"
        },
        {
          "calls": [
            "exists",
            "main",
            "str",
            "values"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 59,
          "lineno": 54,
          "name": "test_run_all_generates_everything"
        }
      ],
      "imports": [
        "__future__",
        "pathlib",
        "pytest",
        "simulations.ssdlc"
      ]
    },
    "tests/test_storage_security.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "mkdir"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 13,
          "lineno": 10,
          "name": "allowlisted_root"
        },
        {
          "calls": [
            "ArtefactArchive",
            "mkdir",
            "raises"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 20,
          "lineno": 16,
          "name": "test_archive_rejects_directory_outside_allowlist"
        },
        {
          "calls": [
            "ArtefactArchive",
            "chmod",
            "raises"
          ],
          "cyclomatic_complexity": 2,
          "docstring": null,
          "end_lineno": 26,
          "lineno": 23,
          "name": "test_archive_rejects_world_writable_root"
        }
      ],
      "imports": [
        "core.storage",
        "os",
        "pathlib",
        "pytest"
      ]
    },
    "tests/test_tenant_rbac.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "SimpleNamespace",
            "_run",
            "classmethod",
            "run",
            "setattr",
            "user_has_tenant_role"
          ],
          "cyclomatic_complexity": 1,
          "docstring": null,
          "end_lineno": 23,
          "lineno": 11,
          "name": "test_user_has_tenant_role"
        }
      ],
      "imports": [
        "__future__",
        "asyncio",
        "pytest",
        "src.core",
        "types"
      ]
    },
    "tests/test_vex_ingestion.py": {
      "classes": [],
      "docstring": null,
      "functions": [
        {
          "calls": [
            "apply_assertions",
            "get",
            "ingest_document",
            "len",
            "setattr"
          ],
          "cyclomatic_complexity": 2,
          "docstring": "CycloneDX ingestion should flag `not_affected` findings as suppressed.",
          "end_lineno": 38,
          "lineno": 11,
          "name": "test_vex_ingestion_suppresses_not_affected"
        }
      ],
      "imports": [
        "__future__",
        "pathlib",
        "pytest",
        "src.services",
        "src.services.vex_ingestion"
      ]
    }
  },
  "generated_at": "2025-10-10T04:21:57.877120Z"
}

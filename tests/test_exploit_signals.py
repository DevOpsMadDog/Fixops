import json
from pathlib import Path

import pytest

from apps.api.normalizers import CVERecordSummary, NormalizedCVEFeed
from core.configuration import OverlayConfig
from core.exploit_signals import ExploitFeedRefresher, ExploitSignalEvaluator


def test_exploit_signal_evaluator_matches_boolean_and_probability() -> None:
    settings = {
        "signals": {
            "kev": {
                "mode": "boolean",
                "fields": ["knownExploited", "kev"],
                "escalate_to": "critical",
            },
            "epss": {
                "mode": "probability",
                "fields": ["epss", "epss_score"],
                "threshold": 0.6,
                "severity_floor": "high",
            },
        },
        "references": ["https://www.cisa.gov/known-exploited-vulnerabilities-catalog"],
    }
    evaluator = ExploitSignalEvaluator(settings)
    feed = NormalizedCVEFeed(
        records=[
            CVERecordSummary(
                cve_id="CVE-2024-0001",
                title="Example",
                severity="medium",
                exploited=True,
                raw={"knownExploited": True, "epss": 0.72},
            ),
            CVERecordSummary(
                cve_id="CVE-2024-0002",
                title="Another",
                severity="low",
                exploited=False,
                raw={"epss_score": 0.61},
            ),
        ],
        errors=[],
        metadata={"record_count": 2},
    )

    summary = evaluator.evaluate(feed)
    assert summary is not None
    assert summary["overview"]["signals_configured"] == 2
    assert summary["overview"]["matched_records"] == 3
    kev_summary = summary["signals"]["kev"]
    epss_summary = summary["signals"]["epss"]
    assert kev_summary["match_count"] == 1
    assert epss_summary["match_count"] == 2
    assert summary["metadata"]["references"]
    assert any(
        entry["recommended_severity"] in {"critical", "high"}
        for entry in summary.get("escalations", [])
    )


def test_exploit_signal_evaluator_returns_none_without_signals() -> None:
    evaluator = ExploitSignalEvaluator({})
    feed = NormalizedCVEFeed(records=[], errors=[], metadata={})
    assert evaluator.evaluate(feed) is None


def test_exploit_feed_refresher_enriches_records(
    tmp_path: Path, monkeypatch: pytest.MonkeyPatch
) -> None:
    feed_source = tmp_path / "kev-source.json"
    feed_source.write_text(
        json.dumps(
            {
                "vulnerabilities": [
                    {"cveID": "CVE-2024-0001", "epss": 0.9},
                    {"cveID": "CVE-2024-9999", "epss": 0.2},
                ]
            }
        ),
        encoding="utf-8",
    )

    overlay = OverlayConfig(
        mode="demo",
        exploit_signals={
            "auto_refresh": {
                "enabled": True,
                "feeds": [
                    {
                        "id": "kev",
                        "path": str(feed_source),
                        "destination": "kev-latest.json",
                        "cve_field": "cveID",
                        "mark_exploited": True,
                        "attributes": {"knownExploited": True},
                    }
                ],
            },
            "signals": {},
        },
        data={"feeds_dir": "feeds/demo"},
        modules={"exploit_signals": {"enabled": True}},
        allowed_data_roots=(tmp_path,),
    )

    feed = NormalizedCVEFeed(
        records=[
            CVERecordSummary(
                cve_id="CVE-2024-0001",
                title="Example",
                severity="medium",
                exploited=False,
                raw={},
            )
        ],
        errors=[],
        metadata={},
    )

    refresher = ExploitFeedRefresher(overlay)
    summary = refresher.refresh(feed, last_refreshed=None)

    assert summary is not None
    assert summary["status"] == "refreshed"
    assert summary["feeds"][0]["matched"] == 1
    assert feed.records[0].exploited is True
    assert feed.records[0].raw["kev"]["knownExploited"] is True
    feeds_dir = overlay.data_directories["feeds_dir"]
    assert (feeds_dir / "kev-latest.json").exists()
    assert "last_refreshed" in overlay.exploit_signals

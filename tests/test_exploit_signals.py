from backend.normalizers import CVERecordSummary, NormalizedCVEFeed
from fixops.exploit_signals import ExploitSignalEvaluator


def test_exploit_signal_evaluator_matches_boolean_and_probability() -> None:
    settings = {
        "signals": {
            "kev": {
                "mode": "boolean",
                "fields": ["knownExploited", "kev"],
                "escalate_to": "critical",
            },
            "epss": {
                "mode": "probability",
                "fields": ["epss", "epss_score"],
                "threshold": 0.6,
                "severity_floor": "high",
            },
        },
        "references": ["https://www.cisa.gov/known-exploited-vulnerabilities-catalog"],
    }
    evaluator = ExploitSignalEvaluator(settings)
    feed = NormalizedCVEFeed(
        records=[
            CVERecordSummary(
                cve_id="CVE-2024-0001",
                title="Example", 
                severity="medium",
                exploited=True,
                raw={"knownExploited": True, "epss": 0.72},
            ),
            CVERecordSummary(
                cve_id="CVE-2024-0002",
                title="Another", 
                severity="low",
                exploited=False,
                raw={"epss_score": 0.61},
            ),
        ],
        errors=[],
        metadata={"record_count": 2},
    )

    summary = evaluator.evaluate(feed)
    assert summary is not None
    assert summary["overview"]["signals_configured"] == 2
    assert summary["overview"]["matched_records"] == 3
    kev_summary = summary["signals"]["kev"]
    epss_summary = summary["signals"]["epss"]
    assert kev_summary["match_count"] == 1
    assert epss_summary["match_count"] == 2
    assert summary["metadata"]["references"]
    assert any(entry["recommended_severity"] in {"critical", "high"} for entry in summary.get("escalations", []))


def test_exploit_signal_evaluator_returns_none_without_signals() -> None:
    evaluator = ExploitSignalEvaluator({})
    feed = NormalizedCVEFeed(records=[], errors=[], metadata={})
    assert evaluator.evaluate(feed) is None

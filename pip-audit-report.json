{"dependencies": [{"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.11.0", "vulns": []}, {"name": "apscheduler", "version": "3.11.0", "vulns": []}, {"name": "asgiref", "version": "3.10.0", "vulns": []}, {"name": "attrs", "version": "25.4.0", "vulns": []}, {"name": "authlib", "version": "1.6.5", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "black", "version": "24.10.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "certifi", "version": "2025.10.5", "vulns": []}, {"name": "cffi", "version": "2.0.0", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.4", "vulns": []}, {"name": "click", "version": "8.3.0", "vulns": []}, {"name": "coverage", "version": "7.11.0", "vulns": []}, {"name": "cryptography", "version": "46.0.3", "vulns": []}, {"name": "cvelib", "version": "1.8.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "dnspython", "version": "2.8.0", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "elementpath", "version": "5.0.4", "vulns": []}, {"name": "email-validator", "version": "2.3.0", "vulns": []}, {"name": "fastapi", "version": "0.111.1", "vulns": []}, {"name": "fastapi-cli", "version": "0.0.13", "vulns": []}, {"name": "fastjsonschema", "version": "2.21.2", "vulns": []}, {"name": "filelock", "version": "3.20.0", "vulns": []}, {"name": "flake8", "version": "7.3.0", "vulns": []}, {"name": "fsspec", "version": "2025.9.0", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "grpcio", "version": "1.75.1", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httptools", "version": "0.7.1", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "identify", "version": "2.6.15", "vulns": []}, {"name": "idna", "version": "3.11", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "isort", "version": "5.13.2", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "joblib", "version": "1.5.2", "vulns": []}, {"name": "jsonschema", "version": "4.25.1", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.9.1", "vulns": []}, {"name": "lib4sbom", "version": "0.8.8", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "markdown-it-py", "version": "4.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.3", "vulns": []}, {"name": "marshmallow", "version": "4.0.1", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.2", "vulns": []}, {"name": "mypy", "version": "1.10.1", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nltk", "version": "3.9.2", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "numpy", "version": "2.3.4", "vulns": []}, {"name": "nvidia-cublas-cu12", "version": "12.8.4.1", "vulns": []}, {"name": "nvidia-cuda-cupti-cu12", "version": "12.8.90", "vulns": []}, {"name": "nvidia-cuda-nvrtc-cu12", "version": "12.8.93", "vulns": []}, {"name": "nvidia-cuda-runtime-cu12", "version": "12.8.90", "vulns": []}, {"name": "nvidia-cudnn-cu12", "version": "9.10.2.21", "vulns": []}, {"name": "nvidia-cufft-cu12", "version": "11.3.3.83", "vulns": []}, {"name": "nvidia-cufile-cu12", "version": "1.13.1.3", "vulns": []}, {"name": "nvidia-curand-cu12", "version": "10.3.9.90", "vulns": []}, {"name": "nvidia-cusolver-cu12", "version": "11.7.3.90", "vulns": []}, {"name": "nvidia-cusparse-cu12", "version": "12.5.8.93", "vulns": []}, {"name": "nvidia-cusparselt-cu12", "version": "0.7.1", "vulns": []}, {"name": "nvidia-nccl-cu12", "version": "2.27.5", "vulns": []}, {"name": "nvidia-nvjitlink-cu12", "version": "12.8.93", "vulns": []}, {"name": "nvidia-nvshmem-cu12", "version": "3.3.20", "vulns": []}, {"name": "nvidia-nvtx-cu12", "version": "12.8.90", "vulns": []}, {"name": "opentelemetry-api", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-instrumentation", "version": "0.59b0", "vulns": []}, {"name": "opentelemetry-instrumentation-asgi", "version": "0.59b0", "vulns": []}, {"name": "opentelemetry-instrumentation-fastapi", "version": "0.59b0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.59b0", "vulns": []}, {"name": "opentelemetry-util-http", "version": "0.59b0", "vulns": []}, {"name": "opt-einsum", "version": "3.4.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandas", "version": "2.3.3", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "patsy", "version": "1.0.1", "vulns": []}, {"name": "pbr", "version": "7.0.1", "vulns": []}, {"name": "pgmpy", "version": "0.1.24", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": [{"id": "GHSA-4xh5-x5gv-qwph", "fix_versions": [], "aliases": ["CVE-2025-8869"], "description": "### Summary  In the fallback extraction path for source distributions, `pip` used Python\u2019s `tarfile` module without verifying that symbolic/hard link targets resolve inside the intended extraction directory. A malicious sdist can include links that escape the target directory and overwrite arbitrary files on the invoking host during `pip install`.  ### Impact  Successful exploitation enables arbitrary file overwrite outside the build/extraction directory on the machine running `pip`. This can be leveraged to tamper with configuration or startup files and may lead to further code execution depending on the environment, but the direct, guaranteed impact is integrity compromise on the vulnerable system.  ### Conditions  The issue is triggered when installing an attacker-controlled sdist (e.g., from an index or URL) and the fallback extraction code path is used. No special privileges are required beyond running `pip install`; active user action is necessary.  ### Remediation  The [fix](https://github.com/pypa/pip/pull/13550), while available as a patch that can be manually applied, has not yet been put into a numbered version but is planned for `25.3`. Using a Python interpreter that implements the safe-extraction behavior described by **PEP 706** provides additional defense in depth for other `tarfile` issues but is not a substitute for upgrading pip for this specific flaw."}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.5.0", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pre-commit", "version": "3.8.0", "vulns": []}, {"name": "protobuf", "version": "6.33.0", "vulns": []}, {"name": "psutil", "version": "7.1.2", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pycodestyle", "version": "2.14.0", "vulns": []}, {"name": "pycparser", "version": "2.23", "vulns": []}, {"name": "pydantic", "version": "2.12.2", "vulns": []}, {"name": "pydantic-core", "version": "2.41.4", "vulns": []}, {"name": "pyflakes", "version": "3.4.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pyparsing", "version": "3.2.5", "vulns": []}, {"name": "pytest", "version": "8.4.2", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.1", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.3", "vulns": []}, {"name": "referencing", "version": "0.37.0", "vulns": []}, {"name": "regex", "version": "2025.10.23", "vulns": []}, {"name": "requests", "version": "2.32.5", "vulns": []}, {"name": "rich", "version": "14.2.0", "vulns": []}, {"name": "rich-toolkit", "version": "0.15.1", "vulns": []}, {"name": "rpds-py", "version": "0.27.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.16", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.14", "vulns": []}, {"name": "safety", "version": "3.6.2", "vulns": []}, {"name": "safety-schemas", "version": "0.0.16", "vulns": []}, {"name": "sarif-om", "version": "1.0.4", "vulns": []}, {"name": "scikit-learn", "version": "1.7.2", "vulns": []}, {"name": "scipy", "version": "1.16.2", "vulns": []}, {"name": "semantic-version", "version": "2.10.0", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "starlette", "version": "0.37.2", "vulns": [{"id": "GHSA-f96h-pmfr-66vw", "fix_versions": ["0.40.0"], "aliases": ["CVE-2024-47874"], "description": "### Summary Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette.  ### PoC  ```python from starlette.applications import Starlette from starlette.routing import Route  async def poc(request):     async with request.form():         pass  app = Starlette(routes=[     Route('/', poc, methods=[\"POST\"]), ]) ```  ```sh curl http://localhost:8000 -F 'big=</dev/urandom' ```  ### Impact This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. "}, {"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "statsmodels", "version": "0.14.5", "vulns": []}, {"name": "stevedore", "version": "5.5.0", "vulns": []}, {"name": "structlog", "version": "25.4.0", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "torch", "version": "2.9.0", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "triton", "version": "3.5.0", "vulns": []}, {"name": "typer", "version": "0.19.2", "vulns": []}, {"name": "types-requests", "version": "2.32.4.20250913", "vulns": []}, {"name": "typing-extensions", "version": "4.15.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.2", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "tzlocal", "version": "5.3.1", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.37.0", "vulns": []}, {"name": "uvloop", "version": "0.22.1", "vulns": []}, {"name": "virtualenv", "version": "20.35.3", "vulns": []}, {"name": "watchfiles", "version": "1.1.1", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "wrapt", "version": "1.17.3", "vulns": []}, {"name": "xmlschema", "version": "4.2.0", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}], "fixes": []}

"""Exploit and threat intelligence feeds.

Integrations for Exploit-DB, Metasploit, Vulners, AlienVault OTX, Abuse.ch, etc.
"""

from __future__ import annotations

import csv
import json
from typing import List, Optional

from .base import ThreatIntelligenceFeed, VulnerabilityRecord


class ExploitDBFeed(ThreatIntelligenceFeed):
    """Exploit-DB public exploit database feed."""

    @property
    def feed_name(self) -> str:
        return "Exploit-DB"

    @property
    def feed_url(self) -> str:
        return "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"

    @property
    def cache_filename(self) -> str:
        return "exploitdb.csv"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse Exploit-DB CSV feed."""
        try:
            lines = data.decode("utf-8").splitlines()
            reader = csv.DictReader(lines)
            records: List[VulnerabilityRecord] = []

            for row in reader:
                exploit_id = row.get("id")
                if not exploit_id:
                    continue

                description = row.get("description", "")
                platform = row.get("platform", "")
                exploit_type = row.get("type", "")

                record = VulnerabilityRecord(
                    id=f"EDB-{exploit_id}",
                    source="Exploit-DB",
                    description=f"{description} [{platform} - {exploit_type}]",
                    published=row.get("date"),
                    exploit_available=True,
                    exploit_maturity="public",
                    references=[f"https://www.exploit-db.com/exploits/{exploit_id}"],
                    metadata={
                        "platform": platform,
                        "type": exploit_type,
                        "author": row.get("author"),
                    },
                )
                records.append(record)

            return records

        except Exception as exc:
            self.logger.error("Failed to parse Exploit-DB CSV: %s", exc)
            return []


class VulnersFeed(ThreatIntelligenceFeed):
    """Vulners vulnerability search engine feed."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):
        """Initialize Vulners feed.

        Parameters
        ----------
        api_key:
            Optional Vulners API key.
        **kwargs:
            Additional arguments passed to parent class.
        """
        super().__init__(**kwargs)
        self.api_key = api_key

    @property
    def feed_name(self) -> str:
        return "Vulners"

    @property
    def feed_url(self) -> str:
        return "https://vulners.com/api/v3/search/lucene/"

    @property
    def cache_filename(self) -> str:
        return "vulners.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse Vulners API response."""
        try:
            payload = json.loads(data.decode("utf-8"))
        except json.JSONDecodeError as exc:
            self.logger.error("Failed to parse Vulners JSON: %s", exc)
            return []

        results = payload.get("data", {}).get("search", [])
        records: List[VulnerabilityRecord] = []

        for result in results:
            vuln_id = result.get("id")
            if not vuln_id:
                continue

            record = VulnerabilityRecord(
                id=vuln_id,
                source="Vulners",
                severity=result.get("cvss", {}).get("severity"),
                cvss_score=result.get("cvss", {}).get("score"),
                description=result.get("description", ""),
                published=result.get("published"),
                modified=result.get("modified"),
                exploit_available=result.get("exploit", False),
                references=[result.get("href")] if result.get("href") else [],
                metadata={"type": result.get("type")},
            )
            records.append(record)

        return records


class AlienVaultOTXFeed(ThreatIntelligenceFeed):
    """AlienVault Open Threat Exchange (OTX) feed."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):
        """Initialize AlienVault OTX feed.

        Parameters
        ----------
        api_key:
            Optional AlienVault OTX API key.
        **kwargs:
            Additional arguments passed to parent class.
        """
        super().__init__(**kwargs)
        self.api_key = api_key

    @property
    def feed_name(self) -> str:
        return "AlienVault OTX"

    @property
    def feed_url(self) -> str:
        return "https://otx.alienvault.com/api/v1/pulses/subscribed"

    @property
    def cache_filename(self) -> str:
        return "alienvault-otx.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse AlienVault OTX feed."""
        try:
            payload = json.loads(data.decode("utf-8"))
        except json.JSONDecodeError as exc:
            self.logger.error("Failed to parse AlienVault OTX JSON: %s", exc)
            return []

        pulses = payload.get("results", [])
        records: List[VulnerabilityRecord] = []

        for pulse in pulses:
            pulse_id = pulse.get("id")
            if not pulse_id:
                continue

            cve_indicators = []
            for indicator in pulse.get("indicators", []):
                if indicator.get("type") == "CVE":
                    cve_indicators.append(indicator.get("indicator"))

            if not cve_indicators:
                continue

            record = VulnerabilityRecord(
                id=pulse_id,
                source="AlienVault OTX",
                description=pulse.get("description", ""),
                published=pulse.get("created"),
                modified=pulse.get("modified"),
                cwe_ids=cve_indicators,
                references=[f"https://otx.alienvault.com/pulse/{pulse_id}"],
                metadata={
                    "name": pulse.get("name"),
                    "tags": pulse.get("tags", []),
                    "tlp": pulse.get("TLP"),
                },
            )
            records.append(record)

        return records


class AbuseCHURLHausFeed(ThreatIntelligenceFeed):
    """Abuse.ch URLhaus malware URL feed."""

    @property
    def feed_name(self) -> str:
        return "Abuse.ch URLhaus"

    @property
    def feed_url(self) -> str:
        return "https://urlhaus.abuse.ch/downloads/json_recent/"

    @property
    def cache_filename(self) -> str:
        return "urlhaus.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse URLhaus feed."""
        try:
            lines = data.decode("utf-8").splitlines()
            records: List[VulnerabilityRecord] = []

            for line in lines:
                if not line.strip() or line.startswith("#"):
                    continue

                entry = json.loads(line)
                url_id = entry.get("id")
                if not url_id:
                    continue

                record = VulnerabilityRecord(
                    id=f"URLhaus-{url_id}",
                    source="Abuse.ch URLhaus",
                    description=f"Malware URL: {entry.get('url', '')}",
                    published=entry.get("dateadded"),
                    severity="HIGH",
                    exploit_available=True,
                    references=[entry.get("url")] if entry.get("url") else [],
                    metadata={
                        "threat": entry.get("threat"),
                        "tags": entry.get("tags", []),
                        "url_status": entry.get("url_status"),
                    },
                )
                records.append(record)

            return records

        except Exception as exc:
            self.logger.error("Failed to parse URLhaus feed: %s", exc)
            return []


class AbuseCHMalwareBazaarFeed(ThreatIntelligenceFeed):
    """Abuse.ch MalwareBazaar malware sample feed."""

    @property
    def feed_name(self) -> str:
        return "Abuse.ch MalwareBazaar"

    @property
    def feed_url(self) -> str:
        return "https://mb-api.abuse.ch/api/v1/"

    @property
    def cache_filename(self) -> str:
        return "malwarebazaar.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse MalwareBazaar feed."""
        try:
            payload = json.loads(data.decode("utf-8"))
        except json.JSONDecodeError as exc:
            self.logger.error("Failed to parse MalwareBazaar JSON: %s", exc)
            return []

        samples = payload.get("data", [])
        records: List[VulnerabilityRecord] = []

        for sample in samples:
            sha256 = sample.get("sha256_hash")
            if not sha256:
                continue

            record = VulnerabilityRecord(
                id=f"MalwareBazaar-{sha256[:16]}",
                source="Abuse.ch MalwareBazaar",
                description=f"Malware sample: {sample.get('file_name', '')}",
                published=sample.get("first_seen"),
                severity="HIGH",
                exploit_available=True,
                metadata={
                    "file_type": sample.get("file_type"),
                    "signature": sample.get("signature"),
                    "tags": sample.get("tags", []),
                },
            )
            records.append(record)

        return records


class AbuseCHThreatFoxFeed(ThreatIntelligenceFeed):
    """Abuse.ch ThreatFox IOC feed."""

    @property
    def feed_name(self) -> str:
        return "Abuse.ch ThreatFox"

    @property
    def feed_url(self) -> str:
        return "https://threatfox.abuse.ch/export/json/recent/"

    @property
    def cache_filename(self) -> str:
        return "threatfox.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse ThreatFox feed."""
        try:
            lines = data.decode("utf-8").splitlines()
            records: List[VulnerabilityRecord] = []

            for line in lines:
                if not line.strip() or line.startswith("#"):
                    continue

                entry = json.loads(line)
                ioc_id = entry.get("id")
                if not ioc_id:
                    continue

                record = VulnerabilityRecord(
                    id=f"ThreatFox-{ioc_id}",
                    source="Abuse.ch ThreatFox",
                    description=f"IOC: {entry.get('ioc', '')} ({entry.get('ioc_type', '')})",
                    published=entry.get("first_seen"),
                    severity="HIGH",
                    exploit_available=True,
                    metadata={
                        "malware": entry.get("malware"),
                        "confidence_level": entry.get("confidence_level"),
                        "tags": entry.get("tags", []),
                    },
                )
                records.append(record)

            return records

        except Exception as exc:
            self.logger.error("Failed to parse ThreatFox feed: %s", exc)
            return []


class Rapid7AttackerKBFeed(ThreatIntelligenceFeed):
    """Rapid7 AttackerKB community threat intelligence feed."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):
        """Initialize AttackerKB feed.

        Parameters
        ----------
        api_key:
            Optional AttackerKB API key.
        **kwargs:
            Additional arguments passed to parent class.
        """
        super().__init__(**kwargs)
        self.api_key = api_key

    @property
    def feed_name(self) -> str:
        return "Rapid7 AttackerKB"

    @property
    def feed_url(self) -> str:
        return "https://api.attackerkb.com/v1/topics"

    @property
    def cache_filename(self) -> str:
        return "attackerkb.json"

    def parse_feed(self, data: bytes) -> List[VulnerabilityRecord]:
        """Parse AttackerKB feed."""
        try:
            payload = json.loads(data.decode("utf-8"))
        except json.JSONDecodeError as exc:
            self.logger.error("Failed to parse AttackerKB JSON: %s", exc)
            return []

        topics = payload.get("data", [])
        records: List[VulnerabilityRecord] = []

        for topic in topics:
            topic_id = topic.get("id")
            if not topic_id:
                continue

            metadata_obj = topic.get("metadata", {})
            cve_id = metadata_obj.get("cve-id")

            record = VulnerabilityRecord(
                id=cve_id or topic_id,
                source="Rapid7 AttackerKB",
                description=topic.get("name", ""),
                published=topic.get("created"),
                modified=topic.get("revised"),
                exploit_available=metadata_obj.get("attacker-value", 0) > 3,
                exploit_maturity="assessed"
                if metadata_obj.get("attacker-value")
                else None,
                references=[f"https://attackerkb.com/topics/{topic_id}"],
                metadata={
                    "attacker_value": metadata_obj.get("attacker-value"),
                    "exploitability": metadata_obj.get("exploitability"),
                },
            )
            records.append(record)

        return records


__all__ = [
    "ExploitDBFeed",
    "VulnersFeed",
    "AlienVaultOTXFeed",
    "AbuseCHURLHausFeed",
    "AbuseCHMalwareBazaarFeed",
    "AbuseCHThreatFoxFeed",
    "Rapid7AttackerKBFeed",
]
